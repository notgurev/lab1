
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c8  080039c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d0  080039d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000188  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e4a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca8  00000000  00000000  0002a052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d8  00000000  00000000  0002c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c56  00000000  00000000  0002cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a567  00000000  00000000  0004f7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf7ac  00000000  00000000  00059d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001294c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002124  00000000  00000000  0012951c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080036f8 	.word	0x080036f8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	080036f8 	.word	0x080036f8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Ringbuf_init+0x1c>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <Ringbuf_init+0x20>)
 80005cc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <Ringbuf_init+0x24>)
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <Ringbuf_init+0x28>)
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000288 	.word	0x20000288
 80005e4:	200001f8 	.word	0x200001f8
 80005e8:	2000028c 	.word	0x2000028c
 80005ec:	20000240 	.word	0x20000240

080005f0 <store_char>:



void store_char(unsigned char c, ring_buffer *buffer)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	3301      	adds	r3, #1
 8000602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000606:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	429a      	cmp	r2, r3
 8000610:	d007      	beq.n	8000622 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	79f9      	ldrb	r1, [r7, #7]
 800061a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <uart_read>:

/* checks, if the entered string is present in the giver buffer ?
 */

int uart_read(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <uart_read+0x4c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <uart_read+0x4c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	429a      	cmp	r2, r3
 8000644:	d102      	bne.n	800064c <uart_read+0x1c>
  {
    return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e010      	b.n	800066e <uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <uart_read+0x4c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <uart_read+0x4c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <uart_read+0x4c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <uart_read+0x4c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800066a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800066c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000288 	.word	0x20000288

08000680 <uart_write>:

/* writes a single character to the uart and increments head
 */
void uart_write(int c)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db21      	blt.n	80006d2 <uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <uart_write+0x60>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	3301      	adds	r3, #1
 8000696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800069a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800069c:	bf00      	nop
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <uart_write+0x60>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d0f9      	beq.n	800069e <uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <uart_write+0x60>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <uart_write+0x60>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	b2c9      	uxtb	r1, r1
 80006b8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <uart_write+0x60>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE); // Enable UART transmission interrupt
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <uart_write+0x64>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <uart_write+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006d0:	60da      	str	r2, [r3, #12]
	}
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000028c 	.word	0x2000028c
 80006e4:	20000308 	.word	0x20000308

080006e8 <is_data_available>:

/* checks if the new data is available in the incoming buffer
 */
int is_data_available(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <is_data_available+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <is_data_available+0x2c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	b29b      	uxth	r3, r3
 8000700:	3340      	adds	r3, #64	; 0x40
 8000702:	b29b      	uxth	r3, r3
 8000704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000288 	.word	0x20000288

08000718 <uart_sendstring>:

/* sends the string to the uart
 */
void uart_sendstring (const char *s)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while(*s) uart_write(*s++);
 8000720:	e006      	b.n	8000730 <uart_sendstring+0x18>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffa8 	bl	8000680 <uart_write>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f4      	bne.n	8000722 <uart_sendstring+0xa>
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <uart_isr>:


void uart_isr (UART_HandleTypeDef *huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	2b00      	cmp	r3, #0
 8000764:	d013      	beq.n	800078e <uart_isr+0x4a>
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00e      	beq.n	800078e <uart_isr+0x4a>
    	    	      * @note   RXNE flag can be also cleared by a read to the USART_DR register.
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.
    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <uart_isr+0xac>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff32 	bl	80005f0 <store_char>
        return;
 800078c:	e02c      	b.n	80007e8 <uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000794:	2b00      	cmp	r3, #0
 8000796:	d027      	beq.n	80007e8 <uart_isr+0xa4>
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d022      	beq.n	80007e8 <uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <uart_isr+0xb0>)
 80007a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <uart_isr+0xb0>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d108      	bne.n	80007c0 <uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007bc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80007be:	e012      	b.n	80007e6 <uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <uart_isr+0xb0>)
 80007c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <uart_isr+0xb0>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <uart_isr+0xb0>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	3301      	adds	r3, #1
 80007d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <uart_isr+0xb0>)
 80007d6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	7bba      	ldrb	r2, [r7, #14]
 80007e4:	605a      	str	r2, [r3, #4]
    	return;
 80007e6:	bf00      	nop
    }
}
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000288 	.word	0x20000288
 80007f4:	20000240 	.word	0x20000240

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a2d      	ldr	r2, [pc, #180]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0xf0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_GPIO_Init+0xf0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MX_GPIO_Init+0xf0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_GPIO_Init+0xf0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_GPIO_Init+0xf4>)
 80008a2:	f001 f8bd 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_GPIO_Init+0xf8>)
 80008bc:	f000 feec 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0xf4>)
 80008da:	f000 fedd 	bl	8001698 <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020800 	.word	0x40020800

080008f4 <parse_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int parse_mode(const char *s) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	int i = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]

	while (*s) {
 8000900:	e058      	b.n	80009b4 <parse_mode+0xc0>
		if (i >= LENGTH) {
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b07      	cmp	r3, #7
 8000906:	dd02      	ble.n	800090e <parse_mode+0x1a>
			return -1;
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	e05d      	b.n	80009ca <parse_mode+0xd6>
		}

		switch (*s++) {
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3b67      	subs	r3, #103	; 0x67
 8000918:	2b12      	cmp	r3, #18
 800091a:	d845      	bhi.n	80009a8 <parse_mode+0xb4>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <parse_mode+0x30>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000971 	.word	0x08000971
 8000928:	080009a9 	.word	0x080009a9
 800092c:	080009a9 	.word	0x080009a9
 8000930:	080009a9 	.word	0x080009a9
 8000934:	080009a9 	.word	0x080009a9
 8000938:	080009a9 	.word	0x080009a9
 800093c:	080009a9 	.word	0x080009a9
 8000940:	0800099b 	.word	0x0800099b
 8000944:	080009a9 	.word	0x080009a9
 8000948:	080009a9 	.word	0x080009a9
 800094c:	080009a9 	.word	0x080009a9
 8000950:	0800097f 	.word	0x0800097f
 8000954:	080009a9 	.word	0x080009a9
 8000958:	080009a9 	.word	0x080009a9
 800095c:	080009a9 	.word	0x080009a9
 8000960:	080009a9 	.word	0x080009a9
 8000964:	080009a9 	.word	0x080009a9
 8000968:	080009a9 	.word	0x080009a9
 800096c:	0800098d 	.word	0x0800098d
			case 'g':
				buffer_mode[i] = GREEN;
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <parse_mode+0xe4>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800097c:	e017      	b.n	80009ae <parse_mode+0xba>
			case 'r':
				buffer_mode[i] = RED;
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <parse_mode+0xe4>)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800098a:	e010      	b.n	80009ae <parse_mode+0xba>
			case 'y':
				buffer_mode[i] = YELLOW;
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <parse_mode+0xe4>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000994:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000998:	e009      	b.n	80009ae <parse_mode+0xba>
			case 'n':
				buffer_mode[i] = NONE;
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <parse_mode+0xe4>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f04f 31ff 	mov.w	r1, #4294967295
 80009a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80009a6:	e002      	b.n	80009ae <parse_mode+0xba>
			default:
				return -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	e00d      	b.n	80009ca <parse_mode+0xd6>
		}

		i++;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
	while (*s) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1a2      	bne.n	8000902 <parse_mode+0xe>
	}
	return (i > 1) ? i : -1;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	dd01      	ble.n	80009c6 <parse_mode+0xd2>
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	e001      	b.n	80009ca <parse_mode+0xd6>
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000029c 	.word	0x2000029c

080009dc <clear_cmd>:

void clear_cmd() {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
	for (int j = 0; j < index_char; j++) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	e007      	b.n	80009f8 <clear_cmd+0x1c>
		cmd[j] = 0;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <clear_cmd+0x38>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < index_char; j++) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3301      	adds	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <clear_cmd+0x3c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	dbf2      	blt.n	80009e8 <clear_cmd+0xc>
	}

	index_char = 0;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <clear_cmd+0x3c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	200002c0 	.word	0x200002c0
 8000a18:	20000300 	.word	0x20000300

08000a1c <handle_data>:

void handle_data() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	// Echo
	print(&recieved_char);
 8000a20:	481b      	ldr	r0, [pc, #108]	; (8000a90 <handle_data+0x74>)
 8000a22:	f000 fa4f 	bl	8000ec4 <print>

	if (recieved_char == NEWLINE_CHAR) {
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <handle_data+0x74>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	220d      	movs	r2, #13
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d10b      	bne.n	8000a48 <handle_data+0x2c>
		print("\n");
 8000a30:	4818      	ldr	r0, [pc, #96]	; (8000a94 <handle_data+0x78>)
 8000a32:	f000 fa47 	bl	8000ec4 <print>

		// If some command is present, try to execute.
		// If not, just go to next line without an error message.
		if (index_char != 0) {
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <handle_data+0x7c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <handle_data+0x26>
			execute_command();
 8000a3e:	f000 f8cd 	bl	8000bdc <execute_command>
		}

		clear_cmd();
 8000a42:	f7ff ffcb 	bl	80009dc <clear_cmd>
		return;
 8000a46:	e022      	b.n	8000a8e <handle_data+0x72>
	}

	if (recieved_char == BACKSPACE_CHAR) {
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <handle_data+0x74>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	227f      	movs	r2, #127	; 0x7f
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d10a      	bne.n	8000a68 <handle_data+0x4c>
		cmd[--index_char] = 0;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <handle_data+0x7c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <handle_data+0x7c>)
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <handle_data+0x7c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <handle_data+0x80>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	54d1      	strb	r1, [r2, r3]
		return;
 8000a66:	e012      	b.n	8000a8e <handle_data+0x72>
	}

	if (index_char >= UART_BUFFER_SIZE) {
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <handle_data+0x7c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a6e:	dd05      	ble.n	8000a7c <handle_data+0x60>
		print("\r\nBuffer overflow!\r\n");
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <handle_data+0x84>)
 8000a72:	f000 fa27 	bl	8000ec4 <print>
		clear_cmd();
 8000a76:	f7ff ffb1 	bl	80009dc <clear_cmd>
		return;
 8000a7a:	e008      	b.n	8000a8e <handle_data+0x72>
	}

	cmd[index_char++] = recieved_char;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <handle_data+0x7c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	4905      	ldr	r1, [pc, #20]	; (8000a98 <handle_data+0x7c>)
 8000a84:	600a      	str	r2, [r1, #0]
 8000a86:	4a02      	ldr	r2, [pc, #8]	; (8000a90 <handle_data+0x74>)
 8000a88:	7811      	ldrb	r1, [r2, #0]
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <handle_data+0x80>)
 8000a8c:	54d1      	strb	r1, [r2, r3]
}
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200002bc 	.word	0x200002bc
 8000a94:	08003710 	.word	0x08003710
 8000a98:	20000300 	.word	0x20000300
 8000a9c:	200002c0 	.word	0x200002c0
 8000aa0:	08003714 	.word	0x08003714

08000aa4 <add_mode>:



int add_mode(int code[], int size, int delay) {
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	index_last_changed_mode++;
 8000ab0:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <add_mode+0xa0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <add_mode+0xa0>)
 8000ab8:	6013      	str	r3, [r2, #0]

	if (index_last_changed_mode >= MODES_LENGTH) {
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <add_mode+0xa0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	dd02      	ble.n	8000ac8 <add_mode+0x24>
		// Return to first mode after first 4 constant modes
		index_last_changed_mode = 4;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <add_mode+0xa0>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	601a      	str	r2, [r3, #0]
	}

	struct GarlandMode new_mode = {
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	222c      	movs	r2, #44	; 0x2c
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 f8f9 	bl	8002cc8 <memset>
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
			.size = size,
			.delay = delay,
			.current_code_index = 0
	};

	for (int i = 0; i < size; i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ae2:	e00d      	b.n	8000b00 <add_mode+0x5c>
		new_mode.code[i] = code[i];
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	3340      	adds	r3, #64	; 0x40
 8000af4:	443b      	add	r3, r7
 8000af6:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int i = 0; i < size; i++) {
 8000afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000afc:	3301      	adds	r3, #1
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbed      	blt.n	8000ae4 <add_mode+0x40>
	}

	modes_size++;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <add_mode+0xa4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <add_mode+0xa4>)
 8000b10:	6013      	str	r3, [r2, #0]

	modes[index_last_changed_mode] = new_mode;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <add_mode+0xa0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <add_mode+0xa8>)
 8000b18:	212c      	movs	r1, #44	; 0x2c
 8000b1a:	fb01 f303 	mul.w	r3, r1, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	461d      	mov	r5, r3
 8000b22:	f107 0410 	add.w	r4, r7, #16
 8000b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b32:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	return index_last_changed_mode;
 8000b36:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <add_mode+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3740      	adds	r7, #64	; 0x40
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bdb0      	pop	{r4, r5, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000164 	.word	0x20000164
 8000b48:	20000160 	.word	0x20000160
 8000b4c:	20000000 	.word	0x20000000

08000b50 <handle_delay_input>:

int handle_delay_input() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	if (strcmp(cmd, "fast") == 0 || strcmp(cmd, "f") == 0) {
 8000b54:	491a      	ldr	r1, [pc, #104]	; (8000bc0 <handle_delay_input+0x70>)
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <handle_delay_input+0x74>)
 8000b58:	f7ff fb4a 	bl	80001f0 <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <handle_delay_input+0x20>
 8000b62:	4919      	ldr	r1, [pc, #100]	; (8000bc8 <handle_delay_input+0x78>)
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <handle_delay_input+0x74>)
 8000b66:	f7ff fb43 	bl	80001f0 <strcmp>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <handle_delay_input+0x24>
		 return FAST_SPEED;
 8000b70:	23c8      	movs	r3, #200	; 0xc8
 8000b72:	e023      	b.n	8000bbc <handle_delay_input+0x6c>
	}

	if (strcmp(cmd, "medium") == 0 || strcmp(cmd, "m") == 0) {
 8000b74:	4915      	ldr	r1, [pc, #84]	; (8000bcc <handle_delay_input+0x7c>)
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <handle_delay_input+0x74>)
 8000b78:	f7ff fb3a 	bl	80001f0 <strcmp>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <handle_delay_input+0x40>
 8000b82:	4913      	ldr	r1, [pc, #76]	; (8000bd0 <handle_delay_input+0x80>)
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <handle_delay_input+0x74>)
 8000b86:	f7ff fb33 	bl	80001f0 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <handle_delay_input+0x46>
		return MEDIUM_SPEED;
 8000b90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b94:	e012      	b.n	8000bbc <handle_delay_input+0x6c>
	}

	if (strcmp(cmd, "slow") == 0 || strcmp(cmd, "s") == 0) {
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <handle_delay_input+0x84>)
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <handle_delay_input+0x74>)
 8000b9a:	f7ff fb29 	bl	80001f0 <strcmp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <handle_delay_input+0x62>
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <handle_delay_input+0x88>)
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <handle_delay_input+0x74>)
 8000ba8:	f7ff fb22 	bl	80001f0 <strcmp>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <handle_delay_input+0x68>
		return SLOW_SPEED;
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	e001      	b.n	8000bbc <handle_delay_input+0x6c>
	}

	return -1;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	0800372c 	.word	0x0800372c
 8000bc4:	200002c0 	.word	0x200002c0
 8000bc8:	08003734 	.word	0x08003734
 8000bcc:	08003738 	.word	0x08003738
 8000bd0:	08003740 	.word	0x08003740
 8000bd4:	08003744 	.word	0x08003744
 8000bd8:	0800374c 	.word	0x0800374c

08000bdc <execute_command>:


void execute_command() {
 8000bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
	if (expecting_delay_input) {
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <execute_command+0x1bc>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d04d      	beq.n	8000c88 <execute_command+0xac>
 8000bec:	466b      	mov	r3, sp
 8000bee:	461e      	mov	r6, r3
		int delay = handle_delay_input();
 8000bf0:	f7ff ffae 	bl	8000b50 <handle_delay_input>
 8000bf4:	6138      	str	r0, [r7, #16]

		if (delay == -1) {
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d103      	bne.n	8000c06 <execute_command+0x2a>
			print("Invalid delay. Try again: ");
 8000bfe:	4867      	ldr	r0, [pc, #412]	; (8000d9c <execute_command+0x1c0>)
 8000c00:	f000 f960 	bl	8000ec4 <print>
			return;
 8000c04:	e03e      	b.n	8000c84 <execute_command+0xa8>
		}

		add_mode(buffer_mode, new_mode_length, delay);
 8000c06:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <execute_command+0x1c4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4865      	ldr	r0, [pc, #404]	; (8000da4 <execute_command+0x1c8>)
 8000c10:	f7ff ff48 	bl	8000aa4 <add_mode>

		const char* fmt = "OK\r\nNumber of new mode: %i\r\n";
 8000c14:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <execute_command+0x1cc>)
 8000c16:	60fb      	str	r3, [r7, #12]
		char line[strlen(fmt)];
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff faf3 	bl	8000204 <strlen>
 8000c1e:	4601      	mov	r1, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	3b01      	subs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	2300      	movs	r3, #0
 8000c28:	4688      	mov	r8, r1
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c40:	2300      	movs	r3, #0
 8000c42:	460c      	mov	r4, r1
 8000c44:	461d      	mov	r5, r3
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	00eb      	lsls	r3, r5, #3
 8000c50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c54:	00e2      	lsls	r2, r4, #3
 8000c56:	1dcb      	adds	r3, r1, #7
 8000c58:	08db      	lsrs	r3, r3, #3
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c60:	466b      	mov	r3, sp
 8000c62:	3300      	adds	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
		sprintf(line, fmt, index_last_changed_mode + 1);
 8000c66:	4b51      	ldr	r3, [pc, #324]	; (8000dac <execute_command+0x1d0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68f9      	ldr	r1, [r7, #12]
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f002 f831 	bl	8002cd8 <siprintf>
		print(line);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f924 	bl	8000ec4 <print>

		expecting_delay_input = false;
 8000c7c:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <execute_command+0x1bc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]

		return;
 8000c82:	bf00      	nop
 8000c84:	46b5      	mov	sp, r6
 8000c86:	e083      	b.n	8000d90 <execute_command+0x1b4>
	}


	if (strcmp(cmd, "set interrupts on") == 0) {
 8000c88:	4949      	ldr	r1, [pc, #292]	; (8000db0 <execute_command+0x1d4>)
 8000c8a:	484a      	ldr	r0, [pc, #296]	; (8000db4 <execute_command+0x1d8>)
 8000c8c:	f7ff fab0 	bl	80001f0 <strcmp>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d116      	bne.n	8000cc4 <execute_command+0xe8>
		interrupts_mode = true;
 8000c96:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <execute_command+0x1dc>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
		print("OK\r\n");
 8000c9c:	4847      	ldr	r0, [pc, #284]	; (8000dbc <execute_command+0x1e0>)
 8000c9e:	f000 f911 	bl	8000ec4 <print>
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <execute_command+0x1e4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	4b45      	ldr	r3, [pc, #276]	; (8000dc0 <execute_command+0x1e4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cb0:	60da      	str	r2, [r3, #12]
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <execute_command+0x1e4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <execute_command+0x1e4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f042 0220 	orr.w	r2, r2, #32
 8000cc0:	60da      	str	r2, [r3, #12]
		return;
 8000cc2:	e065      	b.n	8000d90 <execute_command+0x1b4>
	}

	if (strcmp(cmd, "set interrupts off") == 0) {
 8000cc4:	493f      	ldr	r1, [pc, #252]	; (8000dc4 <execute_command+0x1e8>)
 8000cc6:	483b      	ldr	r0, [pc, #236]	; (8000db4 <execute_command+0x1d8>)
 8000cc8:	f7ff fa92 	bl	80001f0 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d116      	bne.n	8000d00 <execute_command+0x124>
		interrupts_mode = false;
 8000cd2:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <execute_command+0x1dc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		print("OK\r\n");
 8000cd8:	4838      	ldr	r0, [pc, #224]	; (8000dbc <execute_command+0x1e0>)
 8000cda:	f000 f8f3 	bl	8000ec4 <print>
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_TXE);
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <execute_command+0x1e4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <execute_command+0x1e4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cec:	60da      	str	r2, [r3, #12]
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <execute_command+0x1e4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <execute_command+0x1e4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0220 	bic.w	r2, r2, #32
 8000cfc:	60da      	str	r2, [r3, #12]
		return;
 8000cfe:	e047      	b.n	8000d90 <execute_command+0x1b4>
	}

	if (strstr(cmd, "set ") == cmd && strlen(cmd) > 4) {
 8000d00:	4931      	ldr	r1, [pc, #196]	; (8000dc8 <execute_command+0x1ec>)
 8000d02:	482c      	ldr	r0, [pc, #176]	; (8000db4 <execute_command+0x1d8>)
 8000d04:	f002 f808 	bl	8002d18 <strstr>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a2a      	ldr	r2, [pc, #168]	; (8000db4 <execute_command+0x1d8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d11e      	bne.n	8000d4e <execute_command+0x172>
 8000d10:	4828      	ldr	r0, [pc, #160]	; (8000db4 <execute_command+0x1d8>)
 8000d12:	f7ff fa77 	bl	8000204 <strlen>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d918      	bls.n	8000d4e <execute_command+0x172>
		int p = atoi(&cmd[4]);
 8000d1c:	482b      	ldr	r0, [pc, #172]	; (8000dcc <execute_command+0x1f0>)
 8000d1e:	f001 ffa5 	bl	8002c6c <atoi>
 8000d22:	6178      	str	r0, [r7, #20]

		if (p <= modes_size && p > 0){
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <execute_command+0x1f4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc0b      	bgt.n	8000d46 <execute_command+0x16a>
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dd08      	ble.n	8000d46 <execute_command+0x16a>
			cur_mode_index = p - 1;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <execute_command+0x1f8>)
 8000d3a:	6013      	str	r3, [r2, #0]
			print("OK\r\n");
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <execute_command+0x1e0>)
 8000d3e:	f000 f8c1 	bl	8000ec4 <print>
		if (p <= modes_size && p > 0){
 8000d42:	bf00      	nop
		} else {
			print("This mode does not exist\r\n");
		}

		return;
 8000d44:	e024      	b.n	8000d90 <execute_command+0x1b4>
			print("This mode does not exist\r\n");
 8000d46:	4824      	ldr	r0, [pc, #144]	; (8000dd8 <execute_command+0x1fc>)
 8000d48:	f000 f8bc 	bl	8000ec4 <print>
		return;
 8000d4c:	e020      	b.n	8000d90 <execute_command+0x1b4>
	}

	if (strstr(cmd, "new ") == cmd) {
 8000d4e:	4923      	ldr	r1, [pc, #140]	; (8000ddc <execute_command+0x200>)
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <execute_command+0x1d8>)
 8000d52:	f001 ffe1 	bl	8002d18 <strstr>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <execute_command+0x1d8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d115      	bne.n	8000d8a <execute_command+0x1ae>
		new_mode_length = parse_mode(&cmd[4]);
 8000d5e:	481b      	ldr	r0, [pc, #108]	; (8000dcc <execute_command+0x1f0>)
 8000d60:	f7ff fdc8 	bl	80008f4 <parse_mode>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <execute_command+0x1c4>)
 8000d68:	6013      	str	r3, [r2, #0]

		if (new_mode_length == -1) {
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <execute_command+0x1c4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d72:	d103      	bne.n	8000d7c <execute_command+0x1a0>
			print("Invalid parameter\r\n");
 8000d74:	481a      	ldr	r0, [pc, #104]	; (8000de0 <execute_command+0x204>)
 8000d76:	f000 f8a5 	bl	8000ec4 <print>
			return;
 8000d7a:	e009      	b.n	8000d90 <execute_command+0x1b4>
		}

		print("Input delay: fast/f (200 ms), medium/m (500 ms), slow (1000 ms): ");
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <execute_command+0x208>)
 8000d7e:	f000 f8a1 	bl	8000ec4 <print>
		expecting_delay_input = true;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <execute_command+0x1bc>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]

		return;
 8000d88:	e002      	b.n	8000d90 <execute_command+0x1b4>
	}

	print("Invalid command (new xyz, set x, set interrupts on/off)\r\n");
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <execute_command+0x20c>)
 8000d8c:	f000 f89a 	bl	8000ec4 <print>
}
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d98:	20000294 	.word	0x20000294
 8000d9c:	08003750 	.word	0x08003750
 8000da0:	20000298 	.word	0x20000298
 8000da4:	2000029c 	.word	0x2000029c
 8000da8:	0800376c 	.word	0x0800376c
 8000dac:	20000164 	.word	0x20000164
 8000db0:	0800378c 	.word	0x0800378c
 8000db4:	200002c0 	.word	0x200002c0
 8000db8:	20000295 	.word	0x20000295
 8000dbc:	080037a0 	.word	0x080037a0
 8000dc0:	20000308 	.word	0x20000308
 8000dc4:	080037a8 	.word	0x080037a8
 8000dc8:	080037bc 	.word	0x080037bc
 8000dcc:	200002c4 	.word	0x200002c4
 8000dd0:	20000160 	.word	0x20000160
 8000dd4:	20000290 	.word	0x20000290
 8000dd8:	080037c4 	.word	0x080037c4
 8000ddc:	080037e0 	.word	0x080037e0
 8000de0:	080037e8 	.word	0x080037e8
 8000de4:	080037fc 	.word	0x080037fc
 8000de8:	08003840 	.word	0x08003840

08000dec <GarlandMode_run>:

// GarlandMode_run runs the garland, and checks for inputs or button presses.
// Returns on button press.
void GarlandMode_run(struct GarlandMode* current_mode, uint32_t* last_pressed_time) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	while (1) {
		int led = current_mode->code[current_mode->current_code_index];
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e00:	60fb      	str	r3, [r7, #12]

		if (led != NONE) {
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d006      	beq.n	8000e18 <GarlandMode_run+0x2c>
			HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_SET);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	4828      	ldr	r0, [pc, #160]	; (8000eb4 <GarlandMode_run+0xc8>)
 8000e14:	f000 fe04 	bl	8001a20 <HAL_GPIO_WritePin>
		}

		int start_time = HAL_GetTick();
 8000e18:	f000 fb20 	bl	800145c <HAL_GetTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60bb      	str	r3, [r7, #8]

		while (HAL_GetTick() < start_time + current_mode->delay) {
 8000e20:	e023      	b.n	8000e6a <GarlandMode_run+0x7e>
			if (is_btn_pressed(last_pressed_time)) {
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fa3a 	bl	800129c <is_btn_pressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d13e      	bne.n	8000eac <GarlandMode_run+0xc0>
				return;
			}

			if (interrupts_mode) {
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <GarlandMode_run+0xcc>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00e      	beq.n	8000e54 <GarlandMode_run+0x68>
				while (is_data_available()) {
 8000e36:	e007      	b.n	8000e48 <GarlandMode_run+0x5c>
					recieved_char = uart_read();
 8000e38:	f7ff fbfa 	bl	8000630 <uart_read>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <GarlandMode_run+0xd0>)
 8000e42:	701a      	strb	r2, [r3, #0]
					handle_data();
 8000e44:	f7ff fdea 	bl	8000a1c <handle_data>
				while (is_data_available()) {
 8000e48:	f7ff fc4e 	bl	80006e8 <is_data_available>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f2      	bne.n	8000e38 <GarlandMode_run+0x4c>
 8000e52:	e00a      	b.n	8000e6a <GarlandMode_run+0x7e>
				}
			} else {
				if (HAL_UART_Receive(&huart6, &recieved_char, 1, 50) == HAL_OK) {
 8000e54:	2332      	movs	r3, #50	; 0x32
 8000e56:	2201      	movs	r2, #1
 8000e58:	4918      	ldr	r1, [pc, #96]	; (8000ebc <GarlandMode_run+0xd0>)
 8000e5a:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <GarlandMode_run+0xd4>)
 8000e5c:	f001 fb81 	bl	8002562 <HAL_UART_Receive>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <GarlandMode_run+0x7e>
					handle_data();
 8000e66:	f7ff fdd9 	bl	8000a1c <handle_data>
		while (HAL_GetTick() < start_time + current_mode->delay) {
 8000e6a:	f000 faf7 	bl	800145c <HAL_GetTick>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4413      	add	r3, r2
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d3d2      	bcc.n	8000e22 <GarlandMode_run+0x36>
				}
			}
		}

		current_mode->current_code_index = (current_mode->current_code_index + 1) % current_mode->size;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	3301      	adds	r3, #1
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6a12      	ldr	r2, [r2, #32]
 8000e86:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e8a:	fb01 f202 	mul.w	r2, r1, r2
 8000e8e:	1a9a      	subs	r2, r3, r2
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28

		if (led != NONE) {
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9a:	d0ac      	beq.n	8000df6 <GarlandMode_run+0xa>
			HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_RESET);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <GarlandMode_run+0xc8>)
 8000ea6:	f000 fdbb 	bl	8001a20 <HAL_GPIO_WritePin>
	while (1) {
 8000eaa:	e7a4      	b.n	8000df6 <GarlandMode_run+0xa>
				return;
 8000eac:	bf00      	nop
		}
	}
}
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	20000295 	.word	0x20000295
 8000ebc:	200002bc 	.word	0x200002bc
 8000ec0:	20000308 	.word	0x20000308

08000ec4 <print>:


void print(const char * content) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if (interrupts_mode) {
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <print+0x34>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <print+0x18>
		uart_sendstring(content);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fc1f 	bl	8000718 <uart_sendstring>
	} else {
		HAL_UART_Transmit(&huart6, (void *) content, strlen(content), UART_TIMEOUT);
	}
}
 8000eda:	e009      	b.n	8000ef0 <print+0x2c>
		HAL_UART_Transmit(&huart6, (void *) content, strlen(content), UART_TIMEOUT);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff f991 	bl	8000204 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <print+0x38>)
 8000eec:	f001 faa7 	bl	800243e <HAL_UART_Transmit>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000295 	.word	0x20000295
 8000efc:	20000308 	.word	0x20000308

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fa43 	bl	8001390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f829 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f7ff fc73 	bl	80007f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f12:	f000 f949 	bl	80011a8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 8000f16:	f7ff fb55 	bl	80005c4 <Ringbuf_init>

  uint32_t last_pressed_time = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GarlandMode_run(&modes[cur_mode_index], &last_pressed_time);
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0x54>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	222c      	movs	r2, #44	; 0x2c
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <main+0x58>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5b 	bl	8000dec <GarlandMode_run>

	  reset_LEDs();
 8000f36:	f000 f9e9 	bl	800130c <reset_LEDs>

	  cur_mode_index = (cur_mode_index + 1) % modes_size;
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <main+0x54>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <main+0x5c>)
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f48:	fb01 f202 	mul.w	r2, r1, r2
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	4a01      	ldr	r2, [pc, #4]	; (8000f54 <main+0x54>)
 8000f50:	6013      	str	r3, [r2, #0]
	  GarlandMode_run(&modes[cur_mode_index], &last_pressed_time);
 8000f52:	e7e4      	b.n	8000f1e <main+0x1e>
 8000f54:	20000290 	.word	0x20000290
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000160 	.word	0x20000160

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 feaa 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <SystemClock_Config+0xd8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	; (8001038 <SystemClock_Config+0xd8>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SystemClock_Config+0xd8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <SystemClock_Config+0xdc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <SystemClock_Config+0xdc>)
 8000faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <SystemClock_Config+0xdc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fd4:	23d8      	movs	r3, #216	; 0xd8
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd85 	bl	8001af4 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 f826 	bl	8001040 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff4:	f000 fd2e 	bl	8001a54 <HAL_PWREx_EnableOverDrive>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ffe:	f000 f81f 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2105      	movs	r1, #5
 8001020:	4618      	mov	r0, r3
 8001022:	f000 ffdf 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800102c:	f000 f808 	bl	8001040 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	; 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x4>
	...

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_MspInit+0x4c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x4c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SysTick_Handler+0x20>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <SysTick_Handler+0x18>
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Handler+0x20>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <SysTick_Handler+0x20>)
 80010f6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f99c 	bl	8001434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200001f4 	.word	0x200001f4

08001104 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_isr (&huart6);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART6_IRQHandler+0x10>)
 800110a:	f7ff fb1b 	bl	8000744 <uart_isr>
  /* USER CODE END USART6_IRQn 0 */
//  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000308 	.word	0x20000308

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f001 fd94 	bl	8002c74 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20030000 	.word	0x20030000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000304 	.word	0x20000304
 8001180:	20000360 	.word	0x20000360

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART6_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART6_UART_Init+0x4c>)
 80011e0:	f001 f8e0 	bl	80023a4 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f7ff ff29 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000308 	.word	0x20000308
 80011f8:	40011400 	.word	0x40011400

080011fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_UART_MspInit+0x94>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d133      	bne.n	8001286 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001256:	23c0      	movs	r3, #192	; 0xc0
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001266:	2308      	movs	r3, #8
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x9c>)
 8001272:	f000 fa11 	bl	8001698 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2047      	movs	r0, #71	; 0x47
 800127c:	f000 f9d5 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001280:	2047      	movs	r0, #71	; 0x47
 8001282:	f000 f9ee 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40011400 	.word	0x40011400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800

0800129c <is_btn_pressed>:
#include "gpio.h"

// Checks if button is pressed.
// Also checks value of HAL_GetTick to avoid rattle.
// Sets last_pressed_time if button is considered pressed.
bool is_btn_pressed(uint32_t* last_pressed_time) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	// GPIO_PIN_RESET means pressed
	int pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET;
 80012a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <is_btn_pressed+0x6c>)
 80012aa:	f000 fba1 	bl	80019f0 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	617b      	str	r3, [r7, #20]

	if (!pressed) {
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <is_btn_pressed+0x2a>
		return false;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e01c      	b.n	8001300 <is_btn_pressed+0x64>
	}

	// If set too low, might trigger twice per click
	// If too high, might not register the second click
	const int RATTLE_TIME_MS = 500;
 80012c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ca:	613b      	str	r3, [r7, #16]

	int time_passed = HAL_GetTick() - *last_pressed_time;
 80012cc:	f000 f8c6 	bl	800145c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	60fb      	str	r3, [r7, #12]
	int rattle = time_passed < RATTLE_TIME_MS;
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	429a      	cmp	r2, r3
 80012e0:	bfb4      	ite	lt
 80012e2:	2301      	movlt	r3, #1
 80012e4:	2300      	movge	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	60bb      	str	r3, [r7, #8]

	if (rattle) {
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <is_btn_pressed+0x58>
		return false;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e005      	b.n	8001300 <is_btn_pressed+0x64>
	}

	// Register press
	*last_pressed_time = HAL_GetTick();
 80012f4:	f000 f8b2 	bl	800145c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]

	return true;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020800 	.word	0x40020800

0800130c <reset_LEDs>:

// Resets all three LEDs
void reset_LEDs() {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <reset_LEDs+0x2c>)
 8001318:	f000 fb82 	bl	8001a20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <reset_LEDs+0x2c>)
 8001324:	f000 fb7c 	bl	8001a20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <reset_LEDs+0x2c>)
 8001330:	f000 fb76 	bl	8001a20 <HAL_GPIO_WritePin>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40020c00 	.word	0x40020c00

0800133c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001366:	f7ff ff0d 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136a:	f001 fc89 	bl	8002c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800136e:	f7ff fdc7 	bl	8000f00 <main>
  bx  lr    
 8001372:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001380:	080039d8 	.word	0x080039d8
  ldr r2, =_sbss
 8001384:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001388:	20000360 	.word	0x20000360

0800138c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0d      	ldr	r2, [pc, #52]	; (80013d0 <HAL_Init+0x40>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800139e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_Init+0x40>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_Init+0x40>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 f92b 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013be:	200f      	movs	r0, #15
 80013c0:	f000 f808 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c4:	f7ff fe40 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x54>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x58>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 f943 	bl	800167e <HAL_SYSTICK_Config>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e00e      	b.n	8001420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b0f      	cmp	r3, #15
 8001406:	d80a      	bhi.n	800141e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001408:	2200      	movs	r2, #0
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f000 f90b 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_InitTick+0x5c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000168 	.word	0x20000168
 800142c:	20000170 	.word	0x20000170
 8001430:	2000016c 	.word	0x2000016c

08001434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x20>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x24>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <HAL_IncTick+0x24>)
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000170 	.word	0x20000170
 8001458:	2000034c 	.word	0x2000034c

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetTick+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	2000034c 	.word	0x2000034c

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff29 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff3e 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff31 	bl	80014d8 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e177      	b.n	80019a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	f040 8166 	bne.w	800199e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d005      	beq.n	80016ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d130      	bne.n	800174c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80c0 	beq.w	800199e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_GPIO_Init+0x324>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183a:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <HAL_GPIO_Init+0x328>)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	220f      	movs	r2, #15
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_GPIO_Init+0x32c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d037      	beq.n	80018d6 <HAL_GPIO_Init+0x23e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x330>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_GPIO_Init+0x23a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x334>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d02b      	beq.n	80018ce <HAL_GPIO_Init+0x236>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <HAL_GPIO_Init+0x338>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d025      	beq.n	80018ca <HAL_GPIO_Init+0x232>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a54      	ldr	r2, [pc, #336]	; (80019d4 <HAL_GPIO_Init+0x33c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01f      	beq.n	80018c6 <HAL_GPIO_Init+0x22e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a53      	ldr	r2, [pc, #332]	; (80019d8 <HAL_GPIO_Init+0x340>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x22a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_GPIO_Init+0x344>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x226>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a51      	ldr	r2, [pc, #324]	; (80019e0 <HAL_GPIO_Init+0x348>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x222>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <HAL_GPIO_Init+0x34c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x21e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <HAL_GPIO_Init+0x350>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x21a>
 80018ae:	2309      	movs	r3, #9
 80018b0:	e012      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018b2:	230a      	movs	r3, #10
 80018b4:	e010      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018b6:	2308      	movs	r3, #8
 80018b8:	e00e      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x240>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x328>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_GPIO_Init+0x354>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_GPIO_Init+0x354>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_GPIO_Init+0x354>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_GPIO_Init+0x354>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <HAL_GPIO_Init+0x354>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f ae84 	bls.w	80016b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40022400 	.word	0x40022400
 80019ec:	40013c00 	.word	0x40013c00

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fcec 	bl	800145c <HAL_GetTick>
 8001a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a86:	e009      	b.n	8001a9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a88:	f7ff fce8 	bl	800145c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a96:	d901      	bls.n	8001a9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e01f      	b.n	8001adc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_PWREx_EnableOverDrive+0x98>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab0:	f7ff fcd4 	bl	800145c <HAL_GetTick>
 8001ab4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ab6:	e009      	b.n	8001acc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ab8:	f7ff fcd0 	bl	800145c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac6:	d901      	bls.n	8001acc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e007      	b.n	8001adc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_PWREx_EnableOverDrive+0x98>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ad8:	d1ee      	bne.n	8001ab8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	420e0040 	.word	0x420e0040
 8001aec:	40007000 	.word	0x40007000
 8001af0:	420e0044 	.word	0x420e0044

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e267      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d075      	beq.n	8001bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d00c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d112      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2a:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b36:	d10b      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	4b7e      	ldr	r3, [pc, #504]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d05b      	beq.n	8001bfc <HAL_RCC_OscConfig+0x108>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d157      	bne.n	8001bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e242      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d106      	bne.n	8001b68 <HAL_RCC_OscConfig+0x74>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xb0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x98>
 8001b72:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a6f      	ldr	r2, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6c      	ldr	r2, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xb0>
 8001b8c:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a68      	ldr	r2, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a65      	ldr	r2, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc56 	bl	800145c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fc52 	bl	800145c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e207      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xc0>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc42 	bl	800145c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fc3e 	bl	800145c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1f3      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0xe8>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x152>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1c7      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_OscConfig+0x244>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fbf7 	bl	800145c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff fbf3 	bl	800145c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1a8      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4925      	ldr	r1, [pc, #148]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x244>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fbd6 	bl	800145c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fbd2 	bl	800145c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e187      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d036      	beq.n	8001d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x248>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fbb6 	bl	800145c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fbb2 	bl	800145c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e167      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x240>)
 8001d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x200>
 8001d12:	e01b      	b.n	8001d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x248>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fb9f 	bl	800145c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	e00e      	b.n	8001d40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb9b 	bl	800145c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d907      	bls.n	8001d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e150      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	42470000 	.word	0x42470000
 8001d3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ea      	bne.n	8001d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8097 	beq.w	8001e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a7c      	ldr	r2, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b77      	ldr	r3, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x474>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d118      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4b74      	ldr	r3, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x474>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <HAL_RCC_OscConfig+0x474>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb5b 	bl	800145c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7ff fb57 	bl	800145c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e10c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x474>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x2ea>
 8001dd0:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x324>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x30c>
 8001de6:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5e      	ldr	r2, [pc, #376]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x324>
 8001e00:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a57      	ldr	r2, [pc, #348]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e12:	f023 0304 	bic.w	r3, r3, #4
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d015      	beq.n	8001e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff fb1c 	bl	800145c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff fb18 	bl	800145c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0cb      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0ee      	beq.n	8001e28 <HAL_RCC_OscConfig+0x334>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fb06 	bl	800145c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7ff fb02 	bl	800145c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0b5      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ee      	bne.n	8001e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a38      	ldr	r2, [pc, #224]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a1 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d05c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d141      	bne.n	8001f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <HAL_RCC_OscConfig+0x478>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fad6 	bl	800145c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff fad2 	bl	800145c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e087      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	491b      	ldr	r1, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x478>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff faab 	bl	800145c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff faa7 	bl	800145c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e05c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x416>
 8001f28:	e054      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <HAL_RCC_OscConfig+0x478>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fa94 	bl	800145c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff fa90 	bl	800145c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e045      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x444>
 8001f56:	e03d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e038      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x4ec>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d028      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d121      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d11a      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d111      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0cc      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d90c      	bls.n	8002020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002042:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800205a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d044      	beq.n	8002104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d119      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e067      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4934      	ldr	r1, [pc, #208]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7ff f9c2 	bl	800145c <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff f9be 	bl	800145c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e04f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d20c      	bcs.n	800212c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f922 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00
 80021a0:	40023800 	.word	0x40023800
 80021a4:	0800387c 	.word	0x0800387c
 80021a8:	20000168 	.word	0x20000168
 80021ac:	2000016c 	.word	0x2000016c

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b4:	b090      	sub	sp, #64	; 0x40
 80021b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
 80021bc:	2300      	movs	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c0:	2300      	movs	r3, #0
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d00d      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x40>
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	f200 80a1 	bhi.w	800231c <HAL_RCC_GetSysClockFreq+0x16c>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x34>
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x3a>
 80021e2:	e09b      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_GetSysClockFreq+0x184>)
 80021e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021e8:	e09b      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ea:	4b53      	ldr	r3, [pc, #332]	; (8002338 <HAL_RCC_GetSysClockFreq+0x188>)
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ee:	e098      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f0:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fa:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d028      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	2200      	movs	r2, #0
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	627a      	str	r2, [r7, #36]	; 0x24
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002218:	2100      	movs	r1, #0
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_RCC_GetSysClockFreq+0x188>)
 800221c:	fb03 f201 	mul.w	r2, r3, r1
 8002220:	2300      	movs	r3, #0
 8002222:	fb00 f303 	mul.w	r3, r0, r3
 8002226:	4413      	add	r3, r2
 8002228:	4a43      	ldr	r2, [pc, #268]	; (8002338 <HAL_RCC_GetSysClockFreq+0x188>)
 800222a:	fba0 1202 	umull	r1, r2, r0, r2
 800222e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002230:	460a      	mov	r2, r1
 8002232:	62ba      	str	r2, [r7, #40]	; 0x28
 8002234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002236:	4413      	add	r3, r2
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	2200      	movs	r2, #0
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	61fa      	str	r2, [r7, #28]
 8002242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002246:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800224a:	f7fe f839 	bl	80002c0 <__aeabi_uldivmod>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4613      	mov	r3, r2
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002256:	e053      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	2200      	movs	r2, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	617a      	str	r2, [r7, #20]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800226a:	f04f 0b00 	mov.w	fp, #0
 800226e:	4652      	mov	r2, sl
 8002270:	465b      	mov	r3, fp
 8002272:	f04f 0000 	mov.w	r0, #0
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	0159      	lsls	r1, r3, #5
 800227c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002280:	0150      	lsls	r0, r2, #5
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	ebb2 080a 	subs.w	r8, r2, sl
 800228a:	eb63 090b 	sbc.w	r9, r3, fp
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800229a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800229e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022a2:	ebb2 0408 	subs.w	r4, r2, r8
 80022a6:	eb63 0509 	sbc.w	r5, r3, r9
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	00eb      	lsls	r3, r5, #3
 80022b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b8:	00e2      	lsls	r2, r4, #3
 80022ba:	4614      	mov	r4, r2
 80022bc:	461d      	mov	r5, r3
 80022be:	eb14 030a 	adds.w	r3, r4, sl
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	eb45 030b 	adc.w	r3, r5, fp
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d6:	4629      	mov	r1, r5
 80022d8:	028b      	lsls	r3, r1, #10
 80022da:	4621      	mov	r1, r4
 80022dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022e0:	4621      	mov	r1, r4
 80022e2:	028a      	lsls	r2, r1, #10
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	2200      	movs	r2, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	60fa      	str	r2, [r7, #12]
 80022f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022f4:	f7fd ffe4 	bl	80002c0 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_GetSysClockFreq+0x180>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800231a:	e002      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetSysClockFreq+0x184>)
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002324:	4618      	mov	r0, r3
 8002326:	3740      	adds	r7, #64	; 0x40
 8002328:	46bd      	mov	sp, r7
 800232a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	00f42400 	.word	0x00f42400
 8002338:	017d7840 	.word	0x017d7840

0800233c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000168 	.word	0x20000168

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	0800388c 	.word	0x0800388c

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002380:	f7ff ffdc 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0b5b      	lsrs	r3, r3, #13
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	0800388c 	.word	0x0800388c

080023a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e03f      	b.n	8002436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe ff16 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f9cb 	bl	8002784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800240c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	; 0x28
 8002442:	af02      	add	r7, sp, #8
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d17c      	bne.n	8002558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_UART_Transmit+0x2c>
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e075      	b.n	800255a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_UART_Transmit+0x3e>
 8002478:	2302      	movs	r3, #2
 800247a:	e06e      	b.n	800255a <HAL_UART_Transmit+0x11c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2221      	movs	r2, #33	; 0x21
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002492:	f7fe ffe3 	bl	800145c <HAL_GetTick>
 8002496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d108      	bne.n	80024c0 <HAL_UART_Transmit+0x82>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e003      	b.n	80024c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80024d0:	e02a      	b.n	8002528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2200      	movs	r2, #0
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f8e2 	bl	80026a6 <UART_WaitOnFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e036      	b.n	800255a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10b      	bne.n	800250a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	3302      	adds	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e007      	b.n	800251a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1cf      	bne.n	80024d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	2140      	movs	r1, #64	; 0x40
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f8b2 	bl	80026a6 <UART_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e006      	b.n	800255a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b08a      	sub	sp, #40	; 0x28
 8002566:	af02      	add	r7, sp, #8
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	f040 808c 	bne.w	800269c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_UART_Receive+0x2e>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e084      	b.n	800269e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Receive+0x40>
 800259e:	2302      	movs	r3, #2
 80025a0:	e07d      	b.n	800269e <HAL_UART_Receive+0x13c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2222      	movs	r2, #34	; 0x22
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe ff4d 	bl	800145c <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	88fa      	ldrh	r2, [r7, #6]
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Receive+0x8a>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025fc:	e043      	b.n	8002686 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	2120      	movs	r1, #32
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f84c 	bl	80026a6 <UART_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e042      	b.n	800269e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262a:	b29a      	uxth	r2, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3302      	adds	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e01f      	b.n	8002678 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d007      	beq.n	8002652 <HAL_UART_Receive+0xf0>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <HAL_UART_Receive+0xfe>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e008      	b.n	8002672 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266c:	b2da      	uxtb	r2, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1b6      	bne.n	80025fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b090      	sub	sp, #64	; 0x40
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b6:	e050      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d04c      	beq.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026c6:	f7fe fec9 	bl	800145c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d241      	bcs.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026f6:	637a      	str	r2, [r7, #52]	; 0x34
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	613b      	str	r3, [r7, #16]
   return(result);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800272a:	623a      	str	r2, [r7, #32]
 800272c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	69f9      	ldr	r1, [r7, #28]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	61bb      	str	r3, [r7, #24]
   return(result);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e00f      	b.n	800277a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4013      	ands	r3, r2
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	429a      	cmp	r2, r3
 8002776:	d09f      	beq.n	80026b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3740      	adds	r7, #64	; 0x40
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0c0      	sub	sp, #256	; 0x100
 800278a:	af00      	add	r7, sp, #0
 800278c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	ea40 0301 	orr.w	r3, r0, r1
 80027ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027dc:	f021 010c 	bic.w	r1, r1, #12
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fe:	6999      	ldr	r1, [r3, #24]
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	ea40 0301 	orr.w	r3, r0, r1
 800280a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <UART_SetConfig+0x2cc>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d005      	beq.n	8002824 <UART_SetConfig+0xa0>
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <UART_SetConfig+0x2d0>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d104      	bne.n	800282e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fdaa 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8002828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800282c:	e003      	b.n	8002836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800282e:	f7ff fd91 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8002832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002840:	f040 810c 	bne.w	8002a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800284e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	1891      	adds	r1, r2, r2
 800285c:	65b9      	str	r1, [r7, #88]	; 0x58
 800285e:	415b      	adcs	r3, r3
 8002860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002866:	4621      	mov	r1, r4
 8002868:	eb12 0801 	adds.w	r8, r2, r1
 800286c:	4629      	mov	r1, r5
 800286e:	eb43 0901 	adc.w	r9, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb18 0303 	adds.w	r3, r8, r3
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002894:	462b      	mov	r3, r5
 8002896:	eb49 0303 	adc.w	r3, r9, r3
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028b2:	460b      	mov	r3, r1
 80028b4:	18db      	adds	r3, r3, r3
 80028b6:	653b      	str	r3, [r7, #80]	; 0x50
 80028b8:	4613      	mov	r3, r2
 80028ba:	eb42 0303 	adc.w	r3, r2, r3
 80028be:	657b      	str	r3, [r7, #84]	; 0x54
 80028c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028c8:	f7fd fcfa 	bl	80002c0 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <UART_SetConfig+0x2d4>)
 80028d2:	fba3 2302 	umull	r2, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	011c      	lsls	r4, r3, #4
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80028f4:	415b      	adcs	r3, r3
 80028f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028fc:	4641      	mov	r1, r8
 80028fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0b01 	adc.w	fp, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	4692      	mov	sl, r2
 800291e:	469b      	mov	fp, r3
 8002920:	4643      	mov	r3, r8
 8002922:	eb1a 0303 	adds.w	r3, sl, r3
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800292a:	464b      	mov	r3, r9
 800292c:	eb4b 0303 	adc.w	r3, fp, r3
 8002930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
 8002956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800295a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800295e:	f7fd fcaf 	bl	80002c0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b3b      	ldr	r3, [pc, #236]	; (8002a58 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	; 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002980:	fba3 2302 	umull	r2, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800298c:	441c      	add	r4, r3
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800299c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80029a8:	415b      	adcs	r3, r3
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029b0:	4641      	mov	r1, r8
 80029b2:	1851      	adds	r1, r2, r1
 80029b4:	6339      	str	r1, [r7, #48]	; 0x30
 80029b6:	4649      	mov	r1, r9
 80029b8:	414b      	adcs	r3, r1
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80029c8:	4659      	mov	r1, fp
 80029ca:	00cb      	lsls	r3, r1, #3
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d2:	4651      	mov	r1, sl
 80029d4:	00ca      	lsls	r2, r1, #3
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	4642      	mov	r2, r8
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029e4:	464b      	mov	r3, r9
 80029e6:	460a      	mov	r2, r1
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a04:	460b      	mov	r3, r1
 8002a06:	18db      	adds	r3, r3, r3
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	eb42 0303 	adc.w	r3, r2, r3
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a1a:	f7fd fc51 	bl	80002c0 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <UART_SetConfig+0x2d4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4422      	add	r2, r4
 8002a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a4c:	e105      	b.n	8002c5a <UART_SetConfig+0x4d6>
 8002a4e:	bf00      	nop
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40011400 	.word	0x40011400
 8002a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a6e:	4642      	mov	r2, r8
 8002a70:	464b      	mov	r3, r9
 8002a72:	1891      	adds	r1, r2, r2
 8002a74:	6239      	str	r1, [r7, #32]
 8002a76:	415b      	adcs	r3, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a7e:	4641      	mov	r1, r8
 8002a80:	1854      	adds	r4, r2, r1
 8002a82:	4649      	mov	r1, r9
 8002a84:	eb43 0501 	adc.w	r5, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00eb      	lsls	r3, r5, #3
 8002a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	18e3      	adds	r3, r4, r3
 8002aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	eb45 0303 	adc.w	r3, r5, r3
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002aca:	4629      	mov	r1, r5
 8002acc:	008b      	lsls	r3, r1, #2
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	008a      	lsls	r2, r1, #2
 8002ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002adc:	f7fd fbf0 	bl	80002c0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b60      	ldr	r3, [pc, #384]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	61b9      	str	r1, [r7, #24]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b68:	4649      	mov	r1, r9
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b72:	4641      	mov	r1, r8
 8002b74:	008a      	lsls	r2, r1, #2
 8002b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b7a:	f7fd fba1 	bl	80002c0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4b39      	ldr	r3, [pc, #228]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba2:	441c      	add	r4, r3
 8002ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba8:	2200      	movs	r2, #0
 8002baa:	673b      	str	r3, [r7, #112]	; 0x70
 8002bac:	677a      	str	r2, [r7, #116]	; 0x74
 8002bae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bb2:	4642      	mov	r2, r8
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	1891      	adds	r1, r2, r2
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	415b      	adcs	r3, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	1851      	adds	r1, r2, r1
 8002bc6:	6039      	str	r1, [r7, #0]
 8002bc8:	4649      	mov	r1, r9
 8002bca:	414b      	adcs	r3, r1
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bda:	4659      	mov	r1, fp
 8002bdc:	00cb      	lsls	r3, r1, #3
 8002bde:	4651      	mov	r1, sl
 8002be0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be4:	4651      	mov	r1, sl
 8002be6:	00ca      	lsls	r2, r1, #3
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	4642      	mov	r2, r8
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	663b      	str	r3, [r7, #96]	; 0x60
 8002c08:	667a      	str	r2, [r7, #100]	; 0x64
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c16:	4649      	mov	r1, r9
 8002c18:	008b      	lsls	r3, r1, #2
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c20:	4641      	mov	r1, r8
 8002c22:	008a      	lsls	r2, r1, #2
 8002c24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c28:	f7fd fb4a 	bl	80002c0 <__aeabi_uldivmod>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	3332      	adds	r3, #50	; 0x32
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <UART_SetConfig+0x4e4>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4422      	add	r2, r4
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	bf00      	nop
 8002c5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c66:	bf00      	nop
 8002c68:	51eb851f 	.word	0x51eb851f

08002c6c <atoi>:
 8002c6c:	220a      	movs	r2, #10
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f000 b8ea 	b.w	8002e48 <strtol>

08002c74 <__errno>:
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <__errno+0x8>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000174 	.word	0x20000174

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	4d0d      	ldr	r5, [pc, #52]	; (8002cb8 <__libc_init_array+0x38>)
 8002c84:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	4d0b      	ldr	r5, [pc, #44]	; (8002cc0 <__libc_init_array+0x40>)
 8002c92:	4c0c      	ldr	r4, [pc, #48]	; (8002cc4 <__libc_init_array+0x44>)
 8002c94:	f000 fd30 	bl	80036f8 <_init>
 8002c98:	1b64      	subs	r4, r4, r5
 8002c9a:	10a4      	asrs	r4, r4, #2
 8002c9c:	2600      	movs	r6, #0
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	080039d0 	.word	0x080039d0
 8002cbc:	080039d0 	.word	0x080039d0
 8002cc0:	080039d0 	.word	0x080039d0
 8002cc4:	080039d4 	.word	0x080039d4

08002cc8 <memset>:
 8002cc8:	4402      	add	r2, r0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <siprintf>:
 8002cd8:	b40e      	push	{r1, r2, r3}
 8002cda:	b500      	push	{lr}
 8002cdc:	b09c      	sub	sp, #112	; 0x70
 8002cde:	ab1d      	add	r3, sp, #116	; 0x74
 8002ce0:	9002      	str	r0, [sp, #8]
 8002ce2:	9006      	str	r0, [sp, #24]
 8002ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <siprintf+0x38>)
 8002cea:	9107      	str	r1, [sp, #28]
 8002cec:	9104      	str	r1, [sp, #16]
 8002cee:	4909      	ldr	r1, [pc, #36]	; (8002d14 <siprintf+0x3c>)
 8002cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cf4:	9105      	str	r1, [sp, #20]
 8002cf6:	6800      	ldr	r0, [r0, #0]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	a902      	add	r1, sp, #8
 8002cfc:	f000 f90a 	bl	8002f14 <_svfiprintf_r>
 8002d00:	9b02      	ldr	r3, [sp, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	b01c      	add	sp, #112	; 0x70
 8002d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d0c:	b003      	add	sp, #12
 8002d0e:	4770      	bx	lr
 8002d10:	20000174 	.word	0x20000174
 8002d14:	ffff0208 	.word	0xffff0208

08002d18 <strstr>:
 8002d18:	780a      	ldrb	r2, [r1, #0]
 8002d1a:	b570      	push	{r4, r5, r6, lr}
 8002d1c:	b96a      	cbnz	r2, 8002d3a <strstr+0x22>
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d109      	bne.n	8002d38 <strstr+0x20>
 8002d24:	460c      	mov	r4, r1
 8002d26:	4605      	mov	r5, r0
 8002d28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f6      	beq.n	8002d1e <strstr+0x6>
 8002d30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002d34:	429e      	cmp	r6, r3
 8002d36:	d0f7      	beq.n	8002d28 <strstr+0x10>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	7803      	ldrb	r3, [r0, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ef      	bne.n	8002d20 <strstr+0x8>
 8002d40:	4618      	mov	r0, r3
 8002d42:	e7ec      	b.n	8002d1e <strstr+0x6>

08002d44 <_strtol_l.constprop.0>:
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d4a:	d001      	beq.n	8002d50 <_strtol_l.constprop.0+0xc>
 8002d4c:	2b24      	cmp	r3, #36	; 0x24
 8002d4e:	d906      	bls.n	8002d5e <_strtol_l.constprop.0+0x1a>
 8002d50:	f7ff ff90 	bl	8002c74 <__errno>
 8002d54:	2316      	movs	r3, #22
 8002d56:	6003      	str	r3, [r0, #0]
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8002e44 <_strtol_l.constprop.0+0x100>
 8002d62:	460d      	mov	r5, r1
 8002d64:	462e      	mov	r6, r5
 8002d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8002d6e:	f017 0708 	ands.w	r7, r7, #8
 8002d72:	d1f7      	bne.n	8002d64 <_strtol_l.constprop.0+0x20>
 8002d74:	2c2d      	cmp	r4, #45	; 0x2d
 8002d76:	d132      	bne.n	8002dde <_strtol_l.constprop.0+0x9a>
 8002d78:	782c      	ldrb	r4, [r5, #0]
 8002d7a:	2701      	movs	r7, #1
 8002d7c:	1cb5      	adds	r5, r6, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d05b      	beq.n	8002e3a <_strtol_l.constprop.0+0xf6>
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d109      	bne.n	8002d9a <_strtol_l.constprop.0+0x56>
 8002d86:	2c30      	cmp	r4, #48	; 0x30
 8002d88:	d107      	bne.n	8002d9a <_strtol_l.constprop.0+0x56>
 8002d8a:	782c      	ldrb	r4, [r5, #0]
 8002d8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002d90:	2c58      	cmp	r4, #88	; 0x58
 8002d92:	d14d      	bne.n	8002e30 <_strtol_l.constprop.0+0xec>
 8002d94:	786c      	ldrb	r4, [r5, #1]
 8002d96:	2310      	movs	r3, #16
 8002d98:	3502      	adds	r5, #2
 8002d9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8002d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002da2:	f04f 0c00 	mov.w	ip, #0
 8002da6:	fbb8 f9f3 	udiv	r9, r8, r3
 8002daa:	4666      	mov	r6, ip
 8002dac:	fb03 8a19 	mls	sl, r3, r9, r8
 8002db0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8002db4:	f1be 0f09 	cmp.w	lr, #9
 8002db8:	d816      	bhi.n	8002de8 <_strtol_l.constprop.0+0xa4>
 8002dba:	4674      	mov	r4, lr
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	dd24      	ble.n	8002e0a <_strtol_l.constprop.0+0xc6>
 8002dc0:	f1bc 0f00 	cmp.w	ip, #0
 8002dc4:	db1e      	blt.n	8002e04 <_strtol_l.constprop.0+0xc0>
 8002dc6:	45b1      	cmp	r9, r6
 8002dc8:	d31c      	bcc.n	8002e04 <_strtol_l.constprop.0+0xc0>
 8002dca:	d101      	bne.n	8002dd0 <_strtol_l.constprop.0+0x8c>
 8002dcc:	45a2      	cmp	sl, r4
 8002dce:	db19      	blt.n	8002e04 <_strtol_l.constprop.0+0xc0>
 8002dd0:	fb06 4603 	mla	r6, r6, r3, r4
 8002dd4:	f04f 0c01 	mov.w	ip, #1
 8002dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ddc:	e7e8      	b.n	8002db0 <_strtol_l.constprop.0+0x6c>
 8002dde:	2c2b      	cmp	r4, #43	; 0x2b
 8002de0:	bf04      	itt	eq
 8002de2:	782c      	ldrbeq	r4, [r5, #0]
 8002de4:	1cb5      	addeq	r5, r6, #2
 8002de6:	e7ca      	b.n	8002d7e <_strtol_l.constprop.0+0x3a>
 8002de8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8002dec:	f1be 0f19 	cmp.w	lr, #25
 8002df0:	d801      	bhi.n	8002df6 <_strtol_l.constprop.0+0xb2>
 8002df2:	3c37      	subs	r4, #55	; 0x37
 8002df4:	e7e2      	b.n	8002dbc <_strtol_l.constprop.0+0x78>
 8002df6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8002dfa:	f1be 0f19 	cmp.w	lr, #25
 8002dfe:	d804      	bhi.n	8002e0a <_strtol_l.constprop.0+0xc6>
 8002e00:	3c57      	subs	r4, #87	; 0x57
 8002e02:	e7db      	b.n	8002dbc <_strtol_l.constprop.0+0x78>
 8002e04:	f04f 3cff 	mov.w	ip, #4294967295
 8002e08:	e7e6      	b.n	8002dd8 <_strtol_l.constprop.0+0x94>
 8002e0a:	f1bc 0f00 	cmp.w	ip, #0
 8002e0e:	da05      	bge.n	8002e1c <_strtol_l.constprop.0+0xd8>
 8002e10:	2322      	movs	r3, #34	; 0x22
 8002e12:	6003      	str	r3, [r0, #0]
 8002e14:	4646      	mov	r6, r8
 8002e16:	b942      	cbnz	r2, 8002e2a <_strtol_l.constprop.0+0xe6>
 8002e18:	4630      	mov	r0, r6
 8002e1a:	e79e      	b.n	8002d5a <_strtol_l.constprop.0+0x16>
 8002e1c:	b107      	cbz	r7, 8002e20 <_strtol_l.constprop.0+0xdc>
 8002e1e:	4276      	negs	r6, r6
 8002e20:	2a00      	cmp	r2, #0
 8002e22:	d0f9      	beq.n	8002e18 <_strtol_l.constprop.0+0xd4>
 8002e24:	f1bc 0f00 	cmp.w	ip, #0
 8002e28:	d000      	beq.n	8002e2c <_strtol_l.constprop.0+0xe8>
 8002e2a:	1e69      	subs	r1, r5, #1
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	e7f3      	b.n	8002e18 <_strtol_l.constprop.0+0xd4>
 8002e30:	2430      	movs	r4, #48	; 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1b1      	bne.n	8002d9a <_strtol_l.constprop.0+0x56>
 8002e36:	2308      	movs	r3, #8
 8002e38:	e7af      	b.n	8002d9a <_strtol_l.constprop.0+0x56>
 8002e3a:	2c30      	cmp	r4, #48	; 0x30
 8002e3c:	d0a5      	beq.n	8002d8a <_strtol_l.constprop.0+0x46>
 8002e3e:	230a      	movs	r3, #10
 8002e40:	e7ab      	b.n	8002d9a <_strtol_l.constprop.0+0x56>
 8002e42:	bf00      	nop
 8002e44:	08003895 	.word	0x08003895

08002e48 <strtol>:
 8002e48:	4613      	mov	r3, r2
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4802      	ldr	r0, [pc, #8]	; (8002e58 <strtol+0x10>)
 8002e50:	6800      	ldr	r0, [r0, #0]
 8002e52:	f7ff bf77 	b.w	8002d44 <_strtol_l.constprop.0>
 8002e56:	bf00      	nop
 8002e58:	20000174 	.word	0x20000174

08002e5c <__ssputs_r>:
 8002e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e60:	688e      	ldr	r6, [r1, #8]
 8002e62:	429e      	cmp	r6, r3
 8002e64:	4682      	mov	sl, r0
 8002e66:	460c      	mov	r4, r1
 8002e68:	4690      	mov	r8, r2
 8002e6a:	461f      	mov	r7, r3
 8002e6c:	d838      	bhi.n	8002ee0 <__ssputs_r+0x84>
 8002e6e:	898a      	ldrh	r2, [r1, #12]
 8002e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e74:	d032      	beq.n	8002edc <__ssputs_r+0x80>
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	6909      	ldr	r1, [r1, #16]
 8002e7a:	eba5 0901 	sub.w	r9, r5, r1
 8002e7e:	6965      	ldr	r5, [r4, #20]
 8002e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e88:	3301      	adds	r3, #1
 8002e8a:	444b      	add	r3, r9
 8002e8c:	106d      	asrs	r5, r5, #1
 8002e8e:	429d      	cmp	r5, r3
 8002e90:	bf38      	it	cc
 8002e92:	461d      	movcc	r5, r3
 8002e94:	0553      	lsls	r3, r2, #21
 8002e96:	d531      	bpl.n	8002efc <__ssputs_r+0xa0>
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f000 fb63 	bl	8003564 <_malloc_r>
 8002e9e:	4606      	mov	r6, r0
 8002ea0:	b950      	cbnz	r0, 8002eb8 <__ssputs_r+0x5c>
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	f8ca 3000 	str.w	r3, [sl]
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eae:	81a3      	strh	r3, [r4, #12]
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb8:	6921      	ldr	r1, [r4, #16]
 8002eba:	464a      	mov	r2, r9
 8002ebc:	f000 fabe 	bl	800343c <memcpy>
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	6126      	str	r6, [r4, #16]
 8002ece:	6165      	str	r5, [r4, #20]
 8002ed0:	444e      	add	r6, r9
 8002ed2:	eba5 0509 	sub.w	r5, r5, r9
 8002ed6:	6026      	str	r6, [r4, #0]
 8002ed8:	60a5      	str	r5, [r4, #8]
 8002eda:	463e      	mov	r6, r7
 8002edc:	42be      	cmp	r6, r7
 8002ede:	d900      	bls.n	8002ee2 <__ssputs_r+0x86>
 8002ee0:	463e      	mov	r6, r7
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	f000 fab6 	bl	8003458 <memmove>
 8002eec:	68a3      	ldr	r3, [r4, #8]
 8002eee:	1b9b      	subs	r3, r3, r6
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	4433      	add	r3, r6
 8002ef6:	6023      	str	r3, [r4, #0]
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e7db      	b.n	8002eb4 <__ssputs_r+0x58>
 8002efc:	462a      	mov	r2, r5
 8002efe:	f000 fba5 	bl	800364c <_realloc_r>
 8002f02:	4606      	mov	r6, r0
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d1e1      	bne.n	8002ecc <__ssputs_r+0x70>
 8002f08:	6921      	ldr	r1, [r4, #16]
 8002f0a:	4650      	mov	r0, sl
 8002f0c:	f000 fabe 	bl	800348c <_free_r>
 8002f10:	e7c7      	b.n	8002ea2 <__ssputs_r+0x46>
	...

08002f14 <_svfiprintf_r>:
 8002f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f18:	4698      	mov	r8, r3
 8002f1a:	898b      	ldrh	r3, [r1, #12]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	b09d      	sub	sp, #116	; 0x74
 8002f20:	4607      	mov	r7, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4614      	mov	r4, r2
 8002f26:	d50e      	bpl.n	8002f46 <_svfiprintf_r+0x32>
 8002f28:	690b      	ldr	r3, [r1, #16]
 8002f2a:	b963      	cbnz	r3, 8002f46 <_svfiprintf_r+0x32>
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	f000 fb19 	bl	8003564 <_malloc_r>
 8002f32:	6028      	str	r0, [r5, #0]
 8002f34:	6128      	str	r0, [r5, #16]
 8002f36:	b920      	cbnz	r0, 8002f42 <_svfiprintf_r+0x2e>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	e0d1      	b.n	80030e6 <_svfiprintf_r+0x1d2>
 8002f42:	2340      	movs	r3, #64	; 0x40
 8002f44:	616b      	str	r3, [r5, #20]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f54:	2330      	movs	r3, #48	; 0x30
 8002f56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003100 <_svfiprintf_r+0x1ec>
 8002f5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f5e:	f04f 0901 	mov.w	r9, #1
 8002f62:	4623      	mov	r3, r4
 8002f64:	469a      	mov	sl, r3
 8002f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f6a:	b10a      	cbz	r2, 8002f70 <_svfiprintf_r+0x5c>
 8002f6c:	2a25      	cmp	r2, #37	; 0x25
 8002f6e:	d1f9      	bne.n	8002f64 <_svfiprintf_r+0x50>
 8002f70:	ebba 0b04 	subs.w	fp, sl, r4
 8002f74:	d00b      	beq.n	8002f8e <_svfiprintf_r+0x7a>
 8002f76:	465b      	mov	r3, fp
 8002f78:	4622      	mov	r2, r4
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	4638      	mov	r0, r7
 8002f7e:	f7ff ff6d 	bl	8002e5c <__ssputs_r>
 8002f82:	3001      	adds	r0, #1
 8002f84:	f000 80aa 	beq.w	80030dc <_svfiprintf_r+0x1c8>
 8002f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f8a:	445a      	add	r2, fp
 8002f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80a2 	beq.w	80030dc <_svfiprintf_r+0x1c8>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fa2:	f10a 0a01 	add.w	sl, sl, #1
 8002fa6:	9304      	str	r3, [sp, #16]
 8002fa8:	9307      	str	r3, [sp, #28]
 8002faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fae:	931a      	str	r3, [sp, #104]	; 0x68
 8002fb0:	4654      	mov	r4, sl
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb8:	4851      	ldr	r0, [pc, #324]	; (8003100 <_svfiprintf_r+0x1ec>)
 8002fba:	f7fd f931 	bl	8000220 <memchr>
 8002fbe:	9a04      	ldr	r2, [sp, #16]
 8002fc0:	b9d8      	cbnz	r0, 8002ffa <_svfiprintf_r+0xe6>
 8002fc2:	06d0      	lsls	r0, r2, #27
 8002fc4:	bf44      	itt	mi
 8002fc6:	2320      	movmi	r3, #32
 8002fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fcc:	0711      	lsls	r1, r2, #28
 8002fce:	bf44      	itt	mi
 8002fd0:	232b      	movmi	r3, #43	; 0x2b
 8002fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8002fda:	2b2a      	cmp	r3, #42	; 0x2a
 8002fdc:	d015      	beq.n	800300a <_svfiprintf_r+0xf6>
 8002fde:	9a07      	ldr	r2, [sp, #28]
 8002fe0:	4654      	mov	r4, sl
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	f04f 0c0a 	mov.w	ip, #10
 8002fe8:	4621      	mov	r1, r4
 8002fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fee:	3b30      	subs	r3, #48	; 0x30
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d94e      	bls.n	8003092 <_svfiprintf_r+0x17e>
 8002ff4:	b1b0      	cbz	r0, 8003024 <_svfiprintf_r+0x110>
 8002ff6:	9207      	str	r2, [sp, #28]
 8002ff8:	e014      	b.n	8003024 <_svfiprintf_r+0x110>
 8002ffa:	eba0 0308 	sub.w	r3, r0, r8
 8002ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8003002:	4313      	orrs	r3, r2
 8003004:	9304      	str	r3, [sp, #16]
 8003006:	46a2      	mov	sl, r4
 8003008:	e7d2      	b.n	8002fb0 <_svfiprintf_r+0x9c>
 800300a:	9b03      	ldr	r3, [sp, #12]
 800300c:	1d19      	adds	r1, r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	9103      	str	r1, [sp, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	bfbb      	ittet	lt
 8003016:	425b      	neglt	r3, r3
 8003018:	f042 0202 	orrlt.w	r2, r2, #2
 800301c:	9307      	strge	r3, [sp, #28]
 800301e:	9307      	strlt	r3, [sp, #28]
 8003020:	bfb8      	it	lt
 8003022:	9204      	strlt	r2, [sp, #16]
 8003024:	7823      	ldrb	r3, [r4, #0]
 8003026:	2b2e      	cmp	r3, #46	; 0x2e
 8003028:	d10c      	bne.n	8003044 <_svfiprintf_r+0x130>
 800302a:	7863      	ldrb	r3, [r4, #1]
 800302c:	2b2a      	cmp	r3, #42	; 0x2a
 800302e:	d135      	bne.n	800309c <_svfiprintf_r+0x188>
 8003030:	9b03      	ldr	r3, [sp, #12]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	9203      	str	r2, [sp, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	bfb8      	it	lt
 800303c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003040:	3402      	adds	r4, #2
 8003042:	9305      	str	r3, [sp, #20]
 8003044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003110 <_svfiprintf_r+0x1fc>
 8003048:	7821      	ldrb	r1, [r4, #0]
 800304a:	2203      	movs	r2, #3
 800304c:	4650      	mov	r0, sl
 800304e:	f7fd f8e7 	bl	8000220 <memchr>
 8003052:	b140      	cbz	r0, 8003066 <_svfiprintf_r+0x152>
 8003054:	2340      	movs	r3, #64	; 0x40
 8003056:	eba0 000a 	sub.w	r0, r0, sl
 800305a:	fa03 f000 	lsl.w	r0, r3, r0
 800305e:	9b04      	ldr	r3, [sp, #16]
 8003060:	4303      	orrs	r3, r0
 8003062:	3401      	adds	r4, #1
 8003064:	9304      	str	r3, [sp, #16]
 8003066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800306a:	4826      	ldr	r0, [pc, #152]	; (8003104 <_svfiprintf_r+0x1f0>)
 800306c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003070:	2206      	movs	r2, #6
 8003072:	f7fd f8d5 	bl	8000220 <memchr>
 8003076:	2800      	cmp	r0, #0
 8003078:	d038      	beq.n	80030ec <_svfiprintf_r+0x1d8>
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <_svfiprintf_r+0x1f4>)
 800307c:	bb1b      	cbnz	r3, 80030c6 <_svfiprintf_r+0x1b2>
 800307e:	9b03      	ldr	r3, [sp, #12]
 8003080:	3307      	adds	r3, #7
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	3308      	adds	r3, #8
 8003088:	9303      	str	r3, [sp, #12]
 800308a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800308c:	4433      	add	r3, r6
 800308e:	9309      	str	r3, [sp, #36]	; 0x24
 8003090:	e767      	b.n	8002f62 <_svfiprintf_r+0x4e>
 8003092:	fb0c 3202 	mla	r2, ip, r2, r3
 8003096:	460c      	mov	r4, r1
 8003098:	2001      	movs	r0, #1
 800309a:	e7a5      	b.n	8002fe8 <_svfiprintf_r+0xd4>
 800309c:	2300      	movs	r3, #0
 800309e:	3401      	adds	r4, #1
 80030a0:	9305      	str	r3, [sp, #20]
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 0c0a 	mov.w	ip, #10
 80030a8:	4620      	mov	r0, r4
 80030aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ae:	3a30      	subs	r2, #48	; 0x30
 80030b0:	2a09      	cmp	r2, #9
 80030b2:	d903      	bls.n	80030bc <_svfiprintf_r+0x1a8>
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0c5      	beq.n	8003044 <_svfiprintf_r+0x130>
 80030b8:	9105      	str	r1, [sp, #20]
 80030ba:	e7c3      	b.n	8003044 <_svfiprintf_r+0x130>
 80030bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80030c0:	4604      	mov	r4, r0
 80030c2:	2301      	movs	r3, #1
 80030c4:	e7f0      	b.n	80030a8 <_svfiprintf_r+0x194>
 80030c6:	ab03      	add	r3, sp, #12
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	462a      	mov	r2, r5
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <_svfiprintf_r+0x1f8>)
 80030ce:	a904      	add	r1, sp, #16
 80030d0:	4638      	mov	r0, r7
 80030d2:	f3af 8000 	nop.w
 80030d6:	1c42      	adds	r2, r0, #1
 80030d8:	4606      	mov	r6, r0
 80030da:	d1d6      	bne.n	800308a <_svfiprintf_r+0x176>
 80030dc:	89ab      	ldrh	r3, [r5, #12]
 80030de:	065b      	lsls	r3, r3, #25
 80030e0:	f53f af2c 	bmi.w	8002f3c <_svfiprintf_r+0x28>
 80030e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030e6:	b01d      	add	sp, #116	; 0x74
 80030e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ec:	ab03      	add	r3, sp, #12
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	462a      	mov	r2, r5
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <_svfiprintf_r+0x1f8>)
 80030f4:	a904      	add	r1, sp, #16
 80030f6:	4638      	mov	r0, r7
 80030f8:	f000 f87a 	bl	80031f0 <_printf_i>
 80030fc:	e7eb      	b.n	80030d6 <_svfiprintf_r+0x1c2>
 80030fe:	bf00      	nop
 8003100:	08003995 	.word	0x08003995
 8003104:	0800399f 	.word	0x0800399f
 8003108:	00000000 	.word	0x00000000
 800310c:	08002e5d 	.word	0x08002e5d
 8003110:	0800399b 	.word	0x0800399b

08003114 <_printf_common>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	4616      	mov	r6, r2
 800311a:	4699      	mov	r9, r3
 800311c:	688a      	ldr	r2, [r1, #8]
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003124:	4293      	cmp	r3, r2
 8003126:	bfb8      	it	lt
 8003128:	4613      	movlt	r3, r2
 800312a:	6033      	str	r3, [r6, #0]
 800312c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003130:	4607      	mov	r7, r0
 8003132:	460c      	mov	r4, r1
 8003134:	b10a      	cbz	r2, 800313a <_printf_common+0x26>
 8003136:	3301      	adds	r3, #1
 8003138:	6033      	str	r3, [r6, #0]
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	0699      	lsls	r1, r3, #26
 800313e:	bf42      	ittt	mi
 8003140:	6833      	ldrmi	r3, [r6, #0]
 8003142:	3302      	addmi	r3, #2
 8003144:	6033      	strmi	r3, [r6, #0]
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	f015 0506 	ands.w	r5, r5, #6
 800314c:	d106      	bne.n	800315c <_printf_common+0x48>
 800314e:	f104 0a19 	add.w	sl, r4, #25
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	6832      	ldr	r2, [r6, #0]
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	42ab      	cmp	r3, r5
 800315a:	dc26      	bgt.n	80031aa <_printf_common+0x96>
 800315c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003160:	1e13      	subs	r3, r2, #0
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	bf18      	it	ne
 8003166:	2301      	movne	r3, #1
 8003168:	0692      	lsls	r2, r2, #26
 800316a:	d42b      	bmi.n	80031c4 <_printf_common+0xb0>
 800316c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003170:	4649      	mov	r1, r9
 8003172:	4638      	mov	r0, r7
 8003174:	47c0      	blx	r8
 8003176:	3001      	adds	r0, #1
 8003178:	d01e      	beq.n	80031b8 <_printf_common+0xa4>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	68e5      	ldr	r5, [r4, #12]
 800317e:	6832      	ldr	r2, [r6, #0]
 8003180:	f003 0306 	and.w	r3, r3, #6
 8003184:	2b04      	cmp	r3, #4
 8003186:	bf08      	it	eq
 8003188:	1aad      	subeq	r5, r5, r2
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	bf0c      	ite	eq
 8003190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003194:	2500      	movne	r5, #0
 8003196:	4293      	cmp	r3, r2
 8003198:	bfc4      	itt	gt
 800319a:	1a9b      	subgt	r3, r3, r2
 800319c:	18ed      	addgt	r5, r5, r3
 800319e:	2600      	movs	r6, #0
 80031a0:	341a      	adds	r4, #26
 80031a2:	42b5      	cmp	r5, r6
 80031a4:	d11a      	bne.n	80031dc <_printf_common+0xc8>
 80031a6:	2000      	movs	r0, #0
 80031a8:	e008      	b.n	80031bc <_printf_common+0xa8>
 80031aa:	2301      	movs	r3, #1
 80031ac:	4652      	mov	r2, sl
 80031ae:	4649      	mov	r1, r9
 80031b0:	4638      	mov	r0, r7
 80031b2:	47c0      	blx	r8
 80031b4:	3001      	adds	r0, #1
 80031b6:	d103      	bne.n	80031c0 <_printf_common+0xac>
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c0:	3501      	adds	r5, #1
 80031c2:	e7c6      	b.n	8003152 <_printf_common+0x3e>
 80031c4:	18e1      	adds	r1, r4, r3
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	2030      	movs	r0, #48	; 0x30
 80031ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ce:	4422      	add	r2, r4
 80031d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d8:	3302      	adds	r3, #2
 80031da:	e7c7      	b.n	800316c <_printf_common+0x58>
 80031dc:	2301      	movs	r3, #1
 80031de:	4622      	mov	r2, r4
 80031e0:	4649      	mov	r1, r9
 80031e2:	4638      	mov	r0, r7
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d0e6      	beq.n	80031b8 <_printf_common+0xa4>
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7d9      	b.n	80031a2 <_printf_common+0x8e>
	...

080031f0 <_printf_i>:
 80031f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031f4:	7e0f      	ldrb	r7, [r1, #24]
 80031f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031f8:	2f78      	cmp	r7, #120	; 0x78
 80031fa:	4691      	mov	r9, r2
 80031fc:	4680      	mov	r8, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	469a      	mov	sl, r3
 8003202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003206:	d807      	bhi.n	8003218 <_printf_i+0x28>
 8003208:	2f62      	cmp	r7, #98	; 0x62
 800320a:	d80a      	bhi.n	8003222 <_printf_i+0x32>
 800320c:	2f00      	cmp	r7, #0
 800320e:	f000 80d8 	beq.w	80033c2 <_printf_i+0x1d2>
 8003212:	2f58      	cmp	r7, #88	; 0x58
 8003214:	f000 80a3 	beq.w	800335e <_printf_i+0x16e>
 8003218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003220:	e03a      	b.n	8003298 <_printf_i+0xa8>
 8003222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003226:	2b15      	cmp	r3, #21
 8003228:	d8f6      	bhi.n	8003218 <_printf_i+0x28>
 800322a:	a101      	add	r1, pc, #4	; (adr r1, 8003230 <_printf_i+0x40>)
 800322c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003230:	08003289 	.word	0x08003289
 8003234:	0800329d 	.word	0x0800329d
 8003238:	08003219 	.word	0x08003219
 800323c:	08003219 	.word	0x08003219
 8003240:	08003219 	.word	0x08003219
 8003244:	08003219 	.word	0x08003219
 8003248:	0800329d 	.word	0x0800329d
 800324c:	08003219 	.word	0x08003219
 8003250:	08003219 	.word	0x08003219
 8003254:	08003219 	.word	0x08003219
 8003258:	08003219 	.word	0x08003219
 800325c:	080033a9 	.word	0x080033a9
 8003260:	080032cd 	.word	0x080032cd
 8003264:	0800338b 	.word	0x0800338b
 8003268:	08003219 	.word	0x08003219
 800326c:	08003219 	.word	0x08003219
 8003270:	080033cb 	.word	0x080033cb
 8003274:	08003219 	.word	0x08003219
 8003278:	080032cd 	.word	0x080032cd
 800327c:	08003219 	.word	0x08003219
 8003280:	08003219 	.word	0x08003219
 8003284:	08003393 	.word	0x08003393
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003298:	2301      	movs	r3, #1
 800329a:	e0a3      	b.n	80033e4 <_printf_i+0x1f4>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	6829      	ldr	r1, [r5, #0]
 80032a0:	0606      	lsls	r6, r0, #24
 80032a2:	f101 0304 	add.w	r3, r1, #4
 80032a6:	d50a      	bpl.n	80032be <_printf_i+0xce>
 80032a8:	680e      	ldr	r6, [r1, #0]
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	2e00      	cmp	r6, #0
 80032ae:	da03      	bge.n	80032b8 <_printf_i+0xc8>
 80032b0:	232d      	movs	r3, #45	; 0x2d
 80032b2:	4276      	negs	r6, r6
 80032b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b8:	485e      	ldr	r0, [pc, #376]	; (8003434 <_printf_i+0x244>)
 80032ba:	230a      	movs	r3, #10
 80032bc:	e019      	b.n	80032f2 <_printf_i+0x102>
 80032be:	680e      	ldr	r6, [r1, #0]
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032c6:	bf18      	it	ne
 80032c8:	b236      	sxthne	r6, r6
 80032ca:	e7ef      	b.n	80032ac <_printf_i+0xbc>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	6820      	ldr	r0, [r4, #0]
 80032d0:	1d19      	adds	r1, r3, #4
 80032d2:	6029      	str	r1, [r5, #0]
 80032d4:	0601      	lsls	r1, r0, #24
 80032d6:	d501      	bpl.n	80032dc <_printf_i+0xec>
 80032d8:	681e      	ldr	r6, [r3, #0]
 80032da:	e002      	b.n	80032e2 <_printf_i+0xf2>
 80032dc:	0646      	lsls	r6, r0, #25
 80032de:	d5fb      	bpl.n	80032d8 <_printf_i+0xe8>
 80032e0:	881e      	ldrh	r6, [r3, #0]
 80032e2:	4854      	ldr	r0, [pc, #336]	; (8003434 <_printf_i+0x244>)
 80032e4:	2f6f      	cmp	r7, #111	; 0x6f
 80032e6:	bf0c      	ite	eq
 80032e8:	2308      	moveq	r3, #8
 80032ea:	230a      	movne	r3, #10
 80032ec:	2100      	movs	r1, #0
 80032ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032f2:	6865      	ldr	r5, [r4, #4]
 80032f4:	60a5      	str	r5, [r4, #8]
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	bfa2      	ittt	ge
 80032fa:	6821      	ldrge	r1, [r4, #0]
 80032fc:	f021 0104 	bicge.w	r1, r1, #4
 8003300:	6021      	strge	r1, [r4, #0]
 8003302:	b90e      	cbnz	r6, 8003308 <_printf_i+0x118>
 8003304:	2d00      	cmp	r5, #0
 8003306:	d04d      	beq.n	80033a4 <_printf_i+0x1b4>
 8003308:	4615      	mov	r5, r2
 800330a:	fbb6 f1f3 	udiv	r1, r6, r3
 800330e:	fb03 6711 	mls	r7, r3, r1, r6
 8003312:	5dc7      	ldrb	r7, [r0, r7]
 8003314:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003318:	4637      	mov	r7, r6
 800331a:	42bb      	cmp	r3, r7
 800331c:	460e      	mov	r6, r1
 800331e:	d9f4      	bls.n	800330a <_printf_i+0x11a>
 8003320:	2b08      	cmp	r3, #8
 8003322:	d10b      	bne.n	800333c <_printf_i+0x14c>
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	07de      	lsls	r6, r3, #31
 8003328:	d508      	bpl.n	800333c <_printf_i+0x14c>
 800332a:	6923      	ldr	r3, [r4, #16]
 800332c:	6861      	ldr	r1, [r4, #4]
 800332e:	4299      	cmp	r1, r3
 8003330:	bfde      	ittt	le
 8003332:	2330      	movle	r3, #48	; 0x30
 8003334:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003338:	f105 35ff 	addle.w	r5, r5, #4294967295
 800333c:	1b52      	subs	r2, r2, r5
 800333e:	6122      	str	r2, [r4, #16]
 8003340:	f8cd a000 	str.w	sl, [sp]
 8003344:	464b      	mov	r3, r9
 8003346:	aa03      	add	r2, sp, #12
 8003348:	4621      	mov	r1, r4
 800334a:	4640      	mov	r0, r8
 800334c:	f7ff fee2 	bl	8003114 <_printf_common>
 8003350:	3001      	adds	r0, #1
 8003352:	d14c      	bne.n	80033ee <_printf_i+0x1fe>
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	b004      	add	sp, #16
 800335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335e:	4835      	ldr	r0, [pc, #212]	; (8003434 <_printf_i+0x244>)
 8003360:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003364:	6829      	ldr	r1, [r5, #0]
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	f851 6b04 	ldr.w	r6, [r1], #4
 800336c:	6029      	str	r1, [r5, #0]
 800336e:	061d      	lsls	r5, r3, #24
 8003370:	d514      	bpl.n	800339c <_printf_i+0x1ac>
 8003372:	07df      	lsls	r7, r3, #31
 8003374:	bf44      	itt	mi
 8003376:	f043 0320 	orrmi.w	r3, r3, #32
 800337a:	6023      	strmi	r3, [r4, #0]
 800337c:	b91e      	cbnz	r6, 8003386 <_printf_i+0x196>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	f023 0320 	bic.w	r3, r3, #32
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	2310      	movs	r3, #16
 8003388:	e7b0      	b.n	80032ec <_printf_i+0xfc>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	f043 0320 	orr.w	r3, r3, #32
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	2378      	movs	r3, #120	; 0x78
 8003394:	4828      	ldr	r0, [pc, #160]	; (8003438 <_printf_i+0x248>)
 8003396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800339a:	e7e3      	b.n	8003364 <_printf_i+0x174>
 800339c:	0659      	lsls	r1, r3, #25
 800339e:	bf48      	it	mi
 80033a0:	b2b6      	uxthmi	r6, r6
 80033a2:	e7e6      	b.n	8003372 <_printf_i+0x182>
 80033a4:	4615      	mov	r5, r2
 80033a6:	e7bb      	b.n	8003320 <_printf_i+0x130>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	6826      	ldr	r6, [r4, #0]
 80033ac:	6961      	ldr	r1, [r4, #20]
 80033ae:	1d18      	adds	r0, r3, #4
 80033b0:	6028      	str	r0, [r5, #0]
 80033b2:	0635      	lsls	r5, r6, #24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	d501      	bpl.n	80033bc <_printf_i+0x1cc>
 80033b8:	6019      	str	r1, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <_printf_i+0x1d2>
 80033bc:	0670      	lsls	r0, r6, #25
 80033be:	d5fb      	bpl.n	80033b8 <_printf_i+0x1c8>
 80033c0:	8019      	strh	r1, [r3, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	4615      	mov	r5, r2
 80033c8:	e7ba      	b.n	8003340 <_printf_i+0x150>
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	602a      	str	r2, [r5, #0]
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	2100      	movs	r1, #0
 80033d6:	4628      	mov	r0, r5
 80033d8:	f7fc ff22 	bl	8000220 <memchr>
 80033dc:	b108      	cbz	r0, 80033e2 <_printf_i+0x1f2>
 80033de:	1b40      	subs	r0, r0, r5
 80033e0:	6060      	str	r0, [r4, #4]
 80033e2:	6863      	ldr	r3, [r4, #4]
 80033e4:	6123      	str	r3, [r4, #16]
 80033e6:	2300      	movs	r3, #0
 80033e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ec:	e7a8      	b.n	8003340 <_printf_i+0x150>
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	462a      	mov	r2, r5
 80033f2:	4649      	mov	r1, r9
 80033f4:	4640      	mov	r0, r8
 80033f6:	47d0      	blx	sl
 80033f8:	3001      	adds	r0, #1
 80033fa:	d0ab      	beq.n	8003354 <_printf_i+0x164>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	079b      	lsls	r3, r3, #30
 8003400:	d413      	bmi.n	800342a <_printf_i+0x23a>
 8003402:	68e0      	ldr	r0, [r4, #12]
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	4298      	cmp	r0, r3
 8003408:	bfb8      	it	lt
 800340a:	4618      	movlt	r0, r3
 800340c:	e7a4      	b.n	8003358 <_printf_i+0x168>
 800340e:	2301      	movs	r3, #1
 8003410:	4632      	mov	r2, r6
 8003412:	4649      	mov	r1, r9
 8003414:	4640      	mov	r0, r8
 8003416:	47d0      	blx	sl
 8003418:	3001      	adds	r0, #1
 800341a:	d09b      	beq.n	8003354 <_printf_i+0x164>
 800341c:	3501      	adds	r5, #1
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	9903      	ldr	r1, [sp, #12]
 8003422:	1a5b      	subs	r3, r3, r1
 8003424:	42ab      	cmp	r3, r5
 8003426:	dcf2      	bgt.n	800340e <_printf_i+0x21e>
 8003428:	e7eb      	b.n	8003402 <_printf_i+0x212>
 800342a:	2500      	movs	r5, #0
 800342c:	f104 0619 	add.w	r6, r4, #25
 8003430:	e7f5      	b.n	800341e <_printf_i+0x22e>
 8003432:	bf00      	nop
 8003434:	080039a6 	.word	0x080039a6
 8003438:	080039b7 	.word	0x080039b7

0800343c <memcpy>:
 800343c:	440a      	add	r2, r1
 800343e:	4291      	cmp	r1, r2
 8003440:	f100 33ff 	add.w	r3, r0, #4294967295
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	4770      	bx	lr
 8003448:	b510      	push	{r4, lr}
 800344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003452:	4291      	cmp	r1, r2
 8003454:	d1f9      	bne.n	800344a <memcpy+0xe>
 8003456:	bd10      	pop	{r4, pc}

08003458 <memmove>:
 8003458:	4288      	cmp	r0, r1
 800345a:	b510      	push	{r4, lr}
 800345c:	eb01 0402 	add.w	r4, r1, r2
 8003460:	d902      	bls.n	8003468 <memmove+0x10>
 8003462:	4284      	cmp	r4, r0
 8003464:	4623      	mov	r3, r4
 8003466:	d807      	bhi.n	8003478 <memmove+0x20>
 8003468:	1e43      	subs	r3, r0, #1
 800346a:	42a1      	cmp	r1, r4
 800346c:	d008      	beq.n	8003480 <memmove+0x28>
 800346e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003476:	e7f8      	b.n	800346a <memmove+0x12>
 8003478:	4402      	add	r2, r0
 800347a:	4601      	mov	r1, r0
 800347c:	428a      	cmp	r2, r1
 800347e:	d100      	bne.n	8003482 <memmove+0x2a>
 8003480:	bd10      	pop	{r4, pc}
 8003482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800348a:	e7f7      	b.n	800347c <memmove+0x24>

0800348c <_free_r>:
 800348c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800348e:	2900      	cmp	r1, #0
 8003490:	d044      	beq.n	800351c <_free_r+0x90>
 8003492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003496:	9001      	str	r0, [sp, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f1a1 0404 	sub.w	r4, r1, #4
 800349e:	bfb8      	it	lt
 80034a0:	18e4      	addlt	r4, r4, r3
 80034a2:	f000 f913 	bl	80036cc <__malloc_lock>
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <_free_r+0x94>)
 80034a8:	9801      	ldr	r0, [sp, #4]
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	b933      	cbnz	r3, 80034bc <_free_r+0x30>
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	b003      	add	sp, #12
 80034b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034b8:	f000 b90e 	b.w	80036d8 <__malloc_unlock>
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d908      	bls.n	80034d2 <_free_r+0x46>
 80034c0:	6825      	ldr	r5, [r4, #0]
 80034c2:	1961      	adds	r1, r4, r5
 80034c4:	428b      	cmp	r3, r1
 80034c6:	bf01      	itttt	eq
 80034c8:	6819      	ldreq	r1, [r3, #0]
 80034ca:	685b      	ldreq	r3, [r3, #4]
 80034cc:	1949      	addeq	r1, r1, r5
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	e7ed      	b.n	80034ae <_free_r+0x22>
 80034d2:	461a      	mov	r2, r3
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b10b      	cbz	r3, 80034dc <_free_r+0x50>
 80034d8:	42a3      	cmp	r3, r4
 80034da:	d9fa      	bls.n	80034d2 <_free_r+0x46>
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	1855      	adds	r5, r2, r1
 80034e0:	42a5      	cmp	r5, r4
 80034e2:	d10b      	bne.n	80034fc <_free_r+0x70>
 80034e4:	6824      	ldr	r4, [r4, #0]
 80034e6:	4421      	add	r1, r4
 80034e8:	1854      	adds	r4, r2, r1
 80034ea:	42a3      	cmp	r3, r4
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	d1e0      	bne.n	80034b2 <_free_r+0x26>
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6053      	str	r3, [r2, #4]
 80034f6:	4421      	add	r1, r4
 80034f8:	6011      	str	r1, [r2, #0]
 80034fa:	e7da      	b.n	80034b2 <_free_r+0x26>
 80034fc:	d902      	bls.n	8003504 <_free_r+0x78>
 80034fe:	230c      	movs	r3, #12
 8003500:	6003      	str	r3, [r0, #0]
 8003502:	e7d6      	b.n	80034b2 <_free_r+0x26>
 8003504:	6825      	ldr	r5, [r4, #0]
 8003506:	1961      	adds	r1, r4, r5
 8003508:	428b      	cmp	r3, r1
 800350a:	bf04      	itt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	6063      	str	r3, [r4, #4]
 8003512:	bf04      	itt	eq
 8003514:	1949      	addeq	r1, r1, r5
 8003516:	6021      	streq	r1, [r4, #0]
 8003518:	6054      	str	r4, [r2, #4]
 800351a:	e7ca      	b.n	80034b2 <_free_r+0x26>
 800351c:	b003      	add	sp, #12
 800351e:	bd30      	pop	{r4, r5, pc}
 8003520:	20000350 	.word	0x20000350

08003524 <sbrk_aligned>:
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4e0e      	ldr	r6, [pc, #56]	; (8003560 <sbrk_aligned+0x3c>)
 8003528:	460c      	mov	r4, r1
 800352a:	6831      	ldr	r1, [r6, #0]
 800352c:	4605      	mov	r5, r0
 800352e:	b911      	cbnz	r1, 8003536 <sbrk_aligned+0x12>
 8003530:	f000 f8bc 	bl	80036ac <_sbrk_r>
 8003534:	6030      	str	r0, [r6, #0]
 8003536:	4621      	mov	r1, r4
 8003538:	4628      	mov	r0, r5
 800353a:	f000 f8b7 	bl	80036ac <_sbrk_r>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	d00a      	beq.n	8003558 <sbrk_aligned+0x34>
 8003542:	1cc4      	adds	r4, r0, #3
 8003544:	f024 0403 	bic.w	r4, r4, #3
 8003548:	42a0      	cmp	r0, r4
 800354a:	d007      	beq.n	800355c <sbrk_aligned+0x38>
 800354c:	1a21      	subs	r1, r4, r0
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f8ac 	bl	80036ac <_sbrk_r>
 8003554:	3001      	adds	r0, #1
 8003556:	d101      	bne.n	800355c <sbrk_aligned+0x38>
 8003558:	f04f 34ff 	mov.w	r4, #4294967295
 800355c:	4620      	mov	r0, r4
 800355e:	bd70      	pop	{r4, r5, r6, pc}
 8003560:	20000354 	.word	0x20000354

08003564 <_malloc_r>:
 8003564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003568:	1ccd      	adds	r5, r1, #3
 800356a:	f025 0503 	bic.w	r5, r5, #3
 800356e:	3508      	adds	r5, #8
 8003570:	2d0c      	cmp	r5, #12
 8003572:	bf38      	it	cc
 8003574:	250c      	movcc	r5, #12
 8003576:	2d00      	cmp	r5, #0
 8003578:	4607      	mov	r7, r0
 800357a:	db01      	blt.n	8003580 <_malloc_r+0x1c>
 800357c:	42a9      	cmp	r1, r5
 800357e:	d905      	bls.n	800358c <_malloc_r+0x28>
 8003580:	230c      	movs	r3, #12
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	2600      	movs	r6, #0
 8003586:	4630      	mov	r0, r6
 8003588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800358c:	4e2e      	ldr	r6, [pc, #184]	; (8003648 <_malloc_r+0xe4>)
 800358e:	f000 f89d 	bl	80036cc <__malloc_lock>
 8003592:	6833      	ldr	r3, [r6, #0]
 8003594:	461c      	mov	r4, r3
 8003596:	bb34      	cbnz	r4, 80035e6 <_malloc_r+0x82>
 8003598:	4629      	mov	r1, r5
 800359a:	4638      	mov	r0, r7
 800359c:	f7ff ffc2 	bl	8003524 <sbrk_aligned>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	4604      	mov	r4, r0
 80035a4:	d14d      	bne.n	8003642 <_malloc_r+0xde>
 80035a6:	6834      	ldr	r4, [r6, #0]
 80035a8:	4626      	mov	r6, r4
 80035aa:	2e00      	cmp	r6, #0
 80035ac:	d140      	bne.n	8003630 <_malloc_r+0xcc>
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	4631      	mov	r1, r6
 80035b2:	4638      	mov	r0, r7
 80035b4:	eb04 0803 	add.w	r8, r4, r3
 80035b8:	f000 f878 	bl	80036ac <_sbrk_r>
 80035bc:	4580      	cmp	r8, r0
 80035be:	d13a      	bne.n	8003636 <_malloc_r+0xd2>
 80035c0:	6821      	ldr	r1, [r4, #0]
 80035c2:	3503      	adds	r5, #3
 80035c4:	1a6d      	subs	r5, r5, r1
 80035c6:	f025 0503 	bic.w	r5, r5, #3
 80035ca:	3508      	adds	r5, #8
 80035cc:	2d0c      	cmp	r5, #12
 80035ce:	bf38      	it	cc
 80035d0:	250c      	movcc	r5, #12
 80035d2:	4629      	mov	r1, r5
 80035d4:	4638      	mov	r0, r7
 80035d6:	f7ff ffa5 	bl	8003524 <sbrk_aligned>
 80035da:	3001      	adds	r0, #1
 80035dc:	d02b      	beq.n	8003636 <_malloc_r+0xd2>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	442b      	add	r3, r5
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	e00e      	b.n	8003604 <_malloc_r+0xa0>
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	1b52      	subs	r2, r2, r5
 80035ea:	d41e      	bmi.n	800362a <_malloc_r+0xc6>
 80035ec:	2a0b      	cmp	r2, #11
 80035ee:	d916      	bls.n	800361e <_malloc_r+0xba>
 80035f0:	1961      	adds	r1, r4, r5
 80035f2:	42a3      	cmp	r3, r4
 80035f4:	6025      	str	r5, [r4, #0]
 80035f6:	bf18      	it	ne
 80035f8:	6059      	strne	r1, [r3, #4]
 80035fa:	6863      	ldr	r3, [r4, #4]
 80035fc:	bf08      	it	eq
 80035fe:	6031      	streq	r1, [r6, #0]
 8003600:	5162      	str	r2, [r4, r5]
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	4638      	mov	r0, r7
 8003606:	f104 060b 	add.w	r6, r4, #11
 800360a:	f000 f865 	bl	80036d8 <__malloc_unlock>
 800360e:	f026 0607 	bic.w	r6, r6, #7
 8003612:	1d23      	adds	r3, r4, #4
 8003614:	1af2      	subs	r2, r6, r3
 8003616:	d0b6      	beq.n	8003586 <_malloc_r+0x22>
 8003618:	1b9b      	subs	r3, r3, r6
 800361a:	50a3      	str	r3, [r4, r2]
 800361c:	e7b3      	b.n	8003586 <_malloc_r+0x22>
 800361e:	6862      	ldr	r2, [r4, #4]
 8003620:	42a3      	cmp	r3, r4
 8003622:	bf0c      	ite	eq
 8003624:	6032      	streq	r2, [r6, #0]
 8003626:	605a      	strne	r2, [r3, #4]
 8003628:	e7ec      	b.n	8003604 <_malloc_r+0xa0>
 800362a:	4623      	mov	r3, r4
 800362c:	6864      	ldr	r4, [r4, #4]
 800362e:	e7b2      	b.n	8003596 <_malloc_r+0x32>
 8003630:	4634      	mov	r4, r6
 8003632:	6876      	ldr	r6, [r6, #4]
 8003634:	e7b9      	b.n	80035aa <_malloc_r+0x46>
 8003636:	230c      	movs	r3, #12
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4638      	mov	r0, r7
 800363c:	f000 f84c 	bl	80036d8 <__malloc_unlock>
 8003640:	e7a1      	b.n	8003586 <_malloc_r+0x22>
 8003642:	6025      	str	r5, [r4, #0]
 8003644:	e7de      	b.n	8003604 <_malloc_r+0xa0>
 8003646:	bf00      	nop
 8003648:	20000350 	.word	0x20000350

0800364c <_realloc_r>:
 800364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003650:	4680      	mov	r8, r0
 8003652:	4614      	mov	r4, r2
 8003654:	460e      	mov	r6, r1
 8003656:	b921      	cbnz	r1, 8003662 <_realloc_r+0x16>
 8003658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800365c:	4611      	mov	r1, r2
 800365e:	f7ff bf81 	b.w	8003564 <_malloc_r>
 8003662:	b92a      	cbnz	r2, 8003670 <_realloc_r+0x24>
 8003664:	f7ff ff12 	bl	800348c <_free_r>
 8003668:	4625      	mov	r5, r4
 800366a:	4628      	mov	r0, r5
 800366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003670:	f000 f838 	bl	80036e4 <_malloc_usable_size_r>
 8003674:	4284      	cmp	r4, r0
 8003676:	4607      	mov	r7, r0
 8003678:	d802      	bhi.n	8003680 <_realloc_r+0x34>
 800367a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800367e:	d812      	bhi.n	80036a6 <_realloc_r+0x5a>
 8003680:	4621      	mov	r1, r4
 8003682:	4640      	mov	r0, r8
 8003684:	f7ff ff6e 	bl	8003564 <_malloc_r>
 8003688:	4605      	mov	r5, r0
 800368a:	2800      	cmp	r0, #0
 800368c:	d0ed      	beq.n	800366a <_realloc_r+0x1e>
 800368e:	42bc      	cmp	r4, r7
 8003690:	4622      	mov	r2, r4
 8003692:	4631      	mov	r1, r6
 8003694:	bf28      	it	cs
 8003696:	463a      	movcs	r2, r7
 8003698:	f7ff fed0 	bl	800343c <memcpy>
 800369c:	4631      	mov	r1, r6
 800369e:	4640      	mov	r0, r8
 80036a0:	f7ff fef4 	bl	800348c <_free_r>
 80036a4:	e7e1      	b.n	800366a <_realloc_r+0x1e>
 80036a6:	4635      	mov	r5, r6
 80036a8:	e7df      	b.n	800366a <_realloc_r+0x1e>
	...

080036ac <_sbrk_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	4d06      	ldr	r5, [pc, #24]	; (80036c8 <_sbrk_r+0x1c>)
 80036b0:	2300      	movs	r3, #0
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	f7fd fd2e 	bl	8001118 <_sbrk>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_sbrk_r+0x1a>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_sbrk_r+0x1a>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	20000358 	.word	0x20000358

080036cc <__malloc_lock>:
 80036cc:	4801      	ldr	r0, [pc, #4]	; (80036d4 <__malloc_lock+0x8>)
 80036ce:	f000 b811 	b.w	80036f4 <__retarget_lock_acquire_recursive>
 80036d2:	bf00      	nop
 80036d4:	2000035c 	.word	0x2000035c

080036d8 <__malloc_unlock>:
 80036d8:	4801      	ldr	r0, [pc, #4]	; (80036e0 <__malloc_unlock+0x8>)
 80036da:	f000 b80c 	b.w	80036f6 <__retarget_lock_release_recursive>
 80036de:	bf00      	nop
 80036e0:	2000035c 	.word	0x2000035c

080036e4 <_malloc_usable_size_r>:
 80036e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e8:	1f18      	subs	r0, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfbc      	itt	lt
 80036ee:	580b      	ldrlt	r3, [r1, r0]
 80036f0:	18c0      	addlt	r0, r0, r3
 80036f2:	4770      	bx	lr

080036f4 <__retarget_lock_acquire_recursive>:
 80036f4:	4770      	bx	lr

080036f6 <__retarget_lock_release_recursive>:
 80036f6:	4770      	bx	lr

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
