
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000466c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a90  08004a90  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          0000016c  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1d9  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b2  00000000  00000000  0002f2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c40  00000000  00000000  000323b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002378f  00000000  00000000  00032ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010564  00000000  00000000  0005677f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d708a  00000000  00000000  00066ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ac4  00000000  00000000  0013ddc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004804 	.word	0x08004804

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08004804 	.word	0x08004804

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Ringbuf_init+0x1c>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <Ringbuf_init+0x20>)
 800059c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Ringbuf_init+0x24>)
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <Ringbuf_init+0x28>)
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000168 	.word	0x20000168
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	2000016c 	.word	0x2000016c
 80005bc:	20000120 	.word	0x20000120

080005c0 <store_char>:



void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	3301      	adds	r3, #1
 80005d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d007      	beq.n	80005f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	79f9      	ldrb	r1, [r7, #7]
 80005ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <uart_read>:

/* checks, if the entered string is present in the giver buffer ?
 */

int uart_read(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <uart_read+0x4c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <uart_read+0x4c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	429a      	cmp	r2, r3
 8000614:	d102      	bne.n	800061c <uart_read+0x1c>
  {
    return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e010      	b.n	800063e <uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <uart_read+0x4c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <uart_read+0x4c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <uart_read+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <uart_read+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800063a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800063c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000168 	.word	0x20000168

08000650 <uart_write>:

/* writes a single character to the uart and increments head
 */
void uart_write(int c)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db21      	blt.n	80006a2 <uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <uart_write+0x60>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	3301      	adds	r3, #1
 8000666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800066a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800066c:	bf00      	nop
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <uart_write+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	d0f9      	beq.n	800066e <uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <uart_write+0x60>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <uart_write+0x60>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	b2c9      	uxtb	r1, r1
 8000688:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <uart_write+0x60>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE); // Enable UART transmission interrupt
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <uart_write+0x64>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <uart_write+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a0:	60da      	str	r2, [r3, #12]
	}
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	200001cc 	.word	0x200001cc

080006b8 <is_data_available>:

/* checks if the new data is available in the incoming buffer
 */
int is_data_available(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <is_data_available+0x2c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <is_data_available+0x2c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	3340      	adds	r3, #64	; 0x40
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000168 	.word	0x20000168

080006e8 <uart_sendstring>:

/* sends the string to the uart
 */
void uart_sendstring (const char *s)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	while(*s) uart_write(*s++);
 80006f0:	e006      	b.n	8000700 <uart_sendstring+0x18>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffa8 	bl	8000650 <uart_write>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f4      	bne.n	80006f2 <uart_sendstring+0xa>
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <uart_isr>:


void uart_isr (UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	2b00      	cmp	r3, #0
 8000734:	d013      	beq.n	800075e <uart_isr+0x4a>
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00e      	beq.n	800075e <uart_isr+0x4a>
    	    	      * @note   RXNE flag can be also cleared by a read to the USART_DR register.
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.
    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <uart_isr+0xac>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff32 	bl	80005c0 <store_char>
        return;
 800075c:	e02c      	b.n	80007b8 <uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000764:	2b00      	cmp	r3, #0
 8000766:	d027      	beq.n	80007b8 <uart_isr+0xa4>
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	2b00      	cmp	r3, #0
 8000770:	d022      	beq.n	80007b8 <uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <uart_isr+0xb0>)
 8000774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <uart_isr+0xb0>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	429a      	cmp	r2, r3
 800077c:	d108      	bne.n	8000790 <uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800078c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800078e:	e012      	b.n	80007b6 <uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <uart_isr+0xb0>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <uart_isr+0xb0>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <uart_isr+0xb0>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	3301      	adds	r3, #1
 80007a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <uart_isr+0xb0>)
 80007a6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	605a      	str	r2, [r3, #4]
    	return;
 80007b6:	bf00      	nop
    }
}
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000168 	.word	0x20000168
 80007c4:	20000120 	.word	0x20000120

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xc4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xc4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xc4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xc4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_GPIO_Init+0xc4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xc4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_GPIO_Init+0xc4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_GPIO_Init+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <MX_GPIO_Init+0xc4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_GPIO_Init+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800086a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000880:	f000 fea2 	bl	80015c8 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800

08000894 <set_pin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_pin(int led, int brightness){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	htim4.Instance->CCR2 = 0;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <set_pin+0x84>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <set_pin+0x84>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <set_pin+0x84>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40

	switch (led) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d01d      	beq.n	80008f8 <set_pin+0x64>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	dc24      	bgt.n	800090c <set_pin+0x78>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <set_pin+0x3c>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d00a      	beq.n	80008e4 <set_pin+0x50>
			break;
		case 2 :
			htim4.Instance->CCR4 = 10 * brightness;
			break;
	}
}
 80008ce:	e01d      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR2 = 10 * brightness;
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	461a      	mov	r2, r3
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <set_pin+0x84>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80008e2:	e013      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR3 = 10 * brightness;
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <set_pin+0x84>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80008f6:	e009      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR4 = 10 * brightness;
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	461a      	mov	r2, r3
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <set_pin+0x84>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000184 	.word	0x20000184

0800091c <print>:

void print(const char * content) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	uart_sendstring(content);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fedf 	bl	80006e8 <uart_sendstring>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <print_mode_description>:

void print_mode_description(struct Mode mode, int index){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000942:	607a      	str	r2, [r7, #4]
	if (index >= 0){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db13      	blt.n	8000972 <print_mode_description+0x3e>
		print("Editing mode ");
 800094a:	4820      	ldr	r0, [pc, #128]	; (80009cc <print_mode_description+0x98>)
 800094c:	f7ff ffe6 	bl	800091c <print>
		char str_index[1];
		sprintf(str_index, "%i", index + 1);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	491d      	ldr	r1, [pc, #116]	; (80009d0 <print_mode_description+0x9c>)
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fb48 	bl	8003ff0 <siprintf>
		print(str_index);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffd9 	bl	800091c <print>
		print(" :");
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <print_mode_description+0xa0>)
 800096c:	f7ff ffd6 	bl	800091c <print>
 8000970:	e002      	b.n	8000978 <print_mode_description+0x44>
	} else print("Mode: ");
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <print_mode_description+0xa4>)
 8000974:	f7ff ffd2 	bl	800091c <print>
	switch (mode.led) {
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d00e      	beq.n	800099c <print_mode_description+0x68>
 800097e:	2b02      	cmp	r3, #2
 8000980:	dc10      	bgt.n	80009a4 <print_mode_description+0x70>
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <print_mode_description+0x58>
 8000986:	2b01      	cmp	r3, #1
 8000988:	d004      	beq.n	8000994 <print_mode_description+0x60>
 800098a:	e00b      	b.n	80009a4 <print_mode_description+0x70>
		case 0 : print("green, "); break;
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <print_mode_description+0xa8>)
 800098e:	f7ff ffc5 	bl	800091c <print>
 8000992:	e007      	b.n	80009a4 <print_mode_description+0x70>
		case 1 : print("yellow, "); break;
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <print_mode_description+0xac>)
 8000996:	f7ff ffc1 	bl	800091c <print>
 800099a:	e003      	b.n	80009a4 <print_mode_description+0x70>
		case 2 : print("red, "); break;
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <print_mode_description+0xb0>)
 800099e:	f7ff ffbd 	bl	800091c <print>
 80009a2:	bf00      	nop
	}
	char mode_brightness[3];
	sprintf(mode_brightness, "%i", mode.brightness);
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4909      	ldr	r1, [pc, #36]	; (80009d0 <print_mode_description+0x9c>)
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fb1f 	bl	8003ff0 <siprintf>
	print(mode_brightness);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffb0 	bl	800091c <print>
	print("% brightness\n\r");
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <print_mode_description+0xb4>)
 80009be:	f7ff ffad 	bl	800091c <print>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	0800481c 	.word	0x0800481c
 80009d0:	0800482c 	.word	0x0800482c
 80009d4:	08004830 	.word	0x08004830
 80009d8:	08004834 	.word	0x08004834
 80009dc:	0800483c 	.word	0x0800483c
 80009e0:	08004844 	.word	0x08004844
 80009e4:	08004850 	.word	0x08004850
 80009e8:	08004858 	.word	0x08004858

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fbd3 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f91b 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f7ff fee5 	bl	80007c8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80009fe:	f000 fb29 	bl	8001054 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000a02:	f000 fa3b 	bl	8000e7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init ();
 8000a06:	f7ff fdc5 	bl	8000594 <Ringbuf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4879      	ldr	r0, [pc, #484]	; (8000bf4 <main+0x208>)
 8000a0e:	f001 fcd7 	bl	80023c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a12:	2108      	movs	r1, #8
 8000a14:	4877      	ldr	r0, [pc, #476]	; (8000bf4 <main+0x208>)
 8000a16:	f001 fcd3 	bl	80023c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a1a:	210c      	movs	r1, #12
 8000a1c:	4875      	ldr	r0, [pc, #468]	; (8000bf4 <main+0x208>)
 8000a1e:	f001 fccf 	bl	80023c0 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <main+0x20c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	4b73      	ldr	r3, [pc, #460]	; (8000bf8 <main+0x20c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a30:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000a32:	4b71      	ldr	r3, [pc, #452]	; (8000bf8 <main+0x20c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <main+0x20c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f042 0220 	orr.w	r2, r2, #32
 8000a40:	60da      	str	r2, [r3, #12]
  set_pin(-1, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff24 	bl	8000894 <set_pin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while(is_data_available()){
 8000a4c:	e0ca      	b.n	8000be4 <main+0x1f8>
		char received_char = uart_read();
 8000a4e:	f7ff fdd7 	bl	8000600 <uart_read>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	70fb      	strb	r3, [r7, #3]
		if (is_setting_mode) {
 8000a58:	4b68      	ldr	r3, [pc, #416]	; (8000bfc <main+0x210>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 8088 	beq.w	8000b72 <main+0x186>
			if (received_char == '\r') {
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	2b0d      	cmp	r3, #13
 8000a66:	d118      	bne.n	8000a9a <main+0xae>
				is_setting_mode = false;
 8000a68:	4b64      	ldr	r3, [pc, #400]	; (8000bfc <main+0x210>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
				MODES[input_index].led = buffer_mode.led;
 8000a6e:	4b64      	ldr	r3, [pc, #400]	; (8000c00 <main+0x214>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a64      	ldr	r2, [pc, #400]	; (8000c04 <main+0x218>)
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	4964      	ldr	r1, [pc, #400]	; (8000c08 <main+0x21c>)
 8000a78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				MODES[input_index].brightness = buffer_mode.brightness;
 8000a7c:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <main+0x214>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a60      	ldr	r2, [pc, #384]	; (8000c04 <main+0x218>)
 8000a82:	6852      	ldr	r2, [r2, #4]
 8000a84:	4960      	ldr	r1, [pc, #384]	; (8000c08 <main+0x21c>)
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	605a      	str	r2, [r3, #4]
				print("Mode is saved\n\r");
 8000a8c:	485f      	ldr	r0, [pc, #380]	; (8000c0c <main+0x220>)
 8000a8e:	f7ff ff45 	bl	800091c <print>
				print("Setting mode is off\n\r");
 8000a92:	485f      	ldr	r0, [pc, #380]	; (8000c10 <main+0x224>)
 8000a94:	f7ff ff42 	bl	800091c <print>
 8000a98:	e0a4      	b.n	8000be4 <main+0x1f8>
			} else {
				bool changed = true;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
				int i = atoi(&received_char) - 1;
 8000a9e:	1cfb      	adds	r3, r7, #3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 f97f 	bl	8003da4 <atoi>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
				if (i >= 0) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db12      	blt.n	8000ad8 <main+0xec>
					input_index = i;
 8000ab2:	4a53      	ldr	r2, [pc, #332]	; (8000c00 <main+0x214>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
					buffer_mode.led = MODES[input_index].led;
 8000ab8:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <main+0x214>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a52      	ldr	r2, [pc, #328]	; (8000c08 <main+0x21c>)
 8000abe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ac2:	4a50      	ldr	r2, [pc, #320]	; (8000c04 <main+0x218>)
 8000ac4:	6013      	str	r3, [r2, #0]
					buffer_mode.brightness = MODES[input_index].brightness;
 8000ac6:	4b4e      	ldr	r3, [pc, #312]	; (8000c00 <main+0x214>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a4f      	ldr	r2, [pc, #316]	; (8000c08 <main+0x21c>)
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <main+0x218>)
 8000ad4:	6053      	str	r3, [r2, #4]
 8000ad6:	e041      	b.n	8000b5c <main+0x170>
				} else switch (received_char) {
 8000ad8:	78fb      	ldrb	r3, [r7, #3]
 8000ada:	2b63      	cmp	r3, #99	; 0x63
 8000adc:	d01c      	beq.n	8000b18 <main+0x12c>
 8000ade:	2b63      	cmp	r3, #99	; 0x63
 8000ae0:	dc39      	bgt.n	8000b56 <main+0x16a>
 8000ae2:	2b62      	cmp	r3, #98	; 0x62
 8000ae4:	d011      	beq.n	8000b0a <main+0x11e>
 8000ae6:	2b62      	cmp	r3, #98	; 0x62
 8000ae8:	dc35      	bgt.n	8000b56 <main+0x16a>
 8000aea:	2b61      	cmp	r3, #97	; 0x61
 8000aec:	d006      	beq.n	8000afc <main+0x110>
 8000aee:	2b61      	cmp	r3, #97	; 0x61
 8000af0:	dc31      	bgt.n	8000b56 <main+0x16a>
 8000af2:	2b2b      	cmp	r3, #43	; 0x2b
 8000af4:	d023      	beq.n	8000b3e <main+0x152>
 8000af6:	2b2d      	cmp	r3, #45	; 0x2d
 8000af8:	d015      	beq.n	8000b26 <main+0x13a>
 8000afa:	e02c      	b.n	8000b56 <main+0x16a>
					case 'a' :
						buffer_mode.led = LED_GREEN;
 8000afc:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <main+0x218>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
						print("Changed color to green\r\n");
 8000b02:	4844      	ldr	r0, [pc, #272]	; (8000c14 <main+0x228>)
 8000b04:	f7ff ff0a 	bl	800091c <print>
						break;
 8000b08:	e028      	b.n	8000b5c <main+0x170>
					case 'b' :
						buffer_mode.led = LED_YELLOW;
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <main+0x218>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
						print("Changed color to yellow\r\n");
 8000b10:	4841      	ldr	r0, [pc, #260]	; (8000c18 <main+0x22c>)
 8000b12:	f7ff ff03 	bl	800091c <print>
						break;
 8000b16:	e021      	b.n	8000b5c <main+0x170>
					case 'c' :
						buffer_mode.led = LED_RED;
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <main+0x218>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	601a      	str	r2, [r3, #0]
						print("Changed color to red\r\n");
 8000b1e:	483f      	ldr	r0, [pc, #252]	; (8000c1c <main+0x230>)
 8000b20:	f7ff fefc 	bl	800091c <print>
						break;
 8000b24:	e01a      	b.n	8000b5c <main+0x170>
					case '-' :
						buffer_mode.brightness = buffer_mode.brightness >= 10 ? buffer_mode.brightness - 10 : 0;
 8000b26:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <main+0x218>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	bfb8      	it	lt
 8000b2e:	230a      	movlt	r3, #10
 8000b30:	3b0a      	subs	r3, #10
 8000b32:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <main+0x218>)
 8000b34:	6053      	str	r3, [r2, #4]
						print("Decreased brightness\r\n");
 8000b36:	483a      	ldr	r0, [pc, #232]	; (8000c20 <main+0x234>)
 8000b38:	f7ff fef0 	bl	800091c <print>
						break;
 8000b3c:	e00e      	b.n	8000b5c <main+0x170>
					case '+' :
						buffer_mode.brightness = buffer_mode.brightness <= 90 ? buffer_mode.brightness + 10 : 100;
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <main+0x218>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b5a      	cmp	r3, #90	; 0x5a
 8000b44:	bfa8      	it	ge
 8000b46:	235a      	movge	r3, #90	; 0x5a
 8000b48:	330a      	adds	r3, #10
 8000b4a:	4a2e      	ldr	r2, [pc, #184]	; (8000c04 <main+0x218>)
 8000b4c:	6053      	str	r3, [r2, #4]
						print("Increased brightness\r\n");
 8000b4e:	4835      	ldr	r0, [pc, #212]	; (8000c24 <main+0x238>)
 8000b50:	f7ff fee4 	bl	800091c <print>
						break;
 8000b54:	e002      	b.n	8000b5c <main+0x170>
					default:
						changed = false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
						break;
 8000b5a:	bf00      	nop
				}
				if (changed) {
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d040      	beq.n	8000be4 <main+0x1f8>
					print_mode_description(buffer_mode, input_index);
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <main+0x214>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <main+0x218>)
 8000b68:	461a      	mov	r2, r3
 8000b6a:	c903      	ldmia	r1, {r0, r1}
 8000b6c:	f7ff fee2 	bl	8000934 <print_mode_description>
 8000b70:	e038      	b.n	8000be4 <main+0x1f8>
				}
			}
		} else {
			if (received_char == '\r') {
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b0d      	cmp	r3, #13
 8000b76:	d106      	bne.n	8000b86 <main+0x19a>
				is_setting_mode = true;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <main+0x210>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
				print("Setting mode is on\n\r");
 8000b7e:	482a      	ldr	r0, [pc, #168]	; (8000c28 <main+0x23c>)
 8000b80:	f7ff fecc 	bl	800091c <print>
 8000b84:	e02e      	b.n	8000be4 <main+0x1f8>
			} else {
				int mode_index = atoi(&received_char) - 1;
 8000b86:	1cfb      	adds	r3, r7, #3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 f90b 	bl	8003da4 <atoi>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	3b01      	subs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
				if (mode_index != -2) {
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f113 0f02 	cmn.w	r3, #2
 8000b9a:	d023      	beq.n	8000be4 <main+0x1f8>
					if (mode_index != -1) {
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba2:	d017      	beq.n	8000bd4 <main+0x1e8>
						set_pin(MODES[mode_index].led, MODES[mode_index].brightness);
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <main+0x21c>)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000bac:	4916      	ldr	r1, [pc, #88]	; (8000c08 <main+0x21c>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4610      	mov	r0, r2
 8000bba:	f7ff fe6b 	bl	8000894 <set_pin>
						print_mode_description(MODES[mode_index], -1);
 8000bbe:	4912      	ldr	r1, [pc, #72]	; (8000c08 <main+0x21c>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bce:	f7ff feb1 	bl	8000934 <print_mode_description>
 8000bd2:	e007      	b.n	8000be4 <main+0x1f8>
					} else {
						set_pin(-1, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bda:	f7ff fe5b 	bl	8000894 <set_pin>
						print("Every pin is off\n\r");
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <main+0x240>)
 8000be0:	f7ff fe9c 	bl	800091c <print>
	  while(is_data_available()){
 8000be4:	f7ff fd68 	bl	80006b8 <is_data_available>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f47f af2f 	bne.w	8000a4e <main+0x62>
 8000bf0:	e7f8      	b.n	8000be4 <main+0x1f8>
 8000bf2:	bf00      	nop
 8000bf4:	20000184 	.word	0x20000184
 8000bf8:	200001cc 	.word	0x200001cc
 8000bfc:	2000017c 	.word	0x2000017c
 8000c00:	20000178 	.word	0x20000178
 8000c04:	20000170 	.word	0x20000170
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	08004868 	.word	0x08004868
 8000c10:	08004878 	.word	0x08004878
 8000c14:	08004890 	.word	0x08004890
 8000c18:	080048ac 	.word	0x080048ac
 8000c1c:	080048c8 	.word	0x080048c8
 8000c20:	080048e0 	.word	0x080048e0
 8000c24:	080048f8 	.word	0x080048f8
 8000c28:	08004910 	.word	0x08004910
 8000c2c:	08004928 	.word	0x08004928

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f8de 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <SystemClock_Config+0xd8>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <SystemClock_Config+0xdc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ca4:	23d8      	movs	r3, #216	; 0xd8
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fe83 	bl	80019c0 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc0:	f000 f826 	bl	8000d10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cc4:	f000 fe2c 	bl	8001920 <HAL_PWREx_EnableOverDrive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cce:	f000 f81f 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2105      	movs	r1, #5
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 f8dd 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cfc:	f000 f808 	bl	8000d10 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3750      	adds	r7, #80	; 0x50
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x4>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SysTick_Handler+0x20>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <SysTick_Handler+0x18>
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Handler+0x20>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <SysTick_Handler+0x20>)
 8000dc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 fa3a 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000d4 	.word	0x200000d4

08000dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_isr (&huart6);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <USART6_IRQHandler+0x14>)
 8000dda:	f7ff fc9b 	bl	8000714 <uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000dde:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USART6_IRQHandler+0x14>)
 8000de0:	f002 f91a 	bl	8003018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200001cc 	.word	0x200001cc

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f002 ffc6 	bl	8003dac <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20030000 	.word	0x20030000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000180 	.word	0x20000180
 8000e54:	20000228 	.word	0x20000228

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]
 8000eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000eae:	4a3a      	ldr	r2, [pc, #232]	; (8000f98 <MX_TIM4_Init+0x11c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000eb4:	2259      	movs	r2, #89	; 0x59
 8000eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ed2:	4830      	ldr	r0, [pc, #192]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000ed4:	f001 f9cc 	bl	8002270 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000ede:	f7ff ff17 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4829      	ldr	r0, [pc, #164]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000ef0:	f001 fbf0 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000efa:	f7ff ff09 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000efe:	4825      	ldr	r0, [pc, #148]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f00:	f001 fa05 	bl	800230e <HAL_TIM_PWM_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f0a:	f7ff ff01 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481d      	ldr	r0, [pc, #116]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f1e:	f001 ffb1 	bl	8002e84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f28:	f7ff fef2 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2c:	2360      	movs	r3, #96	; 0x60
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000f30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2204      	movs	r2, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f46:	f001 fb03 	bl	8002550 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f50:	f7ff fede 	bl	8000d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2208      	movs	r2, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f5c:	f001 faf8 	bl	8002550 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f66:	f7ff fed3 	bl	8000d10 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	220c      	movs	r2, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f76:	f001 faeb 	bl	8002550 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000f80:	f7ff fec6 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM4_Init+0x118>)
 8000f86:	f000 f82b 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000184 	.word	0x20000184
 8000f98:	40000800 	.word	0x40000800

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10d      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_TIM_Base_MspInit+0x40>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40000800 	.word	0x40000800
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_TIM_MspPostInit+0x68>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d11e      	bne.n	8001040 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800101e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001022:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_TIM_MspPostInit+0x70>)
 800103c:	f000 fac4 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40000800 	.word	0x40000800
 800104c:	40023800 	.word	0x40023800
 8001050:	40020c00 	.word	0x40020c00

08001054 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART6_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001064:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800108c:	f001 ff76 	bl	8002f7c <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f7ff fe3b 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001cc 	.word	0x200001cc
 80010a4:	40011400 	.word	0x40011400

080010a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_UART_MspInit+0x94>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d133      	bne.n	8001132 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23c0      	movs	r3, #192	; 0xc0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001112:	2308      	movs	r3, #8
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_UART_MspInit+0x9c>)
 800111e:	f000 fa53 	bl	80015c8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2047      	movs	r0, #71	; 0x47
 8001128:	f000 f985 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800112c:	2047      	movs	r0, #71	; 0x47
 800112e:	f000 f99e 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40011400 	.word	0x40011400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800

08001148 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff fe71 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f002 fe1f 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fc37 	bl	80009ec <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800118c:	08004a98 	.word	0x08004a98
  ldr r2, =_sbss
 8001190:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001194:	20000224 	.word	0x20000224

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_Init+0x40>)
 80011a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_Init+0x40>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	; (80011dc <HAL_Init+0x40>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f92b 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fda2 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f943 	bl	800148a <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f90b 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000048 	.word	0x20000048
 8001238:	20000050 	.word	0x20000050
 800123c:	2000004c 	.word	0x2000004c

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000050 	.word	0x20000050
 8001264:	20000210 	.word	0x20000210

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000210 	.word	0x20000210

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff feda 	bl	8001268 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d008      	beq.n	80014d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e052      	b.n	800157a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0216 	bic.w	r2, r2, #22
 80014e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <HAL_DMA_Abort+0x62>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0208 	bic.w	r2, r2, #8
 8001512:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001524:	e013      	b.n	800154e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001526:	f7ff fe9f 	bl	8001268 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b05      	cmp	r3, #5
 8001532:	d90c      	bls.n	800154e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e015      	b.n	800157a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e4      	bne.n	8001526 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	223f      	movs	r2, #63	; 0x3f
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d004      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e00c      	b.n	80015ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2205      	movs	r2, #5
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e177      	b.n	80018d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8166 	bne.w	80018ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d005      	beq.n	800161a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	2b02      	cmp	r3, #2
 8001618:	d130      	bne.n	800167c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80c0 	beq.w	80018ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b66      	ldr	r3, [pc, #408]	; (80018ec <HAL_GPIO_Init+0x324>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a65      	ldr	r2, [pc, #404]	; (80018ec <HAL_GPIO_Init+0x324>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_GPIO_Init+0x324>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a61      	ldr	r2, [pc, #388]	; (80018f0 <HAL_GPIO_Init+0x328>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d037      	beq.n	8001806 <HAL_GPIO_Init+0x23e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a57      	ldr	r2, [pc, #348]	; (80018f8 <HAL_GPIO_Init+0x330>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0x23a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_GPIO_Init+0x334>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x236>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a55      	ldr	r2, [pc, #340]	; (8001900 <HAL_GPIO_Init+0x338>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x232>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x33c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x22e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a53      	ldr	r2, [pc, #332]	; (8001908 <HAL_GPIO_Init+0x340>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x22a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_GPIO_Init+0x344>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x226>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_GPIO_Init+0x348>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x222>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a50      	ldr	r2, [pc, #320]	; (8001914 <HAL_GPIO_Init+0x34c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x21e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <HAL_GPIO_Init+0x350>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x21a>
 80017de:	2309      	movs	r3, #9
 80017e0:	e012      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017e2:	230a      	movs	r3, #10
 80017e4:	e010      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e00e      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e00c      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00a      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e008      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e004      	b.n	8001808 <HAL_GPIO_Init+0x240>
 80017fe:	2302      	movs	r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x240>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x240>
 8001806:	2300      	movs	r3, #0
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	4093      	lsls	r3, r2
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001818:	4935      	ldr	r1, [pc, #212]	; (80018f0 <HAL_GPIO_Init+0x328>)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_GPIO_Init+0x354>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184a:	4a34      	ldr	r2, [pc, #208]	; (800191c <HAL_GPIO_Init+0x354>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_GPIO_Init+0x354>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_GPIO_Init+0x354>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <HAL_GPIO_Init+0x354>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189e:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_GPIO_Init+0x354>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_GPIO_Init+0x354>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_GPIO_Init+0x354>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b0f      	cmp	r3, #15
 80018d8:	f67f ae84 	bls.w	80015e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021000 	.word	0x40021000
 8001908:	40021400 	.word	0x40021400
 800190c:	40021800 	.word	0x40021800
 8001910:	40021c00 	.word	0x40021c00
 8001914:	40022000 	.word	0x40022000
 8001918:	40022400 	.word	0x40022400
 800191c:	40013c00 	.word	0x40013c00

08001920 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff fc8c 	bl	8001268 <HAL_GetTick>
 8001950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001952:	e009      	b.n	8001968 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001954:	f7ff fc88 	bl	8001268 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001962:	d901      	bls.n	8001968 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e01f      	b.n	80019a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d1ee      	bne.n	8001954 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff fc74 	bl	8001268 <HAL_GetTick>
 8001980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001982:	e009      	b.n	8001998 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001984:	f7ff fc70 	bl	8001268 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001992:	d901      	bls.n	8001998 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e007      	b.n	80019a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a4:	d1ee      	bne.n	8001984 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	420e0040 	.word	0x420e0040
 80019b8:	40007000 	.word	0x40007000
 80019bc:	420e0044 	.word	0x420e0044

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e267      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d075      	beq.n	8001aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d112      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a02:	d10b      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4b7e      	ldr	r3, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d05b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d157      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e242      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x74>
 8001a26:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a75      	ldr	r2, [pc, #468]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6f      	ldr	r2, [pc, #444]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6c      	ldr	r2, [pc, #432]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a58:	4b69      	ldr	r3, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fbf6 	bl	8001268 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fbf2 	bl	8001268 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e207      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fbe2 	bl	8001268 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fbde 	bl	8001268 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1f3      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1c7      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4937      	ldr	r1, [pc, #220]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_OscConfig+0x244>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb97 	bl	8001268 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fb93 	bl	8001268 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1a8      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4925      	ldr	r1, [pc, #148]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x244>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fb76 	bl	8001268 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb72 	bl	8001268 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e187      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d036      	beq.n	8001c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x248>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fb56 	bl	8001268 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb52 	bl	8001268 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e167      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x200>
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_OscConfig+0x248>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb3f 	bl	8001268 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e00e      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff fb3b 	bl	8001268 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d907      	bls.n	8001c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e150      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470000 	.word	0x42470000
 8001c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ea      	bne.n	8001bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8097 	beq.w	8001d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a7c      	ldr	r2, [pc, #496]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b7a      	ldr	r3, [pc, #488]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b74      	ldr	r3, [pc, #464]	; (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fafb 	bl	8001268 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff faf7 	bl	8001268 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e10c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x2ea>
 8001c9c:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a63      	ldr	r2, [pc, #396]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x324>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x30c>
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a5e      	ldr	r2, [pc, #376]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a5b      	ldr	r2, [pc, #364]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x324>
 8001ccc:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a54      	ldr	r2, [pc, #336]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 0304 	bic.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fabc 	bl	8001268 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fab8 	bl	8001268 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0cb      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ee      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x334>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff faa6 	bl	8001268 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff faa2 	bl	8001268 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0b5      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d36:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ee      	bne.n	8001d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a38      	ldr	r2, [pc, #224]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a1 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d05c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d141      	bne.n	8001df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fa76 	bl	8001268 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff fa72 	bl	8001268 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e087      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	491b      	ldr	r1, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fa4b 	bl	8001268 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff fa47 	bl	8001268 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e05c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x416>
 8001df4:	e054      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fa34 	bl	8001268 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fa30 	bl	8001268 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e045      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x444>
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e038      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40007000 	.word	0x40007000
 8001e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4ec>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d028      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d121      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d11a      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0cc      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90c      	bls.n	8001eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d044      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d119      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e067      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4934      	ldr	r1, [pc, #208]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f962 	bl	8001268 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff f95e 	bl	8001268 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d20c      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f8c2 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00
 800206c:	40023800 	.word	0x40023800
 8002070:	0800493c 	.word	0x0800493c
 8002074:	20000048 	.word	0x20000048
 8002078:	2000004c 	.word	0x2000004c

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002080:	b090      	sub	sp, #64	; 0x40
 8002082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d00d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	f200 80a1 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ae:	e09b      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_GetSysClockFreq+0x184>)
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020b4:	e09b      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b6:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020ba:	e098      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	2200      	movs	r2, #0
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	627a      	str	r2, [r7, #36]	; 0x24
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020e4:	2100      	movs	r1, #0
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e8:	fb03 f201 	mul.w	r2, r3, r1
 80020ec:	2300      	movs	r3, #0
 80020ee:	fb00 f303 	mul.w	r3, r0, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	4a43      	ldr	r2, [pc, #268]	; (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f6:	fba0 1202 	umull	r1, r2, r0, r2
 80020fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020fc:	460a      	mov	r2, r1
 80020fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002102:	4413      	add	r3, r2
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	2200      	movs	r2, #0
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	61fa      	str	r2, [r7, #28]
 800210e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002116:	f7fe f8bb 	bl	8000290 <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4613      	mov	r3, r2
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	e053      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	2200      	movs	r2, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	617a      	str	r2, [r7, #20]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002136:	f04f 0b00 	mov.w	fp, #0
 800213a:	4652      	mov	r2, sl
 800213c:	465b      	mov	r3, fp
 800213e:	f04f 0000 	mov.w	r0, #0
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	0159      	lsls	r1, r3, #5
 8002148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214c:	0150      	lsls	r0, r2, #5
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ebb2 080a 	subs.w	r8, r2, sl
 8002156:	eb63 090b 	sbc.w	r9, r3, fp
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002166:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800216a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800216e:	ebb2 0408 	subs.w	r4, r2, r8
 8002172:	eb63 0509 	sbc.w	r5, r3, r9
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	00eb      	lsls	r3, r5, #3
 8002180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002184:	00e2      	lsls	r2, r4, #3
 8002186:	4614      	mov	r4, r2
 8002188:	461d      	mov	r5, r3
 800218a:	eb14 030a 	adds.w	r3, r4, sl
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	eb45 030b 	adc.w	r3, r5, fp
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a2:	4629      	mov	r1, r5
 80021a4:	028b      	lsls	r3, r1, #10
 80021a6:	4621      	mov	r1, r4
 80021a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ac:	4621      	mov	r1, r4
 80021ae:	028a      	lsls	r2, r1, #10
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	2200      	movs	r2, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c0:	f7fe f866 	bl	8000290 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	017d7840 	.word	0x017d7840

08002208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000048 	.word	0x20000048

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a9b      	lsrs	r3, r3, #10
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	0800494c 	.word	0x0800494c

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffdc 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	0800494c 	.word	0x0800494c

08002270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e041      	b.n	8002306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe80 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3304      	adds	r3, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f000 fad8 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e041      	b.n	80023a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d106      	bne.n	800233a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f839 	bl	80023ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f000 fa89 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_TIM_PWM_Start+0x24>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e022      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d109      	bne.n	80023fe <HAL_TIM_PWM_Start+0x3e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e015      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d109      	bne.n	8002418 <HAL_TIM_PWM_Start+0x58>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e008      	b.n	800242a <HAL_TIM_PWM_Start+0x6a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07c      	b.n	800252c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d104      	bne.n	8002442 <HAL_TIM_PWM_Start+0x82>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002440:	e013      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0x92>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	e00b      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b08      	cmp	r3, #8
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0xa2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002460:	e003      	b.n	800246a <HAL_TIM_PWM_Start+0xaa>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fce0 	bl	8002e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_TIM_PWM_Start+0x174>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_PWM_Start+0xcc>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <HAL_TIM_PWM_Start+0x178>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_TIM_PWM_Start+0xd0>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_TIM_PWM_Start+0xd2>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_TIM_PWM_Start+0x174>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d01d      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_TIM_PWM_Start+0x17c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_TIM_PWM_Start+0x180>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_PWM_Start+0x184>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIM_PWM_Start+0x178>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_TIM_PWM_Start+0x188>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x136>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_TIM_PWM_Start+0x18c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d111      	bne.n	800251a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d010      	beq.n	800252a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	e007      	b.n	800252a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40010000 	.word	0x40010000
 8002538:	40010400 	.word	0x40010400
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800
 8002544:	40000c00 	.word	0x40000c00
 8002548:	40014000 	.word	0x40014000
 800254c:	40001800 	.word	0x40001800

08002550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800256a:	2302      	movs	r3, #2
 800256c:	e0ae      	b.n	80026cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	f200 809f 	bhi.w	80026bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025b9 	.word	0x080025b9
 8002588:	080026bd 	.word	0x080026bd
 800258c:	080026bd 	.word	0x080026bd
 8002590:	080026bd 	.word	0x080026bd
 8002594:	080025f9 	.word	0x080025f9
 8002598:	080026bd 	.word	0x080026bd
 800259c:	080026bd 	.word	0x080026bd
 80025a0:	080026bd 	.word	0x080026bd
 80025a4:	0800263b 	.word	0x0800263b
 80025a8:	080026bd 	.word	0x080026bd
 80025ac:	080026bd 	.word	0x080026bd
 80025b0:	080026bd 	.word	0x080026bd
 80025b4:	0800267b 	.word	0x0800267b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f9f0 	bl	80029a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0204 	bic.w	r2, r2, #4
 80025e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6999      	ldr	r1, [r3, #24]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	619a      	str	r2, [r3, #24]
      break;
 80025f6:	e064      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fa40 	bl	8002a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6999      	ldr	r1, [r3, #24]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	021a      	lsls	r2, r3, #8
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
      break;
 8002638:	e043      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fa95 	bl	8002b70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0208 	orr.w	r2, r2, #8
 8002654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0204 	bic.w	r2, r2, #4
 8002664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69d9      	ldr	r1, [r3, #28]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	61da      	str	r2, [r3, #28]
      break;
 8002678:	e023      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fae9 	bl	8002c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	021a      	lsls	r2, r3, #8
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	61da      	str	r2, [r3, #28]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      break;
 80026c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0b4      	b.n	800285a <HAL_TIM_ConfigClockSource+0x186>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d03e      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0xd4>
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272e:	f200 8087 	bhi.w	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	f000 8086 	beq.w	8002846 <HAL_TIM_ConfigClockSource+0x172>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	d87f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d01a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xa6>
 8002744:	2b70      	cmp	r3, #112	; 0x70
 8002746:	d87b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b60      	cmp	r3, #96	; 0x60
 800274a:	d050      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x11a>
 800274c:	2b60      	cmp	r3, #96	; 0x60
 800274e:	d877      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d03c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xfa>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d873      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d058      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x13a>
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d86f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d064      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d86b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d060      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d867      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d05a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	e062      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f000 fb35 	bl	8002df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800279c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
      break;
 80027a6:	e04f      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f000 fb1e 	bl	8002df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ca:	609a      	str	r2, [r3, #8]
      break;
 80027cc:	e03c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 fa92 	bl	8002d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2150      	movs	r1, #80	; 0x50
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 faeb 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 80027ec:	e02c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 fab1 	bl	8002d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2160      	movs	r1, #96	; 0x60
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fadb 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 800280c:	e01c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 fa72 	bl	8002d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2140      	movs	r1, #64	; 0x40
 8002826:	4618      	mov	r0, r3
 8002828:	f000 facb 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 800282c:	e00c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4610      	mov	r0, r2
 800283a:	f000 fac2 	bl	8002dc2 <TIM_ITRx_SetConfig>
      break;
 800283e:	e003      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e000      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a40      	ldr	r2, [pc, #256]	; (8002978 <TIM_Base_SetConfig+0x114>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d00f      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3d      	ldr	r2, [pc, #244]	; (800297c <TIM_Base_SetConfig+0x118>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00b      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3c      	ldr	r2, [pc, #240]	; (8002980 <TIM_Base_SetConfig+0x11c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3b      	ldr	r2, [pc, #236]	; (8002984 <TIM_Base_SetConfig+0x120>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <TIM_Base_SetConfig+0x124>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <TIM_Base_SetConfig+0x114>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d027      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2c      	ldr	r2, [pc, #176]	; (800297c <TIM_Base_SetConfig+0x118>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d023      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <TIM_Base_SetConfig+0x11c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <TIM_Base_SetConfig+0x120>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <TIM_Base_SetConfig+0x124>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d017      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <TIM_Base_SetConfig+0x128>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <TIM_Base_SetConfig+0x12c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <TIM_Base_SetConfig+0x130>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a25      	ldr	r2, [pc, #148]	; (8002998 <TIM_Base_SetConfig+0x134>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a24      	ldr	r2, [pc, #144]	; (800299c <TIM_Base_SetConfig+0x138>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <TIM_Base_SetConfig+0x13c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <TIM_Base_SetConfig+0x114>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xf8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <TIM_Base_SetConfig+0x124>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40010000 	.word	0x40010000
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800
 8002984:	40000c00 	.word	0x40000c00
 8002988:	40010400 	.word	0x40010400
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800
 8002998:	40001800 	.word	0x40001800
 800299c:	40001c00 	.word	0x40001c00
 80029a0:	40002000 	.word	0x40002000

080029a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <TIM_OC1_SetConfig+0xd8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d003      	beq.n	8002a08 <TIM_OC1_SetConfig+0x64>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1f      	ldr	r2, [pc, #124]	; (8002a80 <TIM_OC1_SetConfig+0xdc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10c      	bne.n	8002a22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0308 	bic.w	r3, r3, #8
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <TIM_OC1_SetConfig+0xd8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_OC1_SetConfig+0x8e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <TIM_OC1_SetConfig+0xdc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d111      	bne.n	8002a56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	621a      	str	r2, [r3, #32]
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40010400 	.word	0x40010400

08002a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0320 	bic.w	r3, r3, #32
 8002ace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <TIM_OC2_SetConfig+0xe4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_OC2_SetConfig+0x68>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <TIM_OC2_SetConfig+0xe8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10d      	bne.n	8002b08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <TIM_OC2_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC2_SetConfig+0x94>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <TIM_OC2_SetConfig+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d113      	bne.n	8002b40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40010000 	.word	0x40010000
 8002b6c:	40010400 	.word	0x40010400

08002b70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <TIM_OC3_SetConfig+0xe0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_OC3_SetConfig+0x66>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <TIM_OC3_SetConfig+0xe4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10d      	bne.n	8002bf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a16      	ldr	r2, [pc, #88]	; (8002c50 <TIM_OC3_SetConfig+0xe0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_OC3_SetConfig+0x92>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <TIM_OC3_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d113      	bne.n	8002c2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400

08002c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	031b      	lsls	r3, r3, #12
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <TIM_OC4_SetConfig+0xa4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_OC4_SetConfig+0x68>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <TIM_OC4_SetConfig+0xa8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d109      	bne.n	8002cd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	40010400 	.word	0x40010400

08002d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f023 0201 	bic.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f023 030a 	bic.w	r3, r3, #10
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b087      	sub	sp, #28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	031b      	lsls	r3, r3, #12
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f043 0307 	orr.w	r3, r3, #7
 8002de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	021a      	lsls	r2, r3, #8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1a      	ldr	r2, [r3, #32]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1a      	ldr	r2, [r3, #32]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e05a      	b.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d01d      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10c      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800

08002f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e03f      	b.n	800300e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe f880 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fc7b 	bl	80038bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ba      	sub	sp, #232	; 0xe8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800304a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_UART_IRQHandler+0x66>
 800306a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb65 	bl	8003746 <UART_Receive_IT>
      return;
 800307c:	e256      	b.n	800352c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800307e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80de 	beq.w	8003244 <HAL_UART_IRQHandler+0x22c>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80d1 	beq.w	8003244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_IRQHandler+0xae>
 80030ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0xd2>
 80030d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xf6>
 80030f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800310e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d011      	beq.n	800313e <HAL_UART_IRQHandler+0x126>
 800311a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0208 	orr.w	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 81ed 	beq.w	8003522 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_UART_IRQHandler+0x14e>
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 faf0 	bl	8003746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b40      	cmp	r3, #64	; 0x40
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_UART_IRQHandler+0x17a>
 800318a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04f      	beq.n	8003232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9f8 	bl	8003588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d141      	bne.n	800322a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3314      	adds	r3, #20
 80031ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1d9      	bne.n	80031a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	4a7d      	ldr	r2, [pc, #500]	; (80033f4 <HAL_UART_IRQHandler+0x3dc>)
 8003200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f9bb 	bl	8001582 <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00e      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f99a 	bl	800355c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00a      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f996 	bl	800355c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e006      	b.n	8003240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f992 	bl	800355c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800323e:	e170      	b.n	8003522 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	bf00      	nop
    return;
 8003242:	e16e      	b.n	8003522 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b01      	cmp	r3, #1
 800324a:	f040 814a 	bne.w	80034e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8143 	beq.w	80034e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 813c 	beq.w	80034e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	f040 80b4 	bne.w	80033f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800329c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8140 	beq.w	8003526 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f080 8139 	bcs.w	8003526 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	f000 8088 	beq.w	80033da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800330e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1d9      	bne.n	80032ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3314      	adds	r3, #20
 800331c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800333a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800333e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800334c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e1      	bne.n	8003316 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800337c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e3      	bne.n	8003352 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	f023 0310 	bic.w	r3, r3, #16
 80033ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80033be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e3      	bne.n	8003398 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe f864 	bl	80014a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8c0 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033f0:	e099      	b.n	8003526 <HAL_UART_IRQHandler+0x50e>
 80033f2:	bf00      	nop
 80033f4:	0800364f 	.word	0x0800364f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 808b 	beq.w	800352a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8086 	beq.w	800352a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800342e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003442:	647a      	str	r2, [r7, #68]	; 0x44
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3314      	adds	r3, #20
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	623b      	str	r3, [r7, #32]
   return(result);
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3314      	adds	r3, #20
 8003476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800347a:	633a      	str	r2, [r7, #48]	; 0x30
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e3      	bne.n	8003456 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	330c      	adds	r3, #12
 80034a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0310 	bic.w	r3, r3, #16
 80034b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034c0:	61fa      	str	r2, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69b9      	ldr	r1, [r7, #24]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	617b      	str	r3, [r7, #20]
   return(result);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e3      	bne.n	800349c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f848 	bl	8003570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034e0:	e023      	b.n	800352a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_UART_IRQHandler+0x4ea>
 80034ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8bb 	bl	8003676 <UART_Transmit_IT>
    return;
 8003500:	e014      	b.n	800352c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <HAL_UART_IRQHandler+0x514>
 800350e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8fb 	bl	8003716 <UART_EndTransmit_IT>
    return;
 8003520:	e004      	b.n	800352c <HAL_UART_IRQHandler+0x514>
    return;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <HAL_UART_IRQHandler+0x514>
      return;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HAL_UART_IRQHandler+0x514>
      return;
 800352a:	bf00      	nop
  }
}
 800352c:	37e8      	adds	r7, #232	; 0xe8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop

08003534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b095      	sub	sp, #84	; 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b0:	643a      	str	r2, [r7, #64]	; 0x40
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d119      	bne.n	8003634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	647b      	str	r3, [r7, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003642:	bf00      	nop
 8003644:	3754      	adds	r7, #84	; 0x54
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ff77 	bl	800355c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b21      	cmp	r3, #33	; 0x21
 8003688:	d13e      	bne.n	8003708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d114      	bne.n	80036be <UART_Transmit_IT+0x48>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d110      	bne.n	80036be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	1c9a      	adds	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	e008      	b.n	80036d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6211      	str	r1, [r2, #32]
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fefc 	bl	8003534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08c      	sub	sp, #48	; 0x30
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b22      	cmp	r3, #34	; 0x22
 8003758:	f040 80ab 	bne.w	80038b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d117      	bne.n	8003796 <UART_Receive_IT+0x50>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d113      	bne.n	8003796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	b29a      	uxth	r2, r3
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	1c9a      	adds	r2, r3, #2
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
 8003794:	e026      	b.n	80037e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a8:	d007      	beq.n	80037ba <UART_Receive_IT+0x74>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <UART_Receive_IT+0x82>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e008      	b.n	80037da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4619      	mov	r1, r3
 80037f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d15a      	bne.n	80038ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0220 	bic.w	r2, r2, #32
 8003806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	2b01      	cmp	r3, #1
 8003836:	d135      	bne.n	80038a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	613b      	str	r3, [r7, #16]
   return(result);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f023 0310 	bic.w	r3, r3, #16
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385e:	623a      	str	r2, [r7, #32]
 8003860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	69f9      	ldr	r1, [r7, #28]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	61bb      	str	r3, [r7, #24]
   return(result);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e5      	bne.n	800383e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b10      	cmp	r3, #16
 800387e:	d10a      	bne.n	8003896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fe67 	bl	8003570 <HAL_UARTEx_RxEventCallback>
 80038a2:	e002      	b.n	80038aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe4f 	bl	8003548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e002      	b.n	80038b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3730      	adds	r7, #48	; 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b0c0      	sub	sp, #256	; 0x100
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	ea40 0301 	orr.w	r3, r0, r1
 80038e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003914:	f021 010c 	bic.w	r1, r1, #12
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003922:	430b      	orrs	r3, r1
 8003924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003936:	6999      	ldr	r1, [r3, #24]
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	ea40 0301 	orr.w	r3, r0, r1
 8003942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <UART_SetConfig+0x2cc>)
 800394c:	429a      	cmp	r2, r3
 800394e:	d005      	beq.n	800395c <UART_SetConfig+0xa0>
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d104      	bne.n	8003966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7fe fc74 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 8003960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003964:	e003      	b.n	800396e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003966:	f7fe fc5b 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 800396a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	f040 810c 	bne.w	8003b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800398a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	1891      	adds	r1, r2, r2
 8003994:	65b9      	str	r1, [r7, #88]	; 0x58
 8003996:	415b      	adcs	r3, r3
 8003998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800399a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800399e:	4621      	mov	r1, r4
 80039a0:	eb12 0801 	adds.w	r8, r2, r1
 80039a4:	4629      	mov	r1, r5
 80039a6:	eb43 0901 	adc.w	r9, r3, r1
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039be:	4690      	mov	r8, r2
 80039c0:	4699      	mov	r9, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	eb18 0303 	adds.w	r3, r8, r3
 80039c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039cc:	462b      	mov	r3, r5
 80039ce:	eb49 0303 	adc.w	r3, r9, r3
 80039d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ea:	460b      	mov	r3, r1
 80039ec:	18db      	adds	r3, r3, r3
 80039ee:	653b      	str	r3, [r7, #80]	; 0x50
 80039f0:	4613      	mov	r3, r2
 80039f2:	eb42 0303 	adc.w	r3, r2, r3
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
 80039f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a00:	f7fc fc46 	bl	8000290 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	011c      	lsls	r4, r3, #4
 8003a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	1891      	adds	r1, r2, r2
 8003a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a2c:	415b      	adcs	r3, r3
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a34:	4641      	mov	r1, r8
 8003a36:	eb12 0a01 	adds.w	sl, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a54:	4692      	mov	sl, r2
 8003a56:	469b      	mov	fp, r3
 8003a58:	4643      	mov	r3, r8
 8003a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a62:	464b      	mov	r3, r9
 8003a64:	eb4b 0303 	adc.w	r3, fp, r3
 8003a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a80:	460b      	mov	r3, r1
 8003a82:	18db      	adds	r3, r3, r3
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
 8003a86:	4613      	mov	r3, r2
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a96:	f7fc fbfb 	bl	8000290 <__aeabi_uldivmod>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2264      	movs	r2, #100	; 0x64
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	1acb      	subs	r3, r1, r3
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ab6:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ac4:	441c      	add	r4, r3
 8003ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ae8:	4641      	mov	r1, r8
 8003aea:	1851      	adds	r1, r2, r1
 8003aec:	6339      	str	r1, [r7, #48]	; 0x30
 8003aee:	4649      	mov	r1, r9
 8003af0:	414b      	adcs	r3, r1
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b00:	4659      	mov	r1, fp
 8003b02:	00cb      	lsls	r3, r1, #3
 8003b04:	4651      	mov	r1, sl
 8003b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0a:	4651      	mov	r1, sl
 8003b0c:	00ca      	lsls	r2, r1, #3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	4642      	mov	r2, r8
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	460a      	mov	r2, r1
 8003b20:	eb42 0303 	adc.w	r3, r2, r3
 8003b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	18db      	adds	r3, r3, r3
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b42:	4613      	mov	r3, r2
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b52:	f7fc fb9d 	bl	8000290 <__aeabi_uldivmod>
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	2164      	movs	r1, #100	; 0x64
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	3332      	adds	r3, #50	; 0x32
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <UART_SetConfig+0x2d4>)
 8003b70:	fba2 2303 	umull	r2, r3, r2, r3
 8003b74:	095b      	lsrs	r3, r3, #5
 8003b76:	f003 0207 	and.w	r2, r3, #7
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4422      	add	r2, r4
 8003b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b84:	e105      	b.n	8003d92 <UART_SetConfig+0x4d6>
 8003b86:	bf00      	nop
 8003b88:	40011000 	.word	0x40011000
 8003b8c:	40011400 	.word	0x40011400
 8003b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003ba6:	4642      	mov	r2, r8
 8003ba8:	464b      	mov	r3, r9
 8003baa:	1891      	adds	r1, r2, r2
 8003bac:	6239      	str	r1, [r7, #32]
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	1854      	adds	r4, r2, r1
 8003bba:	4649      	mov	r1, r9
 8003bbc:	eb43 0501 	adc.w	r5, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bdc:	464b      	mov	r3, r9
 8003bde:	eb45 0303 	adc.w	r3, r5, r3
 8003be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c02:	4629      	mov	r1, r5
 8003c04:	008b      	lsls	r3, r1, #2
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	008a      	lsls	r2, r1, #2
 8003c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c14:	f7fc fb3c 	bl	8000290 <__aeabi_uldivmod>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	011c      	lsls	r4, r3, #4
 8003c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	1891      	adds	r1, r2, r2
 8003c3e:	61b9      	str	r1, [r7, #24]
 8003c40:	415b      	adcs	r3, r3
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c48:	4641      	mov	r1, r8
 8003c4a:	1851      	adds	r1, r2, r1
 8003c4c:	6139      	str	r1, [r7, #16]
 8003c4e:	4649      	mov	r1, r9
 8003c50:	414b      	adcs	r3, r1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c60:	4659      	mov	r1, fp
 8003c62:	00cb      	lsls	r3, r1, #3
 8003c64:	4651      	mov	r1, sl
 8003c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6a:	4651      	mov	r1, sl
 8003c6c:	00ca      	lsls	r2, r1, #3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	4642      	mov	r2, r8
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	460a      	mov	r2, r1
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	008b      	lsls	r3, r1, #2
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003caa:	4641      	mov	r1, r8
 8003cac:	008a      	lsls	r2, r1, #2
 8003cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cb2:	f7fc faed 	bl	8000290 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	2164      	movs	r1, #100	; 0x64
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	3332      	adds	r3, #50	; 0x32
 8003cce:	4a34      	ldr	r2, [pc, #208]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cda:	441c      	add	r4, r3
 8003cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ce6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cea:	4642      	mov	r2, r8
 8003cec:	464b      	mov	r3, r9
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	1851      	adds	r1, r2, r1
 8003cfe:	6039      	str	r1, [r7, #0]
 8003d00:	4649      	mov	r1, r9
 8003d02:	414b      	adcs	r3, r1
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d12:	4659      	mov	r1, fp
 8003d14:	00cb      	lsls	r3, r1, #3
 8003d16:	4651      	mov	r1, sl
 8003d18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	00ca      	lsls	r2, r1, #3
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	4603      	mov	r3, r0
 8003d26:	4642      	mov	r2, r8
 8003d28:	189b      	adds	r3, r3, r2
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d40:	667a      	str	r2, [r7, #100]	; 0x64
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d4e:	4649      	mov	r1, r9
 8003d50:	008b      	lsls	r3, r1, #2
 8003d52:	4641      	mov	r1, r8
 8003d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d58:	4641      	mov	r1, r8
 8003d5a:	008a      	lsls	r2, r1, #2
 8003d5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d60:	f7fc fa96 	bl	8000290 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2164      	movs	r1, #100	; 0x64
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	3332      	adds	r3, #50	; 0x32
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <UART_SetConfig+0x4e4>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4422      	add	r2, r4
 8003d90:	609a      	str	r2, [r3, #8]
}
 8003d92:	bf00      	nop
 8003d94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	51eb851f 	.word	0x51eb851f

08003da4 <atoi>:
 8003da4:	220a      	movs	r2, #10
 8003da6:	2100      	movs	r1, #0
 8003da8:	f000 b9c4 	b.w	8004134 <strtol>

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000054 	.word	0x20000054

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <__libc_init_array+0x38>)
 8003dbc:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dbe:	1b64      	subs	r4, r4, r5
 8003dc0:	10a4      	asrs	r4, r4, #2
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	4d0b      	ldr	r5, [pc, #44]	; (8003df8 <__libc_init_array+0x40>)
 8003dca:	4c0c      	ldr	r4, [pc, #48]	; (8003dfc <__libc_init_array+0x44>)
 8003dcc:	f000 fd1a 	bl	8004804 <_init>
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004a90 	.word	0x08004a90
 8003df4:	08004a90 	.word	0x08004a90
 8003df8:	08004a90 	.word	0x08004a90
 8003dfc:	08004a94 	.word	0x08004a94

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <_free_r>:
 8003e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e12:	2900      	cmp	r1, #0
 8003e14:	d044      	beq.n	8003ea0 <_free_r+0x90>
 8003e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e1a:	9001      	str	r0, [sp, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e22:	bfb8      	it	lt
 8003e24:	18e4      	addlt	r4, r4, r3
 8003e26:	f000 f98f 	bl	8004148 <__malloc_lock>
 8003e2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <_free_r+0x94>)
 8003e2c:	9801      	ldr	r0, [sp, #4]
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	b933      	cbnz	r3, 8003e40 <_free_r+0x30>
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	6014      	str	r4, [r2, #0]
 8003e36:	b003      	add	sp, #12
 8003e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e3c:	f000 b98a 	b.w	8004154 <__malloc_unlock>
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	d908      	bls.n	8003e56 <_free_r+0x46>
 8003e44:	6825      	ldr	r5, [r4, #0]
 8003e46:	1961      	adds	r1, r4, r5
 8003e48:	428b      	cmp	r3, r1
 8003e4a:	bf01      	itttt	eq
 8003e4c:	6819      	ldreq	r1, [r3, #0]
 8003e4e:	685b      	ldreq	r3, [r3, #4]
 8003e50:	1949      	addeq	r1, r1, r5
 8003e52:	6021      	streq	r1, [r4, #0]
 8003e54:	e7ed      	b.n	8003e32 <_free_r+0x22>
 8003e56:	461a      	mov	r2, r3
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b10b      	cbz	r3, 8003e60 <_free_r+0x50>
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d9fa      	bls.n	8003e56 <_free_r+0x46>
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	1855      	adds	r5, r2, r1
 8003e64:	42a5      	cmp	r5, r4
 8003e66:	d10b      	bne.n	8003e80 <_free_r+0x70>
 8003e68:	6824      	ldr	r4, [r4, #0]
 8003e6a:	4421      	add	r1, r4
 8003e6c:	1854      	adds	r4, r2, r1
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	6011      	str	r1, [r2, #0]
 8003e72:	d1e0      	bne.n	8003e36 <_free_r+0x26>
 8003e74:	681c      	ldr	r4, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	6053      	str	r3, [r2, #4]
 8003e7a:	4421      	add	r1, r4
 8003e7c:	6011      	str	r1, [r2, #0]
 8003e7e:	e7da      	b.n	8003e36 <_free_r+0x26>
 8003e80:	d902      	bls.n	8003e88 <_free_r+0x78>
 8003e82:	230c      	movs	r3, #12
 8003e84:	6003      	str	r3, [r0, #0]
 8003e86:	e7d6      	b.n	8003e36 <_free_r+0x26>
 8003e88:	6825      	ldr	r5, [r4, #0]
 8003e8a:	1961      	adds	r1, r4, r5
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf04      	itt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	6063      	str	r3, [r4, #4]
 8003e96:	bf04      	itt	eq
 8003e98:	1949      	addeq	r1, r1, r5
 8003e9a:	6021      	streq	r1, [r4, #0]
 8003e9c:	6054      	str	r4, [r2, #4]
 8003e9e:	e7ca      	b.n	8003e36 <_free_r+0x26>
 8003ea0:	b003      	add	sp, #12
 8003ea2:	bd30      	pop	{r4, r5, pc}
 8003ea4:	20000214 	.word	0x20000214

08003ea8 <sbrk_aligned>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4e0e      	ldr	r6, [pc, #56]	; (8003ee4 <sbrk_aligned+0x3c>)
 8003eac:	460c      	mov	r4, r1
 8003eae:	6831      	ldr	r1, [r6, #0]
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b911      	cbnz	r1, 8003eba <sbrk_aligned+0x12>
 8003eb4:	f000 f88c 	bl	8003fd0 <_sbrk_r>
 8003eb8:	6030      	str	r0, [r6, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f000 f887 	bl	8003fd0 <_sbrk_r>
 8003ec2:	1c43      	adds	r3, r0, #1
 8003ec4:	d00a      	beq.n	8003edc <sbrk_aligned+0x34>
 8003ec6:	1cc4      	adds	r4, r0, #3
 8003ec8:	f024 0403 	bic.w	r4, r4, #3
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d007      	beq.n	8003ee0 <sbrk_aligned+0x38>
 8003ed0:	1a21      	subs	r1, r4, r0
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f000 f87c 	bl	8003fd0 <_sbrk_r>
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d101      	bne.n	8003ee0 <sbrk_aligned+0x38>
 8003edc:	f04f 34ff 	mov.w	r4, #4294967295
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	20000218 	.word	0x20000218

08003ee8 <_malloc_r>:
 8003ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	1ccd      	adds	r5, r1, #3
 8003eee:	f025 0503 	bic.w	r5, r5, #3
 8003ef2:	3508      	adds	r5, #8
 8003ef4:	2d0c      	cmp	r5, #12
 8003ef6:	bf38      	it	cc
 8003ef8:	250c      	movcc	r5, #12
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	4607      	mov	r7, r0
 8003efe:	db01      	blt.n	8003f04 <_malloc_r+0x1c>
 8003f00:	42a9      	cmp	r1, r5
 8003f02:	d905      	bls.n	8003f10 <_malloc_r+0x28>
 8003f04:	230c      	movs	r3, #12
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	2600      	movs	r6, #0
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f10:	4e2e      	ldr	r6, [pc, #184]	; (8003fcc <_malloc_r+0xe4>)
 8003f12:	f000 f919 	bl	8004148 <__malloc_lock>
 8003f16:	6833      	ldr	r3, [r6, #0]
 8003f18:	461c      	mov	r4, r3
 8003f1a:	bb34      	cbnz	r4, 8003f6a <_malloc_r+0x82>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7ff ffc2 	bl	8003ea8 <sbrk_aligned>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	4604      	mov	r4, r0
 8003f28:	d14d      	bne.n	8003fc6 <_malloc_r+0xde>
 8003f2a:	6834      	ldr	r4, [r6, #0]
 8003f2c:	4626      	mov	r6, r4
 8003f2e:	2e00      	cmp	r6, #0
 8003f30:	d140      	bne.n	8003fb4 <_malloc_r+0xcc>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	4631      	mov	r1, r6
 8003f36:	4638      	mov	r0, r7
 8003f38:	eb04 0803 	add.w	r8, r4, r3
 8003f3c:	f000 f848 	bl	8003fd0 <_sbrk_r>
 8003f40:	4580      	cmp	r8, r0
 8003f42:	d13a      	bne.n	8003fba <_malloc_r+0xd2>
 8003f44:	6821      	ldr	r1, [r4, #0]
 8003f46:	3503      	adds	r5, #3
 8003f48:	1a6d      	subs	r5, r5, r1
 8003f4a:	f025 0503 	bic.w	r5, r5, #3
 8003f4e:	3508      	adds	r5, #8
 8003f50:	2d0c      	cmp	r5, #12
 8003f52:	bf38      	it	cc
 8003f54:	250c      	movcc	r5, #12
 8003f56:	4629      	mov	r1, r5
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7ff ffa5 	bl	8003ea8 <sbrk_aligned>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d02b      	beq.n	8003fba <_malloc_r+0xd2>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	442b      	add	r3, r5
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	e00e      	b.n	8003f88 <_malloc_r+0xa0>
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	1b52      	subs	r2, r2, r5
 8003f6e:	d41e      	bmi.n	8003fae <_malloc_r+0xc6>
 8003f70:	2a0b      	cmp	r2, #11
 8003f72:	d916      	bls.n	8003fa2 <_malloc_r+0xba>
 8003f74:	1961      	adds	r1, r4, r5
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	6025      	str	r5, [r4, #0]
 8003f7a:	bf18      	it	ne
 8003f7c:	6059      	strne	r1, [r3, #4]
 8003f7e:	6863      	ldr	r3, [r4, #4]
 8003f80:	bf08      	it	eq
 8003f82:	6031      	streq	r1, [r6, #0]
 8003f84:	5162      	str	r2, [r4, r5]
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f104 060b 	add.w	r6, r4, #11
 8003f8e:	f000 f8e1 	bl	8004154 <__malloc_unlock>
 8003f92:	f026 0607 	bic.w	r6, r6, #7
 8003f96:	1d23      	adds	r3, r4, #4
 8003f98:	1af2      	subs	r2, r6, r3
 8003f9a:	d0b6      	beq.n	8003f0a <_malloc_r+0x22>
 8003f9c:	1b9b      	subs	r3, r3, r6
 8003f9e:	50a3      	str	r3, [r4, r2]
 8003fa0:	e7b3      	b.n	8003f0a <_malloc_r+0x22>
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	bf0c      	ite	eq
 8003fa8:	6032      	streq	r2, [r6, #0]
 8003faa:	605a      	strne	r2, [r3, #4]
 8003fac:	e7ec      	b.n	8003f88 <_malloc_r+0xa0>
 8003fae:	4623      	mov	r3, r4
 8003fb0:	6864      	ldr	r4, [r4, #4]
 8003fb2:	e7b2      	b.n	8003f1a <_malloc_r+0x32>
 8003fb4:	4634      	mov	r4, r6
 8003fb6:	6876      	ldr	r6, [r6, #4]
 8003fb8:	e7b9      	b.n	8003f2e <_malloc_r+0x46>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f000 f8c8 	bl	8004154 <__malloc_unlock>
 8003fc4:	e7a1      	b.n	8003f0a <_malloc_r+0x22>
 8003fc6:	6025      	str	r5, [r4, #0]
 8003fc8:	e7de      	b.n	8003f88 <_malloc_r+0xa0>
 8003fca:	bf00      	nop
 8003fcc:	20000214 	.word	0x20000214

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d06      	ldr	r5, [pc, #24]	; (8003fec <_sbrk_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc ff06 	bl	8000dec <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	2000021c 	.word	0x2000021c

08003ff0 <siprintf>:
 8003ff0:	b40e      	push	{r1, r2, r3}
 8003ff2:	b500      	push	{lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ff8:	9002      	str	r0, [sp, #8]
 8003ffa:	9006      	str	r0, [sp, #24]
 8003ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004000:	4809      	ldr	r0, [pc, #36]	; (8004028 <siprintf+0x38>)
 8004002:	9107      	str	r1, [sp, #28]
 8004004:	9104      	str	r1, [sp, #16]
 8004006:	4909      	ldr	r1, [pc, #36]	; (800402c <siprintf+0x3c>)
 8004008:	f853 2b04 	ldr.w	r2, [r3], #4
 800400c:	9105      	str	r1, [sp, #20]
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	a902      	add	r1, sp, #8
 8004014:	f000 f900 	bl	8004218 <_svfiprintf_r>
 8004018:	9b02      	ldr	r3, [sp, #8]
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	b01c      	add	sp, #112	; 0x70
 8004020:	f85d eb04 	ldr.w	lr, [sp], #4
 8004024:	b003      	add	sp, #12
 8004026:	4770      	bx	lr
 8004028:	20000054 	.word	0x20000054
 800402c:	ffff0208 	.word	0xffff0208

08004030 <_strtol_l.constprop.0>:
 8004030:	2b01      	cmp	r3, #1
 8004032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004036:	d001      	beq.n	800403c <_strtol_l.constprop.0+0xc>
 8004038:	2b24      	cmp	r3, #36	; 0x24
 800403a:	d906      	bls.n	800404a <_strtol_l.constprop.0+0x1a>
 800403c:	f7ff feb6 	bl	8003dac <__errno>
 8004040:	2316      	movs	r3, #22
 8004042:	6003      	str	r3, [r0, #0]
 8004044:	2000      	movs	r0, #0
 8004046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800404a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004130 <_strtol_l.constprop.0+0x100>
 800404e:	460d      	mov	r5, r1
 8004050:	462e      	mov	r6, r5
 8004052:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004056:	f814 700c 	ldrb.w	r7, [r4, ip]
 800405a:	f017 0708 	ands.w	r7, r7, #8
 800405e:	d1f7      	bne.n	8004050 <_strtol_l.constprop.0+0x20>
 8004060:	2c2d      	cmp	r4, #45	; 0x2d
 8004062:	d132      	bne.n	80040ca <_strtol_l.constprop.0+0x9a>
 8004064:	782c      	ldrb	r4, [r5, #0]
 8004066:	2701      	movs	r7, #1
 8004068:	1cb5      	adds	r5, r6, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05b      	beq.n	8004126 <_strtol_l.constprop.0+0xf6>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d109      	bne.n	8004086 <_strtol_l.constprop.0+0x56>
 8004072:	2c30      	cmp	r4, #48	; 0x30
 8004074:	d107      	bne.n	8004086 <_strtol_l.constprop.0+0x56>
 8004076:	782c      	ldrb	r4, [r5, #0]
 8004078:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800407c:	2c58      	cmp	r4, #88	; 0x58
 800407e:	d14d      	bne.n	800411c <_strtol_l.constprop.0+0xec>
 8004080:	786c      	ldrb	r4, [r5, #1]
 8004082:	2310      	movs	r3, #16
 8004084:	3502      	adds	r5, #2
 8004086:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800408a:	f108 38ff 	add.w	r8, r8, #4294967295
 800408e:	f04f 0c00 	mov.w	ip, #0
 8004092:	fbb8 f9f3 	udiv	r9, r8, r3
 8004096:	4666      	mov	r6, ip
 8004098:	fb03 8a19 	mls	sl, r3, r9, r8
 800409c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80040a0:	f1be 0f09 	cmp.w	lr, #9
 80040a4:	d816      	bhi.n	80040d4 <_strtol_l.constprop.0+0xa4>
 80040a6:	4674      	mov	r4, lr
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	dd24      	ble.n	80040f6 <_strtol_l.constprop.0+0xc6>
 80040ac:	f1bc 0f00 	cmp.w	ip, #0
 80040b0:	db1e      	blt.n	80040f0 <_strtol_l.constprop.0+0xc0>
 80040b2:	45b1      	cmp	r9, r6
 80040b4:	d31c      	bcc.n	80040f0 <_strtol_l.constprop.0+0xc0>
 80040b6:	d101      	bne.n	80040bc <_strtol_l.constprop.0+0x8c>
 80040b8:	45a2      	cmp	sl, r4
 80040ba:	db19      	blt.n	80040f0 <_strtol_l.constprop.0+0xc0>
 80040bc:	fb06 4603 	mla	r6, r6, r3, r4
 80040c0:	f04f 0c01 	mov.w	ip, #1
 80040c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040c8:	e7e8      	b.n	800409c <_strtol_l.constprop.0+0x6c>
 80040ca:	2c2b      	cmp	r4, #43	; 0x2b
 80040cc:	bf04      	itt	eq
 80040ce:	782c      	ldrbeq	r4, [r5, #0]
 80040d0:	1cb5      	addeq	r5, r6, #2
 80040d2:	e7ca      	b.n	800406a <_strtol_l.constprop.0+0x3a>
 80040d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80040d8:	f1be 0f19 	cmp.w	lr, #25
 80040dc:	d801      	bhi.n	80040e2 <_strtol_l.constprop.0+0xb2>
 80040de:	3c37      	subs	r4, #55	; 0x37
 80040e0:	e7e2      	b.n	80040a8 <_strtol_l.constprop.0+0x78>
 80040e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80040e6:	f1be 0f19 	cmp.w	lr, #25
 80040ea:	d804      	bhi.n	80040f6 <_strtol_l.constprop.0+0xc6>
 80040ec:	3c57      	subs	r4, #87	; 0x57
 80040ee:	e7db      	b.n	80040a8 <_strtol_l.constprop.0+0x78>
 80040f0:	f04f 3cff 	mov.w	ip, #4294967295
 80040f4:	e7e6      	b.n	80040c4 <_strtol_l.constprop.0+0x94>
 80040f6:	f1bc 0f00 	cmp.w	ip, #0
 80040fa:	da05      	bge.n	8004108 <_strtol_l.constprop.0+0xd8>
 80040fc:	2322      	movs	r3, #34	; 0x22
 80040fe:	6003      	str	r3, [r0, #0]
 8004100:	4646      	mov	r6, r8
 8004102:	b942      	cbnz	r2, 8004116 <_strtol_l.constprop.0+0xe6>
 8004104:	4630      	mov	r0, r6
 8004106:	e79e      	b.n	8004046 <_strtol_l.constprop.0+0x16>
 8004108:	b107      	cbz	r7, 800410c <_strtol_l.constprop.0+0xdc>
 800410a:	4276      	negs	r6, r6
 800410c:	2a00      	cmp	r2, #0
 800410e:	d0f9      	beq.n	8004104 <_strtol_l.constprop.0+0xd4>
 8004110:	f1bc 0f00 	cmp.w	ip, #0
 8004114:	d000      	beq.n	8004118 <_strtol_l.constprop.0+0xe8>
 8004116:	1e69      	subs	r1, r5, #1
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	e7f3      	b.n	8004104 <_strtol_l.constprop.0+0xd4>
 800411c:	2430      	movs	r4, #48	; 0x30
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1b1      	bne.n	8004086 <_strtol_l.constprop.0+0x56>
 8004122:	2308      	movs	r3, #8
 8004124:	e7af      	b.n	8004086 <_strtol_l.constprop.0+0x56>
 8004126:	2c30      	cmp	r4, #48	; 0x30
 8004128:	d0a5      	beq.n	8004076 <_strtol_l.constprop.0+0x46>
 800412a:	230a      	movs	r3, #10
 800412c:	e7ab      	b.n	8004086 <_strtol_l.constprop.0+0x56>
 800412e:	bf00      	nop
 8004130:	08004955 	.word	0x08004955

08004134 <strtol>:
 8004134:	4613      	mov	r3, r2
 8004136:	460a      	mov	r2, r1
 8004138:	4601      	mov	r1, r0
 800413a:	4802      	ldr	r0, [pc, #8]	; (8004144 <strtol+0x10>)
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f7ff bf77 	b.w	8004030 <_strtol_l.constprop.0>
 8004142:	bf00      	nop
 8004144:	20000054 	.word	0x20000054

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_lock+0x8>)
 800414a:	f000 baf9 	b.w	8004740 <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	20000220 	.word	0x20000220

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_unlock+0x8>)
 8004156:	f000 baf4 	b.w	8004742 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	20000220 	.word	0x20000220

08004160 <__ssputs_r>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	429e      	cmp	r6, r3
 8004168:	4682      	mov	sl, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4690      	mov	r8, r2
 800416e:	461f      	mov	r7, r3
 8004170:	d838      	bhi.n	80041e4 <__ssputs_r+0x84>
 8004172:	898a      	ldrh	r2, [r1, #12]
 8004174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004178:	d032      	beq.n	80041e0 <__ssputs_r+0x80>
 800417a:	6825      	ldr	r5, [r4, #0]
 800417c:	6909      	ldr	r1, [r1, #16]
 800417e:	eba5 0901 	sub.w	r9, r5, r1
 8004182:	6965      	ldr	r5, [r4, #20]
 8004184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800418c:	3301      	adds	r3, #1
 800418e:	444b      	add	r3, r9
 8004190:	106d      	asrs	r5, r5, #1
 8004192:	429d      	cmp	r5, r3
 8004194:	bf38      	it	cc
 8004196:	461d      	movcc	r5, r3
 8004198:	0553      	lsls	r3, r2, #21
 800419a:	d531      	bpl.n	8004200 <__ssputs_r+0xa0>
 800419c:	4629      	mov	r1, r5
 800419e:	f7ff fea3 	bl	8003ee8 <_malloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	b950      	cbnz	r0, 80041bc <__ssputs_r+0x5c>
 80041a6:	230c      	movs	r3, #12
 80041a8:	f8ca 3000 	str.w	r3, [sl]
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041bc:	6921      	ldr	r1, [r4, #16]
 80041be:	464a      	mov	r2, r9
 80041c0:	f000 fac0 	bl	8004744 <memcpy>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	6126      	str	r6, [r4, #16]
 80041d2:	6165      	str	r5, [r4, #20]
 80041d4:	444e      	add	r6, r9
 80041d6:	eba5 0509 	sub.w	r5, r5, r9
 80041da:	6026      	str	r6, [r4, #0]
 80041dc:	60a5      	str	r5, [r4, #8]
 80041de:	463e      	mov	r6, r7
 80041e0:	42be      	cmp	r6, r7
 80041e2:	d900      	bls.n	80041e6 <__ssputs_r+0x86>
 80041e4:	463e      	mov	r6, r7
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	4632      	mov	r2, r6
 80041ea:	4641      	mov	r1, r8
 80041ec:	f000 fab8 	bl	8004760 <memmove>
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	1b9b      	subs	r3, r3, r6
 80041f4:	60a3      	str	r3, [r4, #8]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	4433      	add	r3, r6
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	2000      	movs	r0, #0
 80041fe:	e7db      	b.n	80041b8 <__ssputs_r+0x58>
 8004200:	462a      	mov	r2, r5
 8004202:	f000 fac7 	bl	8004794 <_realloc_r>
 8004206:	4606      	mov	r6, r0
 8004208:	2800      	cmp	r0, #0
 800420a:	d1e1      	bne.n	80041d0 <__ssputs_r+0x70>
 800420c:	6921      	ldr	r1, [r4, #16]
 800420e:	4650      	mov	r0, sl
 8004210:	f7ff fdfe 	bl	8003e10 <_free_r>
 8004214:	e7c7      	b.n	80041a6 <__ssputs_r+0x46>
	...

08004218 <_svfiprintf_r>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	4698      	mov	r8, r3
 800421e:	898b      	ldrh	r3, [r1, #12]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	b09d      	sub	sp, #116	; 0x74
 8004224:	4607      	mov	r7, r0
 8004226:	460d      	mov	r5, r1
 8004228:	4614      	mov	r4, r2
 800422a:	d50e      	bpl.n	800424a <_svfiprintf_r+0x32>
 800422c:	690b      	ldr	r3, [r1, #16]
 800422e:	b963      	cbnz	r3, 800424a <_svfiprintf_r+0x32>
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	f7ff fe59 	bl	8003ee8 <_malloc_r>
 8004236:	6028      	str	r0, [r5, #0]
 8004238:	6128      	str	r0, [r5, #16]
 800423a:	b920      	cbnz	r0, 8004246 <_svfiprintf_r+0x2e>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e0d1      	b.n	80043ea <_svfiprintf_r+0x1d2>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	616b      	str	r3, [r5, #20]
 800424a:	2300      	movs	r3, #0
 800424c:	9309      	str	r3, [sp, #36]	; 0x24
 800424e:	2320      	movs	r3, #32
 8004250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004254:	f8cd 800c 	str.w	r8, [sp, #12]
 8004258:	2330      	movs	r3, #48	; 0x30
 800425a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004404 <_svfiprintf_r+0x1ec>
 800425e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004262:	f04f 0901 	mov.w	r9, #1
 8004266:	4623      	mov	r3, r4
 8004268:	469a      	mov	sl, r3
 800426a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426e:	b10a      	cbz	r2, 8004274 <_svfiprintf_r+0x5c>
 8004270:	2a25      	cmp	r2, #37	; 0x25
 8004272:	d1f9      	bne.n	8004268 <_svfiprintf_r+0x50>
 8004274:	ebba 0b04 	subs.w	fp, sl, r4
 8004278:	d00b      	beq.n	8004292 <_svfiprintf_r+0x7a>
 800427a:	465b      	mov	r3, fp
 800427c:	4622      	mov	r2, r4
 800427e:	4629      	mov	r1, r5
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff ff6d 	bl	8004160 <__ssputs_r>
 8004286:	3001      	adds	r0, #1
 8004288:	f000 80aa 	beq.w	80043e0 <_svfiprintf_r+0x1c8>
 800428c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428e:	445a      	add	r2, fp
 8004290:	9209      	str	r2, [sp, #36]	; 0x24
 8004292:	f89a 3000 	ldrb.w	r3, [sl]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80a2 	beq.w	80043e0 <_svfiprintf_r+0x1c8>
 800429c:	2300      	movs	r3, #0
 800429e:	f04f 32ff 	mov.w	r2, #4294967295
 80042a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a6:	f10a 0a01 	add.w	sl, sl, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b2:	931a      	str	r3, [sp, #104]	; 0x68
 80042b4:	4654      	mov	r4, sl
 80042b6:	2205      	movs	r2, #5
 80042b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042bc:	4851      	ldr	r0, [pc, #324]	; (8004404 <_svfiprintf_r+0x1ec>)
 80042be:	f7fb ff97 	bl	80001f0 <memchr>
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	b9d8      	cbnz	r0, 80042fe <_svfiprintf_r+0xe6>
 80042c6:	06d0      	lsls	r0, r2, #27
 80042c8:	bf44      	itt	mi
 80042ca:	2320      	movmi	r3, #32
 80042cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d0:	0711      	lsls	r1, r2, #28
 80042d2:	bf44      	itt	mi
 80042d4:	232b      	movmi	r3, #43	; 0x2b
 80042d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b2a      	cmp	r3, #42	; 0x2a
 80042e0:	d015      	beq.n	800430e <_svfiprintf_r+0xf6>
 80042e2:	9a07      	ldr	r2, [sp, #28]
 80042e4:	4654      	mov	r4, sl
 80042e6:	2000      	movs	r0, #0
 80042e8:	f04f 0c0a 	mov.w	ip, #10
 80042ec:	4621      	mov	r1, r4
 80042ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f2:	3b30      	subs	r3, #48	; 0x30
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d94e      	bls.n	8004396 <_svfiprintf_r+0x17e>
 80042f8:	b1b0      	cbz	r0, 8004328 <_svfiprintf_r+0x110>
 80042fa:	9207      	str	r2, [sp, #28]
 80042fc:	e014      	b.n	8004328 <_svfiprintf_r+0x110>
 80042fe:	eba0 0308 	sub.w	r3, r0, r8
 8004302:	fa09 f303 	lsl.w	r3, r9, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	46a2      	mov	sl, r4
 800430c:	e7d2      	b.n	80042b4 <_svfiprintf_r+0x9c>
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	1d19      	adds	r1, r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfbb      	ittet	lt
 800431a:	425b      	neglt	r3, r3
 800431c:	f042 0202 	orrlt.w	r2, r2, #2
 8004320:	9307      	strge	r3, [sp, #28]
 8004322:	9307      	strlt	r3, [sp, #28]
 8004324:	bfb8      	it	lt
 8004326:	9204      	strlt	r2, [sp, #16]
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	2b2e      	cmp	r3, #46	; 0x2e
 800432c:	d10c      	bne.n	8004348 <_svfiprintf_r+0x130>
 800432e:	7863      	ldrb	r3, [r4, #1]
 8004330:	2b2a      	cmp	r3, #42	; 0x2a
 8004332:	d135      	bne.n	80043a0 <_svfiprintf_r+0x188>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	9203      	str	r2, [sp, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfb8      	it	lt
 8004340:	f04f 33ff 	movlt.w	r3, #4294967295
 8004344:	3402      	adds	r4, #2
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004414 <_svfiprintf_r+0x1fc>
 800434c:	7821      	ldrb	r1, [r4, #0]
 800434e:	2203      	movs	r2, #3
 8004350:	4650      	mov	r0, sl
 8004352:	f7fb ff4d 	bl	80001f0 <memchr>
 8004356:	b140      	cbz	r0, 800436a <_svfiprintf_r+0x152>
 8004358:	2340      	movs	r3, #64	; 0x40
 800435a:	eba0 000a 	sub.w	r0, r0, sl
 800435e:	fa03 f000 	lsl.w	r0, r3, r0
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	4303      	orrs	r3, r0
 8004366:	3401      	adds	r4, #1
 8004368:	9304      	str	r3, [sp, #16]
 800436a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436e:	4826      	ldr	r0, [pc, #152]	; (8004408 <_svfiprintf_r+0x1f0>)
 8004370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004374:	2206      	movs	r2, #6
 8004376:	f7fb ff3b 	bl	80001f0 <memchr>
 800437a:	2800      	cmp	r0, #0
 800437c:	d038      	beq.n	80043f0 <_svfiprintf_r+0x1d8>
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <_svfiprintf_r+0x1f4>)
 8004380:	bb1b      	cbnz	r3, 80043ca <_svfiprintf_r+0x1b2>
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	3307      	adds	r3, #7
 8004386:	f023 0307 	bic.w	r3, r3, #7
 800438a:	3308      	adds	r3, #8
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004390:	4433      	add	r3, r6
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	e767      	b.n	8004266 <_svfiprintf_r+0x4e>
 8004396:	fb0c 3202 	mla	r2, ip, r2, r3
 800439a:	460c      	mov	r4, r1
 800439c:	2001      	movs	r0, #1
 800439e:	e7a5      	b.n	80042ec <_svfiprintf_r+0xd4>
 80043a0:	2300      	movs	r3, #0
 80043a2:	3401      	adds	r4, #1
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	4619      	mov	r1, r3
 80043a8:	f04f 0c0a 	mov.w	ip, #10
 80043ac:	4620      	mov	r0, r4
 80043ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b2:	3a30      	subs	r2, #48	; 0x30
 80043b4:	2a09      	cmp	r2, #9
 80043b6:	d903      	bls.n	80043c0 <_svfiprintf_r+0x1a8>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0c5      	beq.n	8004348 <_svfiprintf_r+0x130>
 80043bc:	9105      	str	r1, [sp, #20]
 80043be:	e7c3      	b.n	8004348 <_svfiprintf_r+0x130>
 80043c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c4:	4604      	mov	r4, r0
 80043c6:	2301      	movs	r3, #1
 80043c8:	e7f0      	b.n	80043ac <_svfiprintf_r+0x194>
 80043ca:	ab03      	add	r3, sp, #12
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	462a      	mov	r2, r5
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <_svfiprintf_r+0x1f8>)
 80043d2:	a904      	add	r1, sp, #16
 80043d4:	4638      	mov	r0, r7
 80043d6:	f3af 8000 	nop.w
 80043da:	1c42      	adds	r2, r0, #1
 80043dc:	4606      	mov	r6, r0
 80043de:	d1d6      	bne.n	800438e <_svfiprintf_r+0x176>
 80043e0:	89ab      	ldrh	r3, [r5, #12]
 80043e2:	065b      	lsls	r3, r3, #25
 80043e4:	f53f af2c 	bmi.w	8004240 <_svfiprintf_r+0x28>
 80043e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ea:	b01d      	add	sp, #116	; 0x74
 80043ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f0:	ab03      	add	r3, sp, #12
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	462a      	mov	r2, r5
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <_svfiprintf_r+0x1f8>)
 80043f8:	a904      	add	r1, sp, #16
 80043fa:	4638      	mov	r0, r7
 80043fc:	f000 f87a 	bl	80044f4 <_printf_i>
 8004400:	e7eb      	b.n	80043da <_svfiprintf_r+0x1c2>
 8004402:	bf00      	nop
 8004404:	08004a55 	.word	0x08004a55
 8004408:	08004a5f 	.word	0x08004a5f
 800440c:	00000000 	.word	0x00000000
 8004410:	08004161 	.word	0x08004161
 8004414:	08004a5b 	.word	0x08004a5b

08004418 <_printf_common>:
 8004418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	4616      	mov	r6, r2
 800441e:	4699      	mov	r9, r3
 8004420:	688a      	ldr	r2, [r1, #8]
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004428:	4293      	cmp	r3, r2
 800442a:	bfb8      	it	lt
 800442c:	4613      	movlt	r3, r2
 800442e:	6033      	str	r3, [r6, #0]
 8004430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004434:	4607      	mov	r7, r0
 8004436:	460c      	mov	r4, r1
 8004438:	b10a      	cbz	r2, 800443e <_printf_common+0x26>
 800443a:	3301      	adds	r3, #1
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	0699      	lsls	r1, r3, #26
 8004442:	bf42      	ittt	mi
 8004444:	6833      	ldrmi	r3, [r6, #0]
 8004446:	3302      	addmi	r3, #2
 8004448:	6033      	strmi	r3, [r6, #0]
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	f015 0506 	ands.w	r5, r5, #6
 8004450:	d106      	bne.n	8004460 <_printf_common+0x48>
 8004452:	f104 0a19 	add.w	sl, r4, #25
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	6832      	ldr	r2, [r6, #0]
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	42ab      	cmp	r3, r5
 800445e:	dc26      	bgt.n	80044ae <_printf_common+0x96>
 8004460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004464:	1e13      	subs	r3, r2, #0
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	2301      	movne	r3, #1
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d42b      	bmi.n	80044c8 <_printf_common+0xb0>
 8004470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004474:	4649      	mov	r1, r9
 8004476:	4638      	mov	r0, r7
 8004478:	47c0      	blx	r8
 800447a:	3001      	adds	r0, #1
 800447c:	d01e      	beq.n	80044bc <_printf_common+0xa4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	68e5      	ldr	r5, [r4, #12]
 8004482:	6832      	ldr	r2, [r6, #0]
 8004484:	f003 0306 	and.w	r3, r3, #6
 8004488:	2b04      	cmp	r3, #4
 800448a:	bf08      	it	eq
 800448c:	1aad      	subeq	r5, r5, r2
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	bf0c      	ite	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	2500      	movne	r5, #0
 800449a:	4293      	cmp	r3, r2
 800449c:	bfc4      	itt	gt
 800449e:	1a9b      	subgt	r3, r3, r2
 80044a0:	18ed      	addgt	r5, r5, r3
 80044a2:	2600      	movs	r6, #0
 80044a4:	341a      	adds	r4, #26
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d11a      	bne.n	80044e0 <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e008      	b.n	80044c0 <_printf_common+0xa8>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4652      	mov	r2, sl
 80044b2:	4649      	mov	r1, r9
 80044b4:	4638      	mov	r0, r7
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d103      	bne.n	80044c4 <_printf_common+0xac>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c4:	3501      	adds	r5, #1
 80044c6:	e7c6      	b.n	8004456 <_printf_common+0x3e>
 80044c8:	18e1      	adds	r1, r4, r3
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	2030      	movs	r0, #48	; 0x30
 80044ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044d2:	4422      	add	r2, r4
 80044d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044dc:	3302      	adds	r3, #2
 80044de:	e7c7      	b.n	8004470 <_printf_common+0x58>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4622      	mov	r2, r4
 80044e4:	4649      	mov	r1, r9
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0e6      	beq.n	80044bc <_printf_common+0xa4>
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7d9      	b.n	80044a6 <_printf_common+0x8e>
	...

080044f4 <_printf_i>:
 80044f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	7e0f      	ldrb	r7, [r1, #24]
 80044fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044fc:	2f78      	cmp	r7, #120	; 0x78
 80044fe:	4691      	mov	r9, r2
 8004500:	4680      	mov	r8, r0
 8004502:	460c      	mov	r4, r1
 8004504:	469a      	mov	sl, r3
 8004506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800450a:	d807      	bhi.n	800451c <_printf_i+0x28>
 800450c:	2f62      	cmp	r7, #98	; 0x62
 800450e:	d80a      	bhi.n	8004526 <_printf_i+0x32>
 8004510:	2f00      	cmp	r7, #0
 8004512:	f000 80d8 	beq.w	80046c6 <_printf_i+0x1d2>
 8004516:	2f58      	cmp	r7, #88	; 0x58
 8004518:	f000 80a3 	beq.w	8004662 <_printf_i+0x16e>
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004524:	e03a      	b.n	800459c <_printf_i+0xa8>
 8004526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800452a:	2b15      	cmp	r3, #21
 800452c:	d8f6      	bhi.n	800451c <_printf_i+0x28>
 800452e:	a101      	add	r1, pc, #4	; (adr r1, 8004534 <_printf_i+0x40>)
 8004530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004534:	0800458d 	.word	0x0800458d
 8004538:	080045a1 	.word	0x080045a1
 800453c:	0800451d 	.word	0x0800451d
 8004540:	0800451d 	.word	0x0800451d
 8004544:	0800451d 	.word	0x0800451d
 8004548:	0800451d 	.word	0x0800451d
 800454c:	080045a1 	.word	0x080045a1
 8004550:	0800451d 	.word	0x0800451d
 8004554:	0800451d 	.word	0x0800451d
 8004558:	0800451d 	.word	0x0800451d
 800455c:	0800451d 	.word	0x0800451d
 8004560:	080046ad 	.word	0x080046ad
 8004564:	080045d1 	.word	0x080045d1
 8004568:	0800468f 	.word	0x0800468f
 800456c:	0800451d 	.word	0x0800451d
 8004570:	0800451d 	.word	0x0800451d
 8004574:	080046cf 	.word	0x080046cf
 8004578:	0800451d 	.word	0x0800451d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800451d 	.word	0x0800451d
 8004584:	0800451d 	.word	0x0800451d
 8004588:	08004697 	.word	0x08004697
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800459c:	2301      	movs	r3, #1
 800459e:	e0a3      	b.n	80046e8 <_printf_i+0x1f4>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	0606      	lsls	r6, r0, #24
 80045a6:	f101 0304 	add.w	r3, r1, #4
 80045aa:	d50a      	bpl.n	80045c2 <_printf_i+0xce>
 80045ac:	680e      	ldr	r6, [r1, #0]
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	da03      	bge.n	80045bc <_printf_i+0xc8>
 80045b4:	232d      	movs	r3, #45	; 0x2d
 80045b6:	4276      	negs	r6, r6
 80045b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045bc:	485e      	ldr	r0, [pc, #376]	; (8004738 <_printf_i+0x244>)
 80045be:	230a      	movs	r3, #10
 80045c0:	e019      	b.n	80045f6 <_printf_i+0x102>
 80045c2:	680e      	ldr	r6, [r1, #0]
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ca:	bf18      	it	ne
 80045cc:	b236      	sxthne	r6, r6
 80045ce:	e7ef      	b.n	80045b0 <_printf_i+0xbc>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6029      	str	r1, [r5, #0]
 80045d8:	0601      	lsls	r1, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xec>
 80045dc:	681e      	ldr	r6, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0xf2>
 80045e0:	0646      	lsls	r6, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xe8>
 80045e4:	881e      	ldrh	r6, [r3, #0]
 80045e6:	4854      	ldr	r0, [pc, #336]	; (8004738 <_printf_i+0x244>)
 80045e8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ea:	bf0c      	ite	eq
 80045ec:	2308      	moveq	r3, #8
 80045ee:	230a      	movne	r3, #10
 80045f0:	2100      	movs	r1, #0
 80045f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f6:	6865      	ldr	r5, [r4, #4]
 80045f8:	60a5      	str	r5, [r4, #8]
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	bfa2      	ittt	ge
 80045fe:	6821      	ldrge	r1, [r4, #0]
 8004600:	f021 0104 	bicge.w	r1, r1, #4
 8004604:	6021      	strge	r1, [r4, #0]
 8004606:	b90e      	cbnz	r6, 800460c <_printf_i+0x118>
 8004608:	2d00      	cmp	r5, #0
 800460a:	d04d      	beq.n	80046a8 <_printf_i+0x1b4>
 800460c:	4615      	mov	r5, r2
 800460e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004612:	fb03 6711 	mls	r7, r3, r1, r6
 8004616:	5dc7      	ldrb	r7, [r0, r7]
 8004618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800461c:	4637      	mov	r7, r6
 800461e:	42bb      	cmp	r3, r7
 8004620:	460e      	mov	r6, r1
 8004622:	d9f4      	bls.n	800460e <_printf_i+0x11a>
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10b      	bne.n	8004640 <_printf_i+0x14c>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07de      	lsls	r6, r3, #31
 800462c:	d508      	bpl.n	8004640 <_printf_i+0x14c>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	4299      	cmp	r1, r3
 8004634:	bfde      	ittt	le
 8004636:	2330      	movle	r3, #48	; 0x30
 8004638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800463c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004640:	1b52      	subs	r2, r2, r5
 8004642:	6122      	str	r2, [r4, #16]
 8004644:	f8cd a000 	str.w	sl, [sp]
 8004648:	464b      	mov	r3, r9
 800464a:	aa03      	add	r2, sp, #12
 800464c:	4621      	mov	r1, r4
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff fee2 	bl	8004418 <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	d14c      	bne.n	80046f2 <_printf_i+0x1fe>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	b004      	add	sp, #16
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	4835      	ldr	r0, [pc, #212]	; (8004738 <_printf_i+0x244>)
 8004664:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	6029      	str	r1, [r5, #0]
 8004672:	061d      	lsls	r5, r3, #24
 8004674:	d514      	bpl.n	80046a0 <_printf_i+0x1ac>
 8004676:	07df      	lsls	r7, r3, #31
 8004678:	bf44      	itt	mi
 800467a:	f043 0320 	orrmi.w	r3, r3, #32
 800467e:	6023      	strmi	r3, [r4, #0]
 8004680:	b91e      	cbnz	r6, 800468a <_printf_i+0x196>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	f023 0320 	bic.w	r3, r3, #32
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	2310      	movs	r3, #16
 800468c:	e7b0      	b.n	80045f0 <_printf_i+0xfc>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	2378      	movs	r3, #120	; 0x78
 8004698:	4828      	ldr	r0, [pc, #160]	; (800473c <_printf_i+0x248>)
 800469a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469e:	e7e3      	b.n	8004668 <_printf_i+0x174>
 80046a0:	0659      	lsls	r1, r3, #25
 80046a2:	bf48      	it	mi
 80046a4:	b2b6      	uxthmi	r6, r6
 80046a6:	e7e6      	b.n	8004676 <_printf_i+0x182>
 80046a8:	4615      	mov	r5, r2
 80046aa:	e7bb      	b.n	8004624 <_printf_i+0x130>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	6826      	ldr	r6, [r4, #0]
 80046b0:	6961      	ldr	r1, [r4, #20]
 80046b2:	1d18      	adds	r0, r3, #4
 80046b4:	6028      	str	r0, [r5, #0]
 80046b6:	0635      	lsls	r5, r6, #24
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0x1cc>
 80046bc:	6019      	str	r1, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0x1d2>
 80046c0:	0670      	lsls	r0, r6, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0x1c8>
 80046c4:	8019      	strh	r1, [r3, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	4615      	mov	r5, r2
 80046cc:	e7ba      	b.n	8004644 <_printf_i+0x150>
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	1d1a      	adds	r2, r3, #4
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	6862      	ldr	r2, [r4, #4]
 80046d8:	2100      	movs	r1, #0
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fb fd88 	bl	80001f0 <memchr>
 80046e0:	b108      	cbz	r0, 80046e6 <_printf_i+0x1f2>
 80046e2:	1b40      	subs	r0, r0, r5
 80046e4:	6060      	str	r0, [r4, #4]
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	6123      	str	r3, [r4, #16]
 80046ea:	2300      	movs	r3, #0
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	e7a8      	b.n	8004644 <_printf_i+0x150>
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	462a      	mov	r2, r5
 80046f6:	4649      	mov	r1, r9
 80046f8:	4640      	mov	r0, r8
 80046fa:	47d0      	blx	sl
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0ab      	beq.n	8004658 <_printf_i+0x164>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	079b      	lsls	r3, r3, #30
 8004704:	d413      	bmi.n	800472e <_printf_i+0x23a>
 8004706:	68e0      	ldr	r0, [r4, #12]
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	4298      	cmp	r0, r3
 800470c:	bfb8      	it	lt
 800470e:	4618      	movlt	r0, r3
 8004710:	e7a4      	b.n	800465c <_printf_i+0x168>
 8004712:	2301      	movs	r3, #1
 8004714:	4632      	mov	r2, r6
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	47d0      	blx	sl
 800471c:	3001      	adds	r0, #1
 800471e:	d09b      	beq.n	8004658 <_printf_i+0x164>
 8004720:	3501      	adds	r5, #1
 8004722:	68e3      	ldr	r3, [r4, #12]
 8004724:	9903      	ldr	r1, [sp, #12]
 8004726:	1a5b      	subs	r3, r3, r1
 8004728:	42ab      	cmp	r3, r5
 800472a:	dcf2      	bgt.n	8004712 <_printf_i+0x21e>
 800472c:	e7eb      	b.n	8004706 <_printf_i+0x212>
 800472e:	2500      	movs	r5, #0
 8004730:	f104 0619 	add.w	r6, r4, #25
 8004734:	e7f5      	b.n	8004722 <_printf_i+0x22e>
 8004736:	bf00      	nop
 8004738:	08004a66 	.word	0x08004a66
 800473c:	08004a77 	.word	0x08004a77

08004740 <__retarget_lock_acquire_recursive>:
 8004740:	4770      	bx	lr

08004742 <__retarget_lock_release_recursive>:
 8004742:	4770      	bx	lr

08004744 <memcpy>:
 8004744:	440a      	add	r2, r1
 8004746:	4291      	cmp	r1, r2
 8004748:	f100 33ff 	add.w	r3, r0, #4294967295
 800474c:	d100      	bne.n	8004750 <memcpy+0xc>
 800474e:	4770      	bx	lr
 8004750:	b510      	push	{r4, lr}
 8004752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475a:	4291      	cmp	r1, r2
 800475c:	d1f9      	bne.n	8004752 <memcpy+0xe>
 800475e:	bd10      	pop	{r4, pc}

08004760 <memmove>:
 8004760:	4288      	cmp	r0, r1
 8004762:	b510      	push	{r4, lr}
 8004764:	eb01 0402 	add.w	r4, r1, r2
 8004768:	d902      	bls.n	8004770 <memmove+0x10>
 800476a:	4284      	cmp	r4, r0
 800476c:	4623      	mov	r3, r4
 800476e:	d807      	bhi.n	8004780 <memmove+0x20>
 8004770:	1e43      	subs	r3, r0, #1
 8004772:	42a1      	cmp	r1, r4
 8004774:	d008      	beq.n	8004788 <memmove+0x28>
 8004776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800477a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800477e:	e7f8      	b.n	8004772 <memmove+0x12>
 8004780:	4402      	add	r2, r0
 8004782:	4601      	mov	r1, r0
 8004784:	428a      	cmp	r2, r1
 8004786:	d100      	bne.n	800478a <memmove+0x2a>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800478e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004792:	e7f7      	b.n	8004784 <memmove+0x24>

08004794 <_realloc_r>:
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	4680      	mov	r8, r0
 800479a:	4614      	mov	r4, r2
 800479c:	460e      	mov	r6, r1
 800479e:	b921      	cbnz	r1, 80047aa <_realloc_r+0x16>
 80047a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	4611      	mov	r1, r2
 80047a6:	f7ff bb9f 	b.w	8003ee8 <_malloc_r>
 80047aa:	b92a      	cbnz	r2, 80047b8 <_realloc_r+0x24>
 80047ac:	f7ff fb30 	bl	8003e10 <_free_r>
 80047b0:	4625      	mov	r5, r4
 80047b2:	4628      	mov	r0, r5
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b8:	f000 f81b 	bl	80047f2 <_malloc_usable_size_r>
 80047bc:	4284      	cmp	r4, r0
 80047be:	4607      	mov	r7, r0
 80047c0:	d802      	bhi.n	80047c8 <_realloc_r+0x34>
 80047c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047c6:	d812      	bhi.n	80047ee <_realloc_r+0x5a>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7ff fb8c 	bl	8003ee8 <_malloc_r>
 80047d0:	4605      	mov	r5, r0
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d0ed      	beq.n	80047b2 <_realloc_r+0x1e>
 80047d6:	42bc      	cmp	r4, r7
 80047d8:	4622      	mov	r2, r4
 80047da:	4631      	mov	r1, r6
 80047dc:	bf28      	it	cs
 80047de:	463a      	movcs	r2, r7
 80047e0:	f7ff ffb0 	bl	8004744 <memcpy>
 80047e4:	4631      	mov	r1, r6
 80047e6:	4640      	mov	r0, r8
 80047e8:	f7ff fb12 	bl	8003e10 <_free_r>
 80047ec:	e7e1      	b.n	80047b2 <_realloc_r+0x1e>
 80047ee:	4635      	mov	r5, r6
 80047f0:	e7df      	b.n	80047b2 <_realloc_r+0x1e>

080047f2 <_malloc_usable_size_r>:
 80047f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f6:	1f18      	subs	r0, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bfbc      	itt	lt
 80047fc:	580b      	ldrlt	r3, [r1, r0]
 80047fe:	18c0      	addlt	r0, r0, r3
 8004800:	4770      	bx	lr
	...

08004804 <_init>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr

08004810 <_fini>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr
