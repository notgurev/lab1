
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          0000016c  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1db  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e6  00000000  00000000  0002f2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002378f  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010582  00000000  00000000  000567cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7093  00000000  00000000  00066d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dde4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ac4  00000000  00000000  0013de34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004830 	.word	0x08004830

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08004830 	.word	0x08004830

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Ringbuf_init+0x1c>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <Ringbuf_init+0x20>)
 800059c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Ringbuf_init+0x24>)
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <Ringbuf_init+0x28>)
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000168 	.word	0x20000168
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	2000016c 	.word	0x2000016c
 80005bc:	20000120 	.word	0x20000120

080005c0 <store_char>:



void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	3301      	adds	r3, #1
 80005d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d007      	beq.n	80005f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	79f9      	ldrb	r1, [r7, #7]
 80005ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <uart_read>:

/* checks, if the entered string is present in the giver buffer ?
 */

int uart_read(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <uart_read+0x4c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <uart_read+0x4c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	429a      	cmp	r2, r3
 8000614:	d102      	bne.n	800061c <uart_read+0x1c>
  {
    return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e010      	b.n	800063e <uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <uart_read+0x4c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <uart_read+0x4c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <uart_read+0x4c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000630:	1c5a      	adds	r2, r3, #1
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <uart_read+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800063a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800063c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000168 	.word	0x20000168

08000650 <uart_write>:

/* writes a single character to the uart and increments head
 */
void uart_write(int c)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db21      	blt.n	80006a2 <uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <uart_write+0x60>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	3301      	adds	r3, #1
 8000666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800066a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800066c:	bf00      	nop
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <uart_write+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	d0f9      	beq.n	800066e <uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <uart_write+0x60>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <uart_write+0x60>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	b2c9      	uxtb	r1, r1
 8000688:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <uart_write+0x60>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE); // Enable UART transmission interrupt
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <uart_write+0x64>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <uart_write+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006a0:	60da      	str	r2, [r3, #12]
	}
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	200001cc 	.word	0x200001cc

080006b8 <is_data_available>:

/* checks if the new data is available in the incoming buffer
 */
int is_data_available(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <is_data_available+0x2c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <is_data_available+0x2c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	3340      	adds	r3, #64	; 0x40
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000168 	.word	0x20000168

080006e8 <uart_sendstring>:

/* sends the string to the uart
 */
void uart_sendstring (const char *s)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	while(*s) uart_write(*s++);
 80006f0:	e006      	b.n	8000700 <uart_sendstring+0x18>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffa8 	bl	8000650 <uart_write>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f4      	bne.n	80006f2 <uart_sendstring+0xa>
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <uart_isr>:


void uart_isr (UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	2b00      	cmp	r3, #0
 8000734:	d013      	beq.n	800075e <uart_isr+0x4a>
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	f003 0320 	and.w	r3, r3, #32
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00e      	beq.n	800075e <uart_isr+0x4a>
    	    	      * @note   RXNE flag can be also cleared by a read to the USART_DR register.
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.
    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <uart_isr+0xac>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ff32 	bl	80005c0 <store_char>
        return;
 800075c:	e02c      	b.n	80007b8 <uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000764:	2b00      	cmp	r3, #0
 8000766:	d027      	beq.n	80007b8 <uart_isr+0xa4>
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	2b00      	cmp	r3, #0
 8000770:	d022      	beq.n	80007b8 <uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <uart_isr+0xb0>)
 8000774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <uart_isr+0xb0>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	429a      	cmp	r2, r3
 800077c:	d108      	bne.n	8000790 <uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800078c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800078e:	e012      	b.n	80007b6 <uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <uart_isr+0xb0>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <uart_isr+0xb0>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <uart_isr+0xb0>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	3301      	adds	r3, #1
 80007a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <uart_isr+0xb0>)
 80007a6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7bba      	ldrb	r2, [r7, #14]
 80007b4:	605a      	str	r2, [r3, #4]
    	return;
 80007b6:	bf00      	nop
    }
}
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000168 	.word	0x20000168
 80007c4:	20000120 	.word	0x20000120

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a29      	ldr	r2, [pc, #164]	; (800088c <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_GPIO_Init+0xc4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xc4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xc4>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xc4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_GPIO_Init+0xc4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_GPIO_Init+0xc4>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0xc4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_GPIO_Init+0xc4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_GPIO_Init+0xc4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0d      	ldr	r2, [pc, #52]	; (800088c <MX_GPIO_Init+0xc4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_GPIO_Init+0xc4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800086a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xc8>)
 8000880:	f000 feb8 	bl	80015f4 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800

08000894 <set_pin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_pin(int led, int brightness){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	htim4.Instance->CCR2 = 0;
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <set_pin+0x84>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <set_pin+0x84>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <set_pin+0x84>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40

	switch (led) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d01d      	beq.n	80008f8 <set_pin+0x64>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	dc24      	bgt.n	800090c <set_pin+0x78>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <set_pin+0x3c>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d00a      	beq.n	80008e4 <set_pin+0x50>
			break;
		case 2 :
			htim4.Instance->CCR4 = 10 * brightness;
			break;
	}
}
 80008ce:	e01d      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR2 = 10 * brightness;
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	461a      	mov	r2, r3
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <set_pin+0x84>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80008e2:	e013      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR3 = 10 * brightness;
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <set_pin+0x84>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80008f6:	e009      	b.n	800090c <set_pin+0x78>
			htim4.Instance->CCR4 = 10 * brightness;
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	461a      	mov	r2, r3
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <set_pin+0x84>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20000184 	.word	0x20000184

0800091c <print>:

void print(const char * content) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	uart_sendstring(content);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff fedf 	bl	80006e8 <uart_sendstring>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <print_mode_description>:

void print_mode_description(struct Mode mode, int index){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000942:	607a      	str	r2, [r7, #4]
	if (index >= 0){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db13      	blt.n	8000972 <print_mode_description+0x3e>
		print("Editing mode ");
 800094a:	4820      	ldr	r0, [pc, #128]	; (80009cc <print_mode_description+0x98>)
 800094c:	f7ff ffe6 	bl	800091c <print>
		char str_index[1];
		sprintf(str_index, "%i", index + 1);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	491d      	ldr	r1, [pc, #116]	; (80009d0 <print_mode_description+0x9c>)
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fb5e 	bl	800401c <siprintf>
		print(str_index);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ffd9 	bl	800091c <print>
		print(" :");
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <print_mode_description+0xa0>)
 800096c:	f7ff ffd6 	bl	800091c <print>
 8000970:	e002      	b.n	8000978 <print_mode_description+0x44>
	} else print("Mode: ");
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <print_mode_description+0xa4>)
 8000974:	f7ff ffd2 	bl	800091c <print>
	switch (mode.led) {
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d00e      	beq.n	800099c <print_mode_description+0x68>
 800097e:	2b02      	cmp	r3, #2
 8000980:	dc10      	bgt.n	80009a4 <print_mode_description+0x70>
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <print_mode_description+0x58>
 8000986:	2b01      	cmp	r3, #1
 8000988:	d004      	beq.n	8000994 <print_mode_description+0x60>
 800098a:	e00b      	b.n	80009a4 <print_mode_description+0x70>
		case 0 : print("green, "); break;
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <print_mode_description+0xa8>)
 800098e:	f7ff ffc5 	bl	800091c <print>
 8000992:	e007      	b.n	80009a4 <print_mode_description+0x70>
		case 1 : print("yellow, "); break;
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <print_mode_description+0xac>)
 8000996:	f7ff ffc1 	bl	800091c <print>
 800099a:	e003      	b.n	80009a4 <print_mode_description+0x70>
		case 2 : print("red, "); break;
 800099c:	4811      	ldr	r0, [pc, #68]	; (80009e4 <print_mode_description+0xb0>)
 800099e:	f7ff ffbd 	bl	800091c <print>
 80009a2:	bf00      	nop
	}
	char mode_brightness[3];
	sprintf(mode_brightness, "%i", mode.brightness);
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4909      	ldr	r1, [pc, #36]	; (80009d0 <print_mode_description+0x9c>)
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fb35 	bl	800401c <siprintf>
	print(mode_brightness);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffb0 	bl	800091c <print>
	print("% brightness\n\r");
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <print_mode_description+0xb4>)
 80009be:	f7ff ffad 	bl	800091c <print>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08004848 	.word	0x08004848
 80009d0:	08004858 	.word	0x08004858
 80009d4:	0800485c 	.word	0x0800485c
 80009d8:	08004860 	.word	0x08004860
 80009dc:	08004868 	.word	0x08004868
 80009e0:	08004870 	.word	0x08004870
 80009e4:	0800487c 	.word	0x0800487c
 80009e8:	08004884 	.word	0x08004884

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fbe9 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f931 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f7ff fee5 	bl	80007c8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80009fe:	f000 fb3f 	bl	8001080 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000a02:	f000 fa51 	bl	8000ea8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init ();
 8000a06:	f7ff fdc5 	bl	8000594 <Ringbuf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4882      	ldr	r0, [pc, #520]	; (8000c18 <main+0x22c>)
 8000a0e:	f001 fced 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000a12:	2108      	movs	r1, #8
 8000a14:	4880      	ldr	r0, [pc, #512]	; (8000c18 <main+0x22c>)
 8000a16:	f001 fce9 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a1a:	210c      	movs	r1, #12
 8000a1c:	487e      	ldr	r0, [pc, #504]	; (8000c18 <main+0x22c>)
 8000a1e:	f001 fce5 	bl	80023ec <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000a22:	4b7e      	ldr	r3, [pc, #504]	; (8000c1c <main+0x230>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	4b7c      	ldr	r3, [pc, #496]	; (8000c1c <main+0x230>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a30:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000a32:	4b7a      	ldr	r3, [pc, #488]	; (8000c1c <main+0x230>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	4b78      	ldr	r3, [pc, #480]	; (8000c1c <main+0x230>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f042 0220 	orr.w	r2, r2, #32
 8000a40:	60da      	str	r2, [r3, #12]
  set_pin(-1, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff24 	bl	8000894 <set_pin>

  bool changed = false;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	75fb      	strb	r3, [r7, #23]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Wait for available data
	if (!is_data_available()) {
 8000a50:	f7ff fe32 	bl	80006b8 <is_data_available>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80d9 	beq.w	8000c0e <main+0x222>
		continue;
	}

	char received_char = uart_read();
 8000a5c:	f7ff fdd0 	bl	8000600 <uart_read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	71fb      	strb	r3, [r7, #7]

	if (is_setting_mode) {
 8000a66:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <main+0x234>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 808d 	beq.w	8000b8a <main+0x19e>
		if (received_char == '\r') {
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b0d      	cmp	r3, #13
 8000a74:	d11d      	bne.n	8000ab2 <main+0xc6>
			is_setting_mode = false;
 8000a76:	4b6a      	ldr	r3, [pc, #424]	; (8000c20 <main+0x234>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

			if (changed) {
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d011      	beq.n	8000aa6 <main+0xba>
				MODES[input_index].led = buffer_mode.led;
 8000a82:	4b68      	ldr	r3, [pc, #416]	; (8000c24 <main+0x238>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a68      	ldr	r2, [pc, #416]	; (8000c28 <main+0x23c>)
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	4968      	ldr	r1, [pc, #416]	; (8000c2c <main+0x240>)
 8000a8c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				MODES[input_index].brightness = buffer_mode.brightness;
 8000a90:	4b64      	ldr	r3, [pc, #400]	; (8000c24 <main+0x238>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a64      	ldr	r2, [pc, #400]	; (8000c28 <main+0x23c>)
 8000a96:	6852      	ldr	r2, [r2, #4]
 8000a98:	4964      	ldr	r1, [pc, #400]	; (8000c2c <main+0x240>)
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	440b      	add	r3, r1
 8000a9e:	605a      	str	r2, [r3, #4]
				print("Mode settings saved\n\r");
 8000aa0:	4863      	ldr	r0, [pc, #396]	; (8000c30 <main+0x244>)
 8000aa2:	f7ff ff3b 	bl	800091c <print>
			}

			changed = false;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	75fb      	strb	r3, [r7, #23]


			print("\n\r== Editing mode disabled ==\n\r");
 8000aaa:	4862      	ldr	r0, [pc, #392]	; (8000c34 <main+0x248>)
 8000aac:	f7ff ff36 	bl	800091c <print>
			continue;
 8000ab0:	e0b0      	b.n	8000c14 <main+0x228>
		}

		changed = true;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	75fb      	strb	r3, [r7, #23]

		int i = atoi(&received_char) - 1;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 f989 	bl	8003dd0 <atoi>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
		if (i >= 0) {
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db12      	blt.n	8000af0 <main+0x104>
			input_index = i;
 8000aca:	4a56      	ldr	r2, [pc, #344]	; (8000c24 <main+0x238>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	6013      	str	r3, [r2, #0]
			buffer_mode.led = MODES[input_index].led;
 8000ad0:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <main+0x238>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <main+0x240>)
 8000ad6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ada:	4a53      	ldr	r2, [pc, #332]	; (8000c28 <main+0x23c>)
 8000adc:	6013      	str	r3, [r2, #0]
			buffer_mode.brightness = MODES[input_index].brightness;
 8000ade:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <main+0x238>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a52      	ldr	r2, [pc, #328]	; (8000c2c <main+0x240>)
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <main+0x23c>)
 8000aec:	6053      	str	r3, [r2, #4]
 8000aee:	e041      	b.n	8000b74 <main+0x188>
		} else switch (received_char) {
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b63      	cmp	r3, #99	; 0x63
 8000af4:	d01c      	beq.n	8000b30 <main+0x144>
 8000af6:	2b63      	cmp	r3, #99	; 0x63
 8000af8:	dc39      	bgt.n	8000b6e <main+0x182>
 8000afa:	2b62      	cmp	r3, #98	; 0x62
 8000afc:	d011      	beq.n	8000b22 <main+0x136>
 8000afe:	2b62      	cmp	r3, #98	; 0x62
 8000b00:	dc35      	bgt.n	8000b6e <main+0x182>
 8000b02:	2b61      	cmp	r3, #97	; 0x61
 8000b04:	d006      	beq.n	8000b14 <main+0x128>
 8000b06:	2b61      	cmp	r3, #97	; 0x61
 8000b08:	dc31      	bgt.n	8000b6e <main+0x182>
 8000b0a:	2b2b      	cmp	r3, #43	; 0x2b
 8000b0c:	d023      	beq.n	8000b56 <main+0x16a>
 8000b0e:	2b2d      	cmp	r3, #45	; 0x2d
 8000b10:	d015      	beq.n	8000b3e <main+0x152>
 8000b12:	e02c      	b.n	8000b6e <main+0x182>
			case 'a' :
				buffer_mode.led = LED_GREEN;
 8000b14:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <main+0x23c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
				print("Changed color to green\r\n");
 8000b1a:	4847      	ldr	r0, [pc, #284]	; (8000c38 <main+0x24c>)
 8000b1c:	f7ff fefe 	bl	800091c <print>
				break;
 8000b20:	e028      	b.n	8000b74 <main+0x188>
			case 'b' :
				buffer_mode.led = LED_YELLOW;
 8000b22:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <main+0x23c>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
				print("Changed color to yellow\r\n");
 8000b28:	4844      	ldr	r0, [pc, #272]	; (8000c3c <main+0x250>)
 8000b2a:	f7ff fef7 	bl	800091c <print>
				break;
 8000b2e:	e021      	b.n	8000b74 <main+0x188>
			case 'c' :
				buffer_mode.led = LED_RED;
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <main+0x23c>)
 8000b32:	2202      	movs	r2, #2
 8000b34:	601a      	str	r2, [r3, #0]
				print("Changed color to red\r\n");
 8000b36:	4842      	ldr	r0, [pc, #264]	; (8000c40 <main+0x254>)
 8000b38:	f7ff fef0 	bl	800091c <print>
				break;
 8000b3c:	e01a      	b.n	8000b74 <main+0x188>
			case '-' :
				buffer_mode.brightness = buffer_mode.brightness >= 10 ? buffer_mode.brightness - 10 : 0;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <main+0x23c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	bfb8      	it	lt
 8000b46:	230a      	movlt	r3, #10
 8000b48:	3b0a      	subs	r3, #10
 8000b4a:	4a37      	ldr	r2, [pc, #220]	; (8000c28 <main+0x23c>)
 8000b4c:	6053      	str	r3, [r2, #4]
				print("Decreased brightness\r\n");
 8000b4e:	483d      	ldr	r0, [pc, #244]	; (8000c44 <main+0x258>)
 8000b50:	f7ff fee4 	bl	800091c <print>
				break;
 8000b54:	e00e      	b.n	8000b74 <main+0x188>
			case '+' :
				buffer_mode.brightness = buffer_mode.brightness <= 90 ? buffer_mode.brightness + 10 : 100;
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <main+0x23c>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b5a      	cmp	r3, #90	; 0x5a
 8000b5c:	bfa8      	it	ge
 8000b5e:	235a      	movge	r3, #90	; 0x5a
 8000b60:	330a      	adds	r3, #10
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <main+0x23c>)
 8000b64:	6053      	str	r3, [r2, #4]
				print("Increased brightness\r\n");
 8000b66:	4838      	ldr	r0, [pc, #224]	; (8000c48 <main+0x25c>)
 8000b68:	f7ff fed8 	bl	800091c <print>
				break;
 8000b6c:	e002      	b.n	8000b74 <main+0x188>
			default: // wrong character, nothing actually changed
				changed = false;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	75fb      	strb	r3, [r7, #23]
				break;
 8000b72:	bf00      	nop
		}

		if (changed) {
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d04b      	beq.n	8000c12 <main+0x226>
			print_mode_description(buffer_mode, input_index);
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <main+0x238>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	492a      	ldr	r1, [pc, #168]	; (8000c28 <main+0x23c>)
 8000b80:	461a      	mov	r2, r3
 8000b82:	c903      	ldmia	r1, {r0, r1}
 8000b84:	f7ff fed6 	bl	8000934 <print_mode_description>
		}

		continue;
 8000b88:	e043      	b.n	8000c12 <main+0x226>
	}

	if (received_char == '\r') {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b0d      	cmp	r3, #13
 8000b8e:	d10c      	bne.n	8000baa <main+0x1be>
		is_setting_mode = true;
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <main+0x234>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
		print("\n\r== Editing mode enabled ==\n\r");
 8000b96:	482d      	ldr	r0, [pc, #180]	; (8000c4c <main+0x260>)
 8000b98:	f7ff fec0 	bl	800091c <print>
		print("Colors: a - green, b - yellow, c - red\n\r");
 8000b9c:	482c      	ldr	r0, [pc, #176]	; (8000c50 <main+0x264>)
 8000b9e:	f7ff febd 	bl	800091c <print>
		print("Brightness: + to increase, - to decrease\n\r");
 8000ba2:	482c      	ldr	r0, [pc, #176]	; (8000c54 <main+0x268>)
 8000ba4:	f7ff feba 	bl	800091c <print>
		continue;
 8000ba8:	e034      	b.n	8000c14 <main+0x228>
	}

	int mode_num = atoi(&received_char); // starts from 1
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f90f 	bl	8003dd0 <atoi>
 8000bb2:	6138      	str	r0, [r7, #16]

	int mode_index = mode_num - 1;
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]

	if (mode_index != -2) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f113 0f02 	cmn.w	r3, #2
 8000bc0:	f43f af46 	beq.w	8000a50 <main+0x64>
		if (mode_index != -1) {
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bca:	d017      	beq.n	8000bfc <main+0x210>
			set_pin(MODES[mode_index].led, MODES[mode_index].brightness);
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <main+0x240>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <main+0x240>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4619      	mov	r1, r3
 8000be0:	4610      	mov	r0, r2
 8000be2:	f7ff fe57 	bl	8000894 <set_pin>
			print_mode_description(MODES[mode_index], -1);
 8000be6:	4911      	ldr	r1, [pc, #68]	; (8000c2c <main+0x240>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bf6:	f7ff fe9d 	bl	8000934 <print_mode_description>
 8000bfa:	e729      	b.n	8000a50 <main+0x64>
		} else {
			set_pin(-1, 0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000c02:	f7ff fe47 	bl	8000894 <set_pin>
			print("Disabled all diodes\n\r");
 8000c06:	4814      	ldr	r0, [pc, #80]	; (8000c58 <main+0x26c>)
 8000c08:	f7ff fe88 	bl	800091c <print>
 8000c0c:	e720      	b.n	8000a50 <main+0x64>
		continue;
 8000c0e:	bf00      	nop
 8000c10:	e71e      	b.n	8000a50 <main+0x64>
		continue;
 8000c12:	bf00      	nop
  while (1) {
 8000c14:	e71c      	b.n	8000a50 <main+0x64>
 8000c16:	bf00      	nop
 8000c18:	20000184 	.word	0x20000184
 8000c1c:	200001cc 	.word	0x200001cc
 8000c20:	2000017c 	.word	0x2000017c
 8000c24:	20000178 	.word	0x20000178
 8000c28:	20000170 	.word	0x20000170
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	08004894 	.word	0x08004894
 8000c34:	080048ac 	.word	0x080048ac
 8000c38:	080048cc 	.word	0x080048cc
 8000c3c:	080048e8 	.word	0x080048e8
 8000c40:	08004904 	.word	0x08004904
 8000c44:	0800491c 	.word	0x0800491c
 8000c48:	08004934 	.word	0x08004934
 8000c4c:	0800494c 	.word	0x0800494c
 8000c50:	0800496c 	.word	0x0800496c
 8000c54:	08004998 	.word	0x08004998
 8000c58:	080049c4 	.word	0x080049c4

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 f8de 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <SystemClock_Config+0xd8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a2a      	ldr	r2, [pc, #168]	; (8000d34 <SystemClock_Config+0xd8>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <SystemClock_Config+0xd8>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <SystemClock_Config+0xdc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <SystemClock_Config+0xdc>)
 8000ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <SystemClock_Config+0xdc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cd0:	23d8      	movs	r3, #216	; 0xd8
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fe83 	bl	80019ec <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cec:	f000 f826 	bl	8000d3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cf0:	f000 fe2c 	bl	800194c <HAL_PWREx_EnableOverDrive>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000cfa:	f000 f81f 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2302      	movs	r3, #2
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2105      	movs	r1, #5
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 f8dd 	bl	8001edc <HAL_RCC_ClockConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d28:	f000 f808 	bl	8000d3c <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3750      	adds	r7, #80	; 0x50
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x4>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SysTick_Handler+0x20>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <SysTick_Handler+0x18>
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Handler+0x20>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <SysTick_Handler+0x20>)
 8000df2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 fa3a 	bl	800126c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000d4 	.word	0x200000d4

08000e00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_isr (&huart6);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <USART6_IRQHandler+0x14>)
 8000e06:	f7ff fc85 	bl	8000714 <uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e0a:	4802      	ldr	r0, [pc, #8]	; (8000e14 <USART6_IRQHandler+0x14>)
 8000e0c:	f002 f91a 	bl	8003044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200001cc 	.word	0x200001cc

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 ffc6 	bl	8003dd8 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20030000 	.word	0x20030000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000180 	.word	0x20000180
 8000e80:	20000228 	.word	0x20000228

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <MX_TIM4_Init+0x11c>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000ee0:	2259      	movs	r2, #89	; 0x59
 8000ee2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000efe:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f00:	f001 f9cc 	bl	800229c <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000f0a:	f7ff ff17 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4829      	ldr	r0, [pc, #164]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f1c:	f001 fbf0 	bl	8002700 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000f26:	f7ff ff09 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f2a:	4825      	ldr	r0, [pc, #148]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f2c:	f001 fa05 	bl	800233a <HAL_TIM_PWM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000f36:	f7ff ff01 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	4619      	mov	r1, r3
 8000f48:	481d      	ldr	r0, [pc, #116]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f4a:	f001 ffb1 	bl	8002eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f54:	f7ff fef2 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f58:	2360      	movs	r3, #96	; 0x60
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000f5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f72:	f001 fb03 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f7c:	f7ff fede 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2208      	movs	r2, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000f88:	f001 faf8 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000f92:	f7ff fed3 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	220c      	movs	r2, #12
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000fa2:	f001 faeb 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8000fac:	f7ff fec6 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM4_Init+0x118>)
 8000fb2:	f000 f82b 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	; 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000184 	.word	0x20000184
 8000fc4:	40000800 	.word	0x40000800

08000fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10d      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <HAL_TIM_Base_MspInit+0x40>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40000800 	.word	0x40000800
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d11e      	bne.n	800106c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800104a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800104e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_TIM_MspPostInit+0x70>)
 8001068:	f000 fac4 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40000800 	.word	0x40000800
 8001078:	40023800 	.word	0x40023800
 800107c:	40020c00 	.word	0x40020c00

08001080 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART6_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART6_UART_Init+0x4c>)
 80010b8:	f001 ff76 	bl	8002fa8 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f7ff fe3b 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001cc 	.word	0x200001cc
 80010d0:	40011400 	.word	0x40011400

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d133      	bne.n	800115e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_UART_MspInit+0x98>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_UART_MspInit+0x98>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_UART_MspInit+0x98>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x98>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_UART_MspInit+0x98>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_UART_MspInit+0x98>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800112e:	23c0      	movs	r3, #192	; 0xc0
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800113e:	2308      	movs	r3, #8
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <HAL_UART_MspInit+0x9c>)
 800114a:	f000 fa53 	bl	80015f4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2047      	movs	r0, #71	; 0x47
 8001154:	f000 f985 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001158:	2047      	movs	r0, #71	; 0x47
 800115a:	f000 f99e 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40011400 	.word	0x40011400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800

08001174 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff fe71 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f002 fe1f 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff fc21 	bl	80009ec <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80011b8:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 80011bc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80011c0:	20000224 	.word	0x20000224

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f92b 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f000 f808 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fda2 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x54>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x58>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	fbb3 f3f1 	udiv	r3, r3, r1
 8001226:	fbb2 f3f3 	udiv	r3, r2, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f943 	bl	80014b6 <HAL_SYSTICK_Config>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e00e      	b.n	8001258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d80a      	bhi.n	8001256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001240:	2200      	movs	r2, #0
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 f90b 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800124c:	4a06      	ldr	r2, [pc, #24]	; (8001268 <HAL_InitTick+0x5c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000048 	.word	0x20000048
 8001264:	20000050 	.word	0x20000050
 8001268:	2000004c 	.word	0x2000004c

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000050 	.word	0x20000050
 8001290:	20000210 	.word	0x20000210

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000210 	.word	0x20000210

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff8e 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff29 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff3e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff8e 	bl	80013a0 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff31 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff feda 	bl	8001294 <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e052      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0216 	bic.w	r2, r2, #22
 800150e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800151e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_DMA_Abort+0x62>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	e013      	b.n	800157a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001552:	f7ff fe9f 	bl	8001294 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b05      	cmp	r3, #5
 800155e:	d90c      	bls.n	800157a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e015      	b.n	80015a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e4      	bne.n	8001552 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	223f      	movs	r2, #63	; 0x3f
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00c      	b.n	80015e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	e177      	b.n	8001900 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	429a      	cmp	r2, r3
 800162a:	f040 8166 	bne.w	80018fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b01      	cmp	r3, #1
 8001638:	d005      	beq.n	8001646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	2b02      	cmp	r3, #2
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80c0 	beq.w	80018fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_GPIO_Init+0x324>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_GPIO_Init+0x324>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_GPIO_Init+0x324>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001796:	4a61      	ldr	r2, [pc, #388]	; (800191c <HAL_GPIO_Init+0x328>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	089b      	lsrs	r3, r3, #2
 800179c:	3302      	adds	r3, #2
 800179e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	220f      	movs	r2, #15
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_GPIO_Init+0x32c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d037      	beq.n	8001832 <HAL_GPIO_Init+0x23e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_GPIO_Init+0x330>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d031      	beq.n	800182e <HAL_GPIO_Init+0x23a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x334>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02b      	beq.n	800182a <HAL_GPIO_Init+0x236>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a55      	ldr	r2, [pc, #340]	; (800192c <HAL_GPIO_Init+0x338>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d025      	beq.n	8001826 <HAL_GPIO_Init+0x232>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a54      	ldr	r2, [pc, #336]	; (8001930 <HAL_GPIO_Init+0x33c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_Init+0x22e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a53      	ldr	r2, [pc, #332]	; (8001934 <HAL_GPIO_Init+0x340>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x22a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_GPIO_Init+0x344>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x226>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_GPIO_Init+0x348>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x222>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a50      	ldr	r2, [pc, #320]	; (8001940 <HAL_GPIO_Init+0x34c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x21e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x350>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x21a>
 800180a:	2309      	movs	r3, #9
 800180c:	e012      	b.n	8001834 <HAL_GPIO_Init+0x240>
 800180e:	230a      	movs	r3, #10
 8001810:	e010      	b.n	8001834 <HAL_GPIO_Init+0x240>
 8001812:	2308      	movs	r3, #8
 8001814:	e00e      	b.n	8001834 <HAL_GPIO_Init+0x240>
 8001816:	2307      	movs	r3, #7
 8001818:	e00c      	b.n	8001834 <HAL_GPIO_Init+0x240>
 800181a:	2306      	movs	r3, #6
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_Init+0x240>
 800181e:	2305      	movs	r3, #5
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x240>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x240>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x240>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x240>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x240>
 8001832:	2300      	movs	r3, #0
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_GPIO_Init+0x328>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_GPIO_Init+0x354>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_GPIO_Init+0x354>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_GPIO_Init+0x354>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a29      	ldr	r2, [pc, #164]	; (8001948 <HAL_GPIO_Init+0x354>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a6:	4b28      	ldr	r3, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x354>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ca:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_GPIO_Init+0x354>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_GPIO_Init+0x354>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_GPIO_Init+0x354>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f ae84 	bls.w	8001610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40021400 	.word	0x40021400
 8001938:	40021800 	.word	0x40021800
 800193c:	40021c00 	.word	0x40021c00
 8001940:	40022000 	.word	0x40022000
 8001944:	40022400 	.word	0x40022400
 8001948:	40013c00 	.word	0x40013c00

0800194c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_PWREx_EnableOverDrive+0x90>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_PWREx_EnableOverDrive+0x90>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_PWREx_EnableOverDrive+0x90>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001978:	f7ff fc8c 	bl	8001294 <HAL_GetTick>
 800197c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800197e:	e009      	b.n	8001994 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001980:	f7ff fc88 	bl	8001294 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800198e:	d901      	bls.n	8001994 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e01f      	b.n	80019d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d1ee      	bne.n	8001980 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a8:	f7ff fc74 	bl	8001294 <HAL_GetTick>
 80019ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019ae:	e009      	b.n	80019c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019b0:	f7ff fc70 	bl	8001294 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019be:	d901      	bls.n	80019c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e007      	b.n	80019d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d0:	d1ee      	bne.n	80019b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	420e0040 	.word	0x420e0040
 80019e4:	40007000 	.word	0x40007000
 80019e8:	420e0044 	.word	0x420e0044

080019ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e267      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d075      	beq.n	8001af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a0a:	4b88      	ldr	r3, [pc, #544]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d00c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a16:	4b85      	ldr	r3, [pc, #532]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d112      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a22:	4b82      	ldr	r3, [pc, #520]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2e:	d10b      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	4b7e      	ldr	r3, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x108>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d157      	bne.n	8001af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e242      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x74>
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b70      	ldr	r3, [pc, #448]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6f      	ldr	r2, [pc, #444]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a84:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a68      	ldr	r2, [pc, #416]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b66      	ldr	r3, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a65      	ldr	r2, [pc, #404]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fbf6 	bl	8001294 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fbf2 	bl	8001294 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e207      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xc0>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fbe2 	bl	8001294 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fbde 	bl	8001294 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1f3      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d11c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e1c7      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e03a      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b5c:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <HAL_RCC_OscConfig+0x244>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb97 	bl	8001294 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fb93 	bl	8001294 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1a8      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x244>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb76 	bl	8001294 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7ff fb72 	bl	8001294 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e187      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d036      	beq.n	8001c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_RCC_OscConfig+0x248>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fb56 	bl	8001294 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fb52 	bl	8001294 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e167      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x240>)
 8001c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x200>
 8001c0a:	e01b      	b.n	8001c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_OscConfig+0x248>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fb3f 	bl	8001294 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	e00e      	b.n	8001c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb3b 	bl	8001294 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d907      	bls.n	8001c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e150      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	42470000 	.word	0x42470000
 8001c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ea      	bne.n	8001c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8097 	beq.w	8001d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a7c      	ldr	r2, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	4b74      	ldr	r3, [pc, #464]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a73      	ldr	r2, [pc, #460]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fafb 	bl	8001294 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff faf7 	bl	8001294 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e10c      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x474>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2ea>
 8001cc8:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a63      	ldr	r2, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e01c      	b.n	8001d10 <HAL_RCC_OscConfig+0x324>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x30c>
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0x324>
 8001cf8:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f023 0301 	bic.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f023 0304 	bic.w	r3, r3, #4
 8001d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d015      	beq.n	8001d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fabc 	bl	8001294 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fab8 	bl	8001294 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0cb      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCC_OscConfig+0x334>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff faa6 	bl	8001294 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7ff faa2 	bl	8001294 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0b5      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ee      	bne.n	8001d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80a1 	beq.w	8001ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d05c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d141      	bne.n	8001e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fa76 	bl	8001294 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fa72 	bl	8001294 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e087      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	491b      	ldr	r1, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fa4b 	bl	8001294 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fa47 	bl	8001294 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e05c      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x416>
 8001e20:	e054      	b.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x478>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fa34 	bl	8001294 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fa30 	bl	8001294 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e045      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x470>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x444>
 8001e4e:	e03d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e038      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
 8001e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x4ec>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d028      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0cc      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d90c      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b8      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d020      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a58      	ldr	r2, [pc, #352]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	494d      	ldr	r1, [pc, #308]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d044      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d119      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e06f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e067      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4934      	ldr	r1, [pc, #208]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f962 	bl	8001294 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f95e 	bl	8001294 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04f      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d20c      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e032      	b.n	800208a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4916      	ldr	r1, [pc, #88]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	490e      	ldr	r1, [pc, #56]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002062:	f000 f821 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	490a      	ldr	r1, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	5ccb      	ldrb	r3, [r1, r3]
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f8c2 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00
 8002098:	40023800 	.word	0x40023800
 800209c:	080049dc 	.word	0x080049dc
 80020a0:	20000048 	.word	0x20000048
 80020a4:	2000004c 	.word	0x2000004c

080020a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b090      	sub	sp, #64	; 0x40
 80020ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
 80020b4:	2300      	movs	r3, #0
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	2300      	movs	r3, #0
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x40>
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	f200 80a1 	bhi.w	8002214 <HAL_RCC_GetSysClockFreq+0x16c>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x34>
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020da:	e09b      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_GetSysClockFreq+0x184>)
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020e0:	e09b      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020e6:	e098      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d028      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	2200      	movs	r2, #0
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	627a      	str	r2, [r7, #36]	; 0x24
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002110:	2100      	movs	r1, #0
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_GetSysClockFreq+0x188>)
 8002114:	fb03 f201 	mul.w	r2, r3, r1
 8002118:	2300      	movs	r3, #0
 800211a:	fb00 f303 	mul.w	r3, r0, r3
 800211e:	4413      	add	r3, r2
 8002120:	4a43      	ldr	r2, [pc, #268]	; (8002230 <HAL_RCC_GetSysClockFreq+0x188>)
 8002122:	fba0 1202 	umull	r1, r2, r0, r2
 8002126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002128:	460a      	mov	r2, r1
 800212a:	62ba      	str	r2, [r7, #40]	; 0x28
 800212c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212e:	4413      	add	r3, r2
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	2200      	movs	r2, #0
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	61fa      	str	r2, [r7, #28]
 800213a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002142:	f7fe f8a5 	bl	8000290 <__aeabi_uldivmod>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4613      	mov	r3, r2
 800214c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214e:	e053      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	2200      	movs	r2, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	617a      	str	r2, [r7, #20]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002162:	f04f 0b00 	mov.w	fp, #0
 8002166:	4652      	mov	r2, sl
 8002168:	465b      	mov	r3, fp
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ebb2 080a 	subs.w	r8, r2, sl
 8002182:	eb63 090b 	sbc.w	r9, r3, fp
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002192:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002196:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800219a:	ebb2 0408 	subs.w	r4, r2, r8
 800219e:	eb63 0509 	sbc.w	r5, r3, r9
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	00eb      	lsls	r3, r5, #3
 80021ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b0:	00e2      	lsls	r2, r4, #3
 80021b2:	4614      	mov	r4, r2
 80021b4:	461d      	mov	r5, r3
 80021b6:	eb14 030a 	adds.w	r3, r4, sl
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	eb45 030b 	adc.w	r3, r5, fp
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ce:	4629      	mov	r1, r5
 80021d0:	028b      	lsls	r3, r1, #10
 80021d2:	4621      	mov	r1, r4
 80021d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d8:	4621      	mov	r1, r4
 80021da:	028a      	lsls	r2, r1, #10
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	2200      	movs	r2, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe f850 	bl	8000290 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_GetSysClockFreq+0x180>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetSysClockFreq+0x184>)
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800221c:	4618      	mov	r0, r3
 800221e:	3740      	adds	r7, #64	; 0x40
 8002220:	46bd      	mov	sp, r7
 8002222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	00f42400 	.word	0x00f42400
 8002230:	017d7840 	.word	0x017d7840

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000048 	.word	0x20000048

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff0 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0a9b      	lsrs	r3, r3, #10
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	080049ec 	.word	0x080049ec

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffdc 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	080049ec 	.word	0x080049ec

0800229c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e041      	b.n	8002332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fe80 	bl	8000fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fad8 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e041      	b.n	80023d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f839 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f000 fa89 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_TIM_PWM_Start+0x24>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e022      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d109      	bne.n	800242a <HAL_TIM_PWM_Start+0x3e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e015      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d109      	bne.n	8002444 <HAL_TIM_PWM_Start+0x58>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07c      	b.n	8002558 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0x82>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	e013      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d104      	bne.n	800247e <HAL_TIM_PWM_Start+0x92>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	e00b      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0xa2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248c:	e003      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fce0 	bl	8002e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	; (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_PWM_Start+0xcc>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <HAL_TIM_PWM_Start+0x178>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_PWM_Start+0xd0>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_TIM_PWM_Start+0xd2>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d01d      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_TIM_PWM_Start+0x17c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIM_PWM_Start+0x180>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_TIM_PWM_Start+0x184>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_TIM_PWM_Start+0x178>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_TIM_PWM_Start+0x188>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_PWM_Start+0x18c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d010      	beq.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	e007      	b.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40010000 	.word	0x40010000
 8002564:	40010400 	.word	0x40010400
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40014000 	.word	0x40014000
 8002578:	40001800 	.word	0x40001800

0800257c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002596:	2302      	movs	r3, #2
 8002598:	e0ae      	b.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	f200 809f 	bhi.w	80026e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	080026e9 	.word	0x080026e9
 80025b8:	080026e9 	.word	0x080026e9
 80025bc:	080026e9 	.word	0x080026e9
 80025c0:	08002625 	.word	0x08002625
 80025c4:	080026e9 	.word	0x080026e9
 80025c8:	080026e9 	.word	0x080026e9
 80025cc:	080026e9 	.word	0x080026e9
 80025d0:	08002667 	.word	0x08002667
 80025d4:	080026e9 	.word	0x080026e9
 80025d8:	080026e9 	.word	0x080026e9
 80025dc:	080026e9 	.word	0x080026e9
 80025e0:	080026a7 	.word	0x080026a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f9f0 	bl	80029d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0208 	orr.w	r2, r2, #8
 80025fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0204 	bic.w	r2, r2, #4
 800260e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6999      	ldr	r1, [r3, #24]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	619a      	str	r2, [r3, #24]
      break;
 8002622:	e064      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fa40 	bl	8002ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	021a      	lsls	r2, r3, #8
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	619a      	str	r2, [r3, #24]
      break;
 8002664:	e043      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fa95 	bl	8002b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0208 	orr.w	r2, r2, #8
 8002680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69d9      	ldr	r1, [r3, #28]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	61da      	str	r2, [r3, #28]
      break;
 80026a4:	e023      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fae9 	bl	8002c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69d9      	ldr	r1, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	021a      	lsls	r2, r3, #8
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	61da      	str	r2, [r3, #28]
      break;
 80026e6:	e002      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
      break;
 80026ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_TIM_ConfigClockSource+0x1c>
 8002718:	2302      	movs	r3, #2
 800271a:	e0b4      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x186>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800273a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002754:	d03e      	beq.n	80027d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275a:	f200 8087 	bhi.w	800286c <HAL_TIM_ConfigClockSource+0x16c>
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	f000 8086 	beq.w	8002872 <HAL_TIM_ConfigClockSource+0x172>
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	d87f      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b70      	cmp	r3, #112	; 0x70
 800276e:	d01a      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002770:	2b70      	cmp	r3, #112	; 0x70
 8002772:	d87b      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b60      	cmp	r3, #96	; 0x60
 8002776:	d050      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x11a>
 8002778:	2b60      	cmp	r3, #96	; 0x60
 800277a:	d877      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b50      	cmp	r3, #80	; 0x50
 800277e:	d03c      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xfa>
 8002780:	2b50      	cmp	r3, #80	; 0x50
 8002782:	d873      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d058      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x13a>
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d86f      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d064      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x15a>
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	d86b      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b20      	cmp	r3, #32
 8002796:	d060      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x15a>
 8002798:	2b20      	cmp	r3, #32
 800279a:	d867      	bhi.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d05c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x15a>
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d05a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x15a>
 80027a4:	e062      	b.n	800286c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f000 fb35 	bl	8002e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	609a      	str	r2, [r3, #8]
      break;
 80027d2:	e04f      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f000 fb1e 	bl	8002e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f6:	609a      	str	r2, [r3, #8]
      break;
 80027f8:	e03c      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	461a      	mov	r2, r3
 8002808:	f000 fa92 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2150      	movs	r1, #80	; 0x50
 8002812:	4618      	mov	r0, r3
 8002814:	f000 faeb 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002818:	e02c      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 fab1 	bl	8002d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2160      	movs	r1, #96	; 0x60
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fadb 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002838:	e01c      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 fa72 	bl	8002d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	4618      	mov	r0, r3
 8002854:	f000 facb 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 8002858:	e00c      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f000 fac2 	bl	8002dee <TIM_ITRx_SetConfig>
      break;
 800286a:	e003      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      break;
 8002870:	e000      	b.n	8002874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <TIM_Base_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d00f      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3d      	ldr	r2, [pc, #244]	; (80029a8 <TIM_Base_SetConfig+0x118>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <TIM_Base_SetConfig+0x11c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <TIM_Base_SetConfig+0x120>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3a      	ldr	r2, [pc, #232]	; (80029b4 <TIM_Base_SetConfig+0x124>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <TIM_Base_SetConfig+0x114>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d027      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <TIM_Base_SetConfig+0x118>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d023      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <TIM_Base_SetConfig+0x11c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01f      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <TIM_Base_SetConfig+0x120>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <TIM_Base_SetConfig+0x124>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d017      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <TIM_Base_SetConfig+0x128>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <TIM_Base_SetConfig+0x12c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00f      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <TIM_Base_SetConfig+0x130>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00b      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <TIM_Base_SetConfig+0x134>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a24      	ldr	r2, [pc, #144]	; (80029c8 <TIM_Base_SetConfig+0x138>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d003      	beq.n	8002942 <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <TIM_Base_SetConfig+0x13c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <TIM_Base_SetConfig+0x114>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_Base_SetConfig+0xf8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <TIM_Base_SetConfig+0x124>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40000800 	.word	0x40000800
 80029b0:	40000c00 	.word	0x40000c00
 80029b4:	40010400 	.word	0x40010400
 80029b8:	40014000 	.word	0x40014000
 80029bc:	40014400 	.word	0x40014400
 80029c0:	40014800 	.word	0x40014800
 80029c4:	40001800 	.word	0x40001800
 80029c8:	40001c00 	.word	0x40001c00
 80029cc:	40002000 	.word	0x40002000

080029d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 0302 	bic.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <TIM_OC1_SetConfig+0xd8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC1_SetConfig+0x64>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <TIM_OC1_SetConfig+0xdc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10c      	bne.n	8002a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0308 	bic.w	r3, r3, #8
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <TIM_OC1_SetConfig+0xd8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_OC1_SetConfig+0x8e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <TIM_OC1_SetConfig+0xdc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	621a      	str	r2, [r3, #32]
}
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0210 	bic.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <TIM_OC2_SetConfig+0xe4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_OC2_SetConfig+0x68>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <TIM_OC2_SetConfig+0xe8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <TIM_OC2_SetConfig+0xe4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <TIM_OC2_SetConfig+0x94>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <TIM_OC2_SetConfig+0xe8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d113      	bne.n	8002b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010400 	.word	0x40010400

08002b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0303 	bic.w	r3, r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <TIM_OC3_SetConfig+0xe0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_OC3_SetConfig+0x66>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <TIM_OC3_SetConfig+0xe4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10d      	bne.n	8002c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <TIM_OC3_SetConfig+0xe0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_OC3_SetConfig+0x92>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <TIM_OC3_SetConfig+0xe4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d113      	bne.n	8002c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	621a      	str	r2, [r3, #32]
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010400 	.word	0x40010400

08002c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	031b      	lsls	r3, r3, #12
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <TIM_OC4_SetConfig+0xa4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_OC4_SetConfig+0x68>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <TIM_OC4_SetConfig+0xa8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d109      	bne.n	8002d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40010400 	.word	0x40010400

08002d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f023 030a 	bic.w	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0210 	bic.w	r2, r3, #16
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	031b      	lsls	r3, r3, #12
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 0307 	orr.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	021a      	lsls	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2201      	movs	r2, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e05a      	b.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a21      	ldr	r2, [pc, #132]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d01d      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10c      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40001800 	.word	0x40001800

08002fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03f      	b.n	800303a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe f880 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fc7b 	bl	80038e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0ba      	sub	sp, #232	; 0xe8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_UART_IRQHandler+0x66>
 8003096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fb65 	bl	8003772 <UART_Receive_IT>
      return;
 80030a8:	e256      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80de 	beq.w	8003270 <HAL_UART_IRQHandler+0x22c>
 80030b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80d1 	beq.w	8003270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xae>
 80030da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0xd2>
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_UART_IRQHandler+0xf6>
 8003122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d011      	beq.n	800316a <HAL_UART_IRQHandler+0x126>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 81ed 	beq.w	800354e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x14e>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 faf0 	bl	8003772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_UART_IRQHandler+0x17a>
 80031b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d04f      	beq.n	800325e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f9f8 	bl	80035b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d141      	bne.n	8003256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800320a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1d9      	bne.n	80031d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4a7d      	ldr	r2, [pc, #500]	; (8003420 <HAL_UART_IRQHandler+0x3dc>)
 800322c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe f9bb 	bl	80015ae <HAL_DMA_Abort_IT>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003248:	4610      	mov	r0, r2
 800324a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	e00e      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f99a 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	e00a      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f996 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e006      	b.n	800326c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f992 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800326a:	e170      	b.n	800354e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	bf00      	nop
    return;
 800326e:	e16e      	b.n	800354e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 814a 	bne.w	800350e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8143 	beq.w	800350e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 813c 	beq.w	800350e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	f040 80b4 	bne.w	8003424 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8140 	beq.w	8003552 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032da:	429a      	cmp	r2, r3
 80032dc:	f080 8139 	bcs.w	8003552 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f2:	f000 8088 	beq.w	8003406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800330c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800332e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1d9      	bne.n	80032f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800336a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800336e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e1      	bne.n	8003342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e3      	bne.n	80033c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe f864 	bl	80014ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340e:	b29b      	uxth	r3, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	b29b      	uxth	r3, r3
 8003414:	4619      	mov	r1, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8c0 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800341c:	e099      	b.n	8003552 <HAL_UART_IRQHandler+0x50e>
 800341e:	bf00      	nop
 8003420:	0800367b 	.word	0x0800367b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342c:	b29b      	uxth	r3, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 808b 	beq.w	8003556 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8086 	beq.w	8003556 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800346e:	647a      	str	r2, [r7, #68]	; 0x44
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003472:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003474:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003476:	e841 2300 	strex	r3, r2, [r1]
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1e3      	bne.n	800344a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3314      	adds	r3, #20
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	623b      	str	r3, [r7, #32]
   return(result);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3314      	adds	r3, #20
 80034a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034a6:	633a      	str	r2, [r7, #48]	; 0x30
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e3      	bne.n	8003482 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0310 	bic.w	r3, r3, #16
 80034de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034ec:	61fa      	str	r2, [r7, #28]
 80034ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	617b      	str	r3, [r7, #20]
   return(result);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e3      	bne.n	80034c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f848 	bl	800359c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350c:	e023      	b.n	8003556 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_UART_IRQHandler+0x4ea>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8bb 	bl	80036a2 <UART_Transmit_IT>
    return;
 800352c:	e014      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <HAL_UART_IRQHandler+0x514>
 800353a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d008      	beq.n	8003558 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8fb 	bl	8003742 <UART_EndTransmit_IT>
    return;
 800354c:	e004      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
    return;
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
      return;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_UART_IRQHandler+0x514>
      return;
 8003556:	bf00      	nop
  }
}
 8003558:	37e8      	adds	r7, #232	; 0xe8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop

08003560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b095      	sub	sp, #84	; 0x54
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035dc:	643a      	str	r2, [r7, #64]	; 0x40
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e5      	bne.n	80035bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3314      	adds	r3, #20
 80035f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3314      	adds	r3, #20
 800360e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	2b01      	cmp	r3, #1
 800362a:	d119      	bne.n	8003660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	60bb      	str	r3, [r7, #8]
   return(result);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	647b      	str	r3, [r7, #68]	; 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364c:	61ba      	str	r2, [r7, #24]
 800364e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6979      	ldr	r1, [r7, #20]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	613b      	str	r3, [r7, #16]
   return(result);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800366e:	bf00      	nop
 8003670:	3754      	adds	r7, #84	; 0x54
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff77 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b21      	cmp	r3, #33	; 0x21
 80036b4:	d13e      	bne.n	8003734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	d114      	bne.n	80036ea <UART_Transmit_IT+0x48>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d110      	bne.n	80036ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	1c9a      	adds	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	621a      	str	r2, [r3, #32]
 80036e8:	e008      	b.n	80036fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	1c59      	adds	r1, r3, #1
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6211      	str	r1, [r2, #32]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fefc 	bl	8003560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b08c      	sub	sp, #48	; 0x30
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b22      	cmp	r3, #34	; 0x22
 8003784:	f040 80ab 	bne.w	80038de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d117      	bne.n	80037c2 <UART_Receive_IT+0x50>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d113      	bne.n	80037c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
 80037c0:	e026      	b.n	8003810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d4:	d007      	beq.n	80037e6 <UART_Receive_IT+0x74>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <UART_Receive_IT+0x82>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e008      	b.n	8003806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	b2da      	uxtb	r2, r3
 8003802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003820:	2b00      	cmp	r3, #0
 8003822:	d15a      	bne.n	80038da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0220 	bic.w	r2, r2, #32
 8003832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d135      	bne.n	80038d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f023 0310 	bic.w	r3, r3, #16
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	623a      	str	r2, [r7, #32]
 800388c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	69f9      	ldr	r1, [r7, #28]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	61bb      	str	r3, [r7, #24]
   return(result);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d10a      	bne.n	80038c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fe67 	bl	800359c <HAL_UARTEx_RxEventCallback>
 80038ce:	e002      	b.n	80038d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe4f 	bl	8003574 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e002      	b.n	80038e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3730      	adds	r7, #48	; 0x30
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ec:	b0c0      	sub	sp, #256	; 0x100
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	68d9      	ldr	r1, [r3, #12]
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	ea40 0301 	orr.w	r3, r0, r1
 8003910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003940:	f021 010c 	bic.w	r1, r1, #12
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	6999      	ldr	r1, [r3, #24]
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	ea40 0301 	orr.w	r3, r0, r1
 800396e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b8f      	ldr	r3, [pc, #572]	; (8003bb4 <UART_SetConfig+0x2cc>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <UART_SetConfig+0xa0>
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b8d      	ldr	r3, [pc, #564]	; (8003bb8 <UART_SetConfig+0x2d0>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d104      	bne.n	8003992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7fe fc74 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 800398c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003990:	e003      	b.n	800399a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003992:	f7fe fc5b 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a4:	f040 810c 	bne.w	8003bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80039c2:	415b      	adcs	r3, r3
 80039c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ca:	4621      	mov	r1, r4
 80039cc:	eb12 0801 	adds.w	r8, r2, r1
 80039d0:	4629      	mov	r1, r5
 80039d2:	eb43 0901 	adc.w	r9, r3, r1
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ea:	4690      	mov	r8, r2
 80039ec:	4699      	mov	r9, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	eb18 0303 	adds.w	r3, r8, r3
 80039f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039f8:	462b      	mov	r3, r5
 80039fa:	eb49 0303 	adc.w	r3, r9, r3
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a16:	460b      	mov	r3, r1
 8003a18:	18db      	adds	r3, r3, r3
 8003a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	eb42 0303 	adc.w	r3, r2, r3
 8003a22:	657b      	str	r3, [r7, #84]	; 0x54
 8003a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a2c:	f7fc fc30 	bl	8000290 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4b61      	ldr	r3, [pc, #388]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003a36:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	011c      	lsls	r4, r3, #4
 8003a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a50:	4642      	mov	r2, r8
 8003a52:	464b      	mov	r3, r9
 8003a54:	1891      	adds	r1, r2, r2
 8003a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a58:	415b      	adcs	r3, r3
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a60:	4641      	mov	r1, r8
 8003a62:	eb12 0a01 	adds.w	sl, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0b01 	adc.w	fp, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a80:	4692      	mov	sl, r2
 8003a82:	469b      	mov	fp, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	eb1a 0303 	adds.w	r3, sl, r3
 8003a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	eb4b 0303 	adc.w	r3, fp, r3
 8003a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003aac:	460b      	mov	r3, r1
 8003aae:	18db      	adds	r3, r3, r3
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ac2:	f7fc fbe5 	bl	8000290 <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003ace:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2264      	movs	r2, #100	; 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	1acb      	subs	r3, r1, r3
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003af0:	441c      	add	r4, r3
 8003af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	1891      	adds	r1, r2, r2
 8003b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b0c:	415b      	adcs	r3, r3
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b14:	4641      	mov	r1, r8
 8003b16:	1851      	adds	r1, r2, r1
 8003b18:	6339      	str	r1, [r7, #48]	; 0x30
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	00cb      	lsls	r3, r1, #3
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b36:	4651      	mov	r1, sl
 8003b38:	00ca      	lsls	r2, r1, #3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4642      	mov	r2, r8
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b68:	460b      	mov	r3, r1
 8003b6a:	18db      	adds	r3, r3, r3
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	4613      	mov	r3, r2
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b7e:	f7fc fb87 	bl	8000290 <__aeabi_uldivmod>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003b88:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	2164      	movs	r1, #100	; 0x64
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <UART_SetConfig+0x2d4>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 0207 	and.w	r2, r3, #7
 8003ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4422      	add	r2, r4
 8003bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bb0:	e105      	b.n	8003dbe <UART_SetConfig+0x4d6>
 8003bb2:	bf00      	nop
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40011400 	.word	0x40011400
 8003bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	6239      	str	r1, [r7, #32]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1854      	adds	r4, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb43 0501 	adc.w	r5, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c08:	464b      	mov	r3, r9
 8003c0a:	eb45 0303 	adc.w	r3, r5, r3
 8003c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c2e:	4629      	mov	r1, r5
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c38:	4621      	mov	r1, r4
 8003c3a:	008a      	lsls	r2, r1, #2
 8003c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c40:	f7fc fb26 	bl	8000290 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	011c      	lsls	r4, r3, #4
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	61b9      	str	r1, [r7, #24]
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	4641      	mov	r1, r8
 8003c76:	1851      	adds	r1, r2, r1
 8003c78:	6139      	str	r1, [r7, #16]
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	414b      	adcs	r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	00cb      	lsls	r3, r1, #3
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c96:	4651      	mov	r1, sl
 8003c98:	00ca      	lsls	r2, r1, #3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca8:	464b      	mov	r3, r9
 8003caa:	460a      	mov	r2, r1
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ccc:	4649      	mov	r1, r9
 8003cce:	008b      	lsls	r3, r1, #2
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	008a      	lsls	r2, r1, #2
 8003cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cde:	f7fc fad7 	bl	8000290 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	2164      	movs	r1, #100	; 0x64
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	3332      	adds	r3, #50	; 0x32
 8003cfa:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d06:	441c      	add	r4, r3
 8003d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d10:	677a      	str	r2, [r7, #116]	; 0x74
 8003d12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d16:	4642      	mov	r2, r8
 8003d18:	464b      	mov	r3, r9
 8003d1a:	1891      	adds	r1, r2, r2
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	415b      	adcs	r3, r3
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d26:	4641      	mov	r1, r8
 8003d28:	1851      	adds	r1, r2, r1
 8003d2a:	6039      	str	r1, [r7, #0]
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	414b      	adcs	r3, r1
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d3e:	4659      	mov	r1, fp
 8003d40:	00cb      	lsls	r3, r1, #3
 8003d42:	4651      	mov	r1, sl
 8003d44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d48:	4651      	mov	r1, sl
 8003d4a:	00ca      	lsls	r2, r1, #3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	4642      	mov	r2, r8
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d6c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	008b      	lsls	r3, r1, #2
 8003d7e:	4641      	mov	r1, r8
 8003d80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d84:	4641      	mov	r1, r8
 8003d86:	008a      	lsls	r2, r1, #2
 8003d88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d8c:	f7fc fa80 	bl	8000290 <__aeabi_uldivmod>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003d96:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	; 0x32
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x4e4>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 020f 	and.w	r2, r3, #15
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4422      	add	r2, r4
 8003dbc:	609a      	str	r2, [r3, #8]
}
 8003dbe:	bf00      	nop
 8003dc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dca:	bf00      	nop
 8003dcc:	51eb851f 	.word	0x51eb851f

08003dd0 <atoi>:
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	f000 b9c4 	b.w	8004160 <strtol>

08003dd8 <__errno>:
 8003dd8:	4b01      	ldr	r3, [pc, #4]	; (8003de0 <__errno+0x8>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000054 	.word	0x20000054

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	; (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	; (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	; (8003e28 <__libc_init_array+0x44>)
 8003df8:	f000 fd1a 	bl	8004830 <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08004b30 	.word	0x08004b30
 8003e20:	08004b30 	.word	0x08004b30
 8003e24:	08004b30 	.word	0x08004b30
 8003e28:	08004b34 	.word	0x08004b34

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <_free_r>:
 8003e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e3e:	2900      	cmp	r1, #0
 8003e40:	d044      	beq.n	8003ecc <_free_r+0x90>
 8003e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e46:	9001      	str	r0, [sp, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e4e:	bfb8      	it	lt
 8003e50:	18e4      	addlt	r4, r4, r3
 8003e52:	f000 f98f 	bl	8004174 <__malloc_lock>
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <_free_r+0x94>)
 8003e58:	9801      	ldr	r0, [sp, #4]
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	b933      	cbnz	r3, 8003e6c <_free_r+0x30>
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	6014      	str	r4, [r2, #0]
 8003e62:	b003      	add	sp, #12
 8003e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e68:	f000 b98a 	b.w	8004180 <__malloc_unlock>
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	d908      	bls.n	8003e82 <_free_r+0x46>
 8003e70:	6825      	ldr	r5, [r4, #0]
 8003e72:	1961      	adds	r1, r4, r5
 8003e74:	428b      	cmp	r3, r1
 8003e76:	bf01      	itttt	eq
 8003e78:	6819      	ldreq	r1, [r3, #0]
 8003e7a:	685b      	ldreq	r3, [r3, #4]
 8003e7c:	1949      	addeq	r1, r1, r5
 8003e7e:	6021      	streq	r1, [r4, #0]
 8003e80:	e7ed      	b.n	8003e5e <_free_r+0x22>
 8003e82:	461a      	mov	r2, r3
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b10b      	cbz	r3, 8003e8c <_free_r+0x50>
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	d9fa      	bls.n	8003e82 <_free_r+0x46>
 8003e8c:	6811      	ldr	r1, [r2, #0]
 8003e8e:	1855      	adds	r5, r2, r1
 8003e90:	42a5      	cmp	r5, r4
 8003e92:	d10b      	bne.n	8003eac <_free_r+0x70>
 8003e94:	6824      	ldr	r4, [r4, #0]
 8003e96:	4421      	add	r1, r4
 8003e98:	1854      	adds	r4, r2, r1
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6011      	str	r1, [r2, #0]
 8003e9e:	d1e0      	bne.n	8003e62 <_free_r+0x26>
 8003ea0:	681c      	ldr	r4, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	6053      	str	r3, [r2, #4]
 8003ea6:	4421      	add	r1, r4
 8003ea8:	6011      	str	r1, [r2, #0]
 8003eaa:	e7da      	b.n	8003e62 <_free_r+0x26>
 8003eac:	d902      	bls.n	8003eb4 <_free_r+0x78>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	6003      	str	r3, [r0, #0]
 8003eb2:	e7d6      	b.n	8003e62 <_free_r+0x26>
 8003eb4:	6825      	ldr	r5, [r4, #0]
 8003eb6:	1961      	adds	r1, r4, r5
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	bf04      	itt	eq
 8003ebc:	6819      	ldreq	r1, [r3, #0]
 8003ebe:	685b      	ldreq	r3, [r3, #4]
 8003ec0:	6063      	str	r3, [r4, #4]
 8003ec2:	bf04      	itt	eq
 8003ec4:	1949      	addeq	r1, r1, r5
 8003ec6:	6021      	streq	r1, [r4, #0]
 8003ec8:	6054      	str	r4, [r2, #4]
 8003eca:	e7ca      	b.n	8003e62 <_free_r+0x26>
 8003ecc:	b003      	add	sp, #12
 8003ece:	bd30      	pop	{r4, r5, pc}
 8003ed0:	20000214 	.word	0x20000214

08003ed4 <sbrk_aligned>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4e0e      	ldr	r6, [pc, #56]	; (8003f10 <sbrk_aligned+0x3c>)
 8003ed8:	460c      	mov	r4, r1
 8003eda:	6831      	ldr	r1, [r6, #0]
 8003edc:	4605      	mov	r5, r0
 8003ede:	b911      	cbnz	r1, 8003ee6 <sbrk_aligned+0x12>
 8003ee0:	f000 f88c 	bl	8003ffc <_sbrk_r>
 8003ee4:	6030      	str	r0, [r6, #0]
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 f887 	bl	8003ffc <_sbrk_r>
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	d00a      	beq.n	8003f08 <sbrk_aligned+0x34>
 8003ef2:	1cc4      	adds	r4, r0, #3
 8003ef4:	f024 0403 	bic.w	r4, r4, #3
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d007      	beq.n	8003f0c <sbrk_aligned+0x38>
 8003efc:	1a21      	subs	r1, r4, r0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 f87c 	bl	8003ffc <_sbrk_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d101      	bne.n	8003f0c <sbrk_aligned+0x38>
 8003f08:	f04f 34ff 	mov.w	r4, #4294967295
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	20000218 	.word	0x20000218

08003f14 <_malloc_r>:
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	1ccd      	adds	r5, r1, #3
 8003f1a:	f025 0503 	bic.w	r5, r5, #3
 8003f1e:	3508      	adds	r5, #8
 8003f20:	2d0c      	cmp	r5, #12
 8003f22:	bf38      	it	cc
 8003f24:	250c      	movcc	r5, #12
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	4607      	mov	r7, r0
 8003f2a:	db01      	blt.n	8003f30 <_malloc_r+0x1c>
 8003f2c:	42a9      	cmp	r1, r5
 8003f2e:	d905      	bls.n	8003f3c <_malloc_r+0x28>
 8003f30:	230c      	movs	r3, #12
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	2600      	movs	r6, #0
 8003f36:	4630      	mov	r0, r6
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	4e2e      	ldr	r6, [pc, #184]	; (8003ff8 <_malloc_r+0xe4>)
 8003f3e:	f000 f919 	bl	8004174 <__malloc_lock>
 8003f42:	6833      	ldr	r3, [r6, #0]
 8003f44:	461c      	mov	r4, r3
 8003f46:	bb34      	cbnz	r4, 8003f96 <_malloc_r+0x82>
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff ffc2 	bl	8003ed4 <sbrk_aligned>
 8003f50:	1c43      	adds	r3, r0, #1
 8003f52:	4604      	mov	r4, r0
 8003f54:	d14d      	bne.n	8003ff2 <_malloc_r+0xde>
 8003f56:	6834      	ldr	r4, [r6, #0]
 8003f58:	4626      	mov	r6, r4
 8003f5a:	2e00      	cmp	r6, #0
 8003f5c:	d140      	bne.n	8003fe0 <_malloc_r+0xcc>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	4631      	mov	r1, r6
 8003f62:	4638      	mov	r0, r7
 8003f64:	eb04 0803 	add.w	r8, r4, r3
 8003f68:	f000 f848 	bl	8003ffc <_sbrk_r>
 8003f6c:	4580      	cmp	r8, r0
 8003f6e:	d13a      	bne.n	8003fe6 <_malloc_r+0xd2>
 8003f70:	6821      	ldr	r1, [r4, #0]
 8003f72:	3503      	adds	r5, #3
 8003f74:	1a6d      	subs	r5, r5, r1
 8003f76:	f025 0503 	bic.w	r5, r5, #3
 8003f7a:	3508      	adds	r5, #8
 8003f7c:	2d0c      	cmp	r5, #12
 8003f7e:	bf38      	it	cc
 8003f80:	250c      	movcc	r5, #12
 8003f82:	4629      	mov	r1, r5
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff ffa5 	bl	8003ed4 <sbrk_aligned>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d02b      	beq.n	8003fe6 <_malloc_r+0xd2>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	442b      	add	r3, r5
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	e00e      	b.n	8003fb4 <_malloc_r+0xa0>
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	1b52      	subs	r2, r2, r5
 8003f9a:	d41e      	bmi.n	8003fda <_malloc_r+0xc6>
 8003f9c:	2a0b      	cmp	r2, #11
 8003f9e:	d916      	bls.n	8003fce <_malloc_r+0xba>
 8003fa0:	1961      	adds	r1, r4, r5
 8003fa2:	42a3      	cmp	r3, r4
 8003fa4:	6025      	str	r5, [r4, #0]
 8003fa6:	bf18      	it	ne
 8003fa8:	6059      	strne	r1, [r3, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	bf08      	it	eq
 8003fae:	6031      	streq	r1, [r6, #0]
 8003fb0:	5162      	str	r2, [r4, r5]
 8003fb2:	604b      	str	r3, [r1, #4]
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f104 060b 	add.w	r6, r4, #11
 8003fba:	f000 f8e1 	bl	8004180 <__malloc_unlock>
 8003fbe:	f026 0607 	bic.w	r6, r6, #7
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	1af2      	subs	r2, r6, r3
 8003fc6:	d0b6      	beq.n	8003f36 <_malloc_r+0x22>
 8003fc8:	1b9b      	subs	r3, r3, r6
 8003fca:	50a3      	str	r3, [r4, r2]
 8003fcc:	e7b3      	b.n	8003f36 <_malloc_r+0x22>
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	bf0c      	ite	eq
 8003fd4:	6032      	streq	r2, [r6, #0]
 8003fd6:	605a      	strne	r2, [r3, #4]
 8003fd8:	e7ec      	b.n	8003fb4 <_malloc_r+0xa0>
 8003fda:	4623      	mov	r3, r4
 8003fdc:	6864      	ldr	r4, [r4, #4]
 8003fde:	e7b2      	b.n	8003f46 <_malloc_r+0x32>
 8003fe0:	4634      	mov	r4, r6
 8003fe2:	6876      	ldr	r6, [r6, #4]
 8003fe4:	e7b9      	b.n	8003f5a <_malloc_r+0x46>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4638      	mov	r0, r7
 8003fec:	f000 f8c8 	bl	8004180 <__malloc_unlock>
 8003ff0:	e7a1      	b.n	8003f36 <_malloc_r+0x22>
 8003ff2:	6025      	str	r5, [r4, #0]
 8003ff4:	e7de      	b.n	8003fb4 <_malloc_r+0xa0>
 8003ff6:	bf00      	nop
 8003ff8:	20000214 	.word	0x20000214

08003ffc <_sbrk_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4d06      	ldr	r5, [pc, #24]	; (8004018 <_sbrk_r+0x1c>)
 8004000:	2300      	movs	r3, #0
 8004002:	4604      	mov	r4, r0
 8004004:	4608      	mov	r0, r1
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	f7fc ff06 	bl	8000e18 <_sbrk>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_sbrk_r+0x1a>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_sbrk_r+0x1a>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	2000021c 	.word	0x2000021c

0800401c <siprintf>:
 800401c:	b40e      	push	{r1, r2, r3}
 800401e:	b500      	push	{lr}
 8004020:	b09c      	sub	sp, #112	; 0x70
 8004022:	ab1d      	add	r3, sp, #116	; 0x74
 8004024:	9002      	str	r0, [sp, #8]
 8004026:	9006      	str	r0, [sp, #24]
 8004028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800402c:	4809      	ldr	r0, [pc, #36]	; (8004054 <siprintf+0x38>)
 800402e:	9107      	str	r1, [sp, #28]
 8004030:	9104      	str	r1, [sp, #16]
 8004032:	4909      	ldr	r1, [pc, #36]	; (8004058 <siprintf+0x3c>)
 8004034:	f853 2b04 	ldr.w	r2, [r3], #4
 8004038:	9105      	str	r1, [sp, #20]
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	a902      	add	r1, sp, #8
 8004040:	f000 f900 	bl	8004244 <_svfiprintf_r>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	b01c      	add	sp, #112	; 0x70
 800404c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004050:	b003      	add	sp, #12
 8004052:	4770      	bx	lr
 8004054:	20000054 	.word	0x20000054
 8004058:	ffff0208 	.word	0xffff0208

0800405c <_strtol_l.constprop.0>:
 800405c:	2b01      	cmp	r3, #1
 800405e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004062:	d001      	beq.n	8004068 <_strtol_l.constprop.0+0xc>
 8004064:	2b24      	cmp	r3, #36	; 0x24
 8004066:	d906      	bls.n	8004076 <_strtol_l.constprop.0+0x1a>
 8004068:	f7ff feb6 	bl	8003dd8 <__errno>
 800406c:	2316      	movs	r3, #22
 800406e:	6003      	str	r3, [r0, #0]
 8004070:	2000      	movs	r0, #0
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800415c <_strtol_l.constprop.0+0x100>
 800407a:	460d      	mov	r5, r1
 800407c:	462e      	mov	r6, r5
 800407e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004082:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004086:	f017 0708 	ands.w	r7, r7, #8
 800408a:	d1f7      	bne.n	800407c <_strtol_l.constprop.0+0x20>
 800408c:	2c2d      	cmp	r4, #45	; 0x2d
 800408e:	d132      	bne.n	80040f6 <_strtol_l.constprop.0+0x9a>
 8004090:	782c      	ldrb	r4, [r5, #0]
 8004092:	2701      	movs	r7, #1
 8004094:	1cb5      	adds	r5, r6, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d05b      	beq.n	8004152 <_strtol_l.constprop.0+0xf6>
 800409a:	2b10      	cmp	r3, #16
 800409c:	d109      	bne.n	80040b2 <_strtol_l.constprop.0+0x56>
 800409e:	2c30      	cmp	r4, #48	; 0x30
 80040a0:	d107      	bne.n	80040b2 <_strtol_l.constprop.0+0x56>
 80040a2:	782c      	ldrb	r4, [r5, #0]
 80040a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80040a8:	2c58      	cmp	r4, #88	; 0x58
 80040aa:	d14d      	bne.n	8004148 <_strtol_l.constprop.0+0xec>
 80040ac:	786c      	ldrb	r4, [r5, #1]
 80040ae:	2310      	movs	r3, #16
 80040b0:	3502      	adds	r5, #2
 80040b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80040b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80040ba:	f04f 0c00 	mov.w	ip, #0
 80040be:	fbb8 f9f3 	udiv	r9, r8, r3
 80040c2:	4666      	mov	r6, ip
 80040c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80040c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80040cc:	f1be 0f09 	cmp.w	lr, #9
 80040d0:	d816      	bhi.n	8004100 <_strtol_l.constprop.0+0xa4>
 80040d2:	4674      	mov	r4, lr
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	dd24      	ble.n	8004122 <_strtol_l.constprop.0+0xc6>
 80040d8:	f1bc 0f00 	cmp.w	ip, #0
 80040dc:	db1e      	blt.n	800411c <_strtol_l.constprop.0+0xc0>
 80040de:	45b1      	cmp	r9, r6
 80040e0:	d31c      	bcc.n	800411c <_strtol_l.constprop.0+0xc0>
 80040e2:	d101      	bne.n	80040e8 <_strtol_l.constprop.0+0x8c>
 80040e4:	45a2      	cmp	sl, r4
 80040e6:	db19      	blt.n	800411c <_strtol_l.constprop.0+0xc0>
 80040e8:	fb06 4603 	mla	r6, r6, r3, r4
 80040ec:	f04f 0c01 	mov.w	ip, #1
 80040f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040f4:	e7e8      	b.n	80040c8 <_strtol_l.constprop.0+0x6c>
 80040f6:	2c2b      	cmp	r4, #43	; 0x2b
 80040f8:	bf04      	itt	eq
 80040fa:	782c      	ldrbeq	r4, [r5, #0]
 80040fc:	1cb5      	addeq	r5, r6, #2
 80040fe:	e7ca      	b.n	8004096 <_strtol_l.constprop.0+0x3a>
 8004100:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004104:	f1be 0f19 	cmp.w	lr, #25
 8004108:	d801      	bhi.n	800410e <_strtol_l.constprop.0+0xb2>
 800410a:	3c37      	subs	r4, #55	; 0x37
 800410c:	e7e2      	b.n	80040d4 <_strtol_l.constprop.0+0x78>
 800410e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004112:	f1be 0f19 	cmp.w	lr, #25
 8004116:	d804      	bhi.n	8004122 <_strtol_l.constprop.0+0xc6>
 8004118:	3c57      	subs	r4, #87	; 0x57
 800411a:	e7db      	b.n	80040d4 <_strtol_l.constprop.0+0x78>
 800411c:	f04f 3cff 	mov.w	ip, #4294967295
 8004120:	e7e6      	b.n	80040f0 <_strtol_l.constprop.0+0x94>
 8004122:	f1bc 0f00 	cmp.w	ip, #0
 8004126:	da05      	bge.n	8004134 <_strtol_l.constprop.0+0xd8>
 8004128:	2322      	movs	r3, #34	; 0x22
 800412a:	6003      	str	r3, [r0, #0]
 800412c:	4646      	mov	r6, r8
 800412e:	b942      	cbnz	r2, 8004142 <_strtol_l.constprop.0+0xe6>
 8004130:	4630      	mov	r0, r6
 8004132:	e79e      	b.n	8004072 <_strtol_l.constprop.0+0x16>
 8004134:	b107      	cbz	r7, 8004138 <_strtol_l.constprop.0+0xdc>
 8004136:	4276      	negs	r6, r6
 8004138:	2a00      	cmp	r2, #0
 800413a:	d0f9      	beq.n	8004130 <_strtol_l.constprop.0+0xd4>
 800413c:	f1bc 0f00 	cmp.w	ip, #0
 8004140:	d000      	beq.n	8004144 <_strtol_l.constprop.0+0xe8>
 8004142:	1e69      	subs	r1, r5, #1
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	e7f3      	b.n	8004130 <_strtol_l.constprop.0+0xd4>
 8004148:	2430      	movs	r4, #48	; 0x30
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1b1      	bne.n	80040b2 <_strtol_l.constprop.0+0x56>
 800414e:	2308      	movs	r3, #8
 8004150:	e7af      	b.n	80040b2 <_strtol_l.constprop.0+0x56>
 8004152:	2c30      	cmp	r4, #48	; 0x30
 8004154:	d0a5      	beq.n	80040a2 <_strtol_l.constprop.0+0x46>
 8004156:	230a      	movs	r3, #10
 8004158:	e7ab      	b.n	80040b2 <_strtol_l.constprop.0+0x56>
 800415a:	bf00      	nop
 800415c:	080049f5 	.word	0x080049f5

08004160 <strtol>:
 8004160:	4613      	mov	r3, r2
 8004162:	460a      	mov	r2, r1
 8004164:	4601      	mov	r1, r0
 8004166:	4802      	ldr	r0, [pc, #8]	; (8004170 <strtol+0x10>)
 8004168:	6800      	ldr	r0, [r0, #0]
 800416a:	f7ff bf77 	b.w	800405c <_strtol_l.constprop.0>
 800416e:	bf00      	nop
 8004170:	20000054 	.word	0x20000054

08004174 <__malloc_lock>:
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <__malloc_lock+0x8>)
 8004176:	f000 baf9 	b.w	800476c <__retarget_lock_acquire_recursive>
 800417a:	bf00      	nop
 800417c:	20000220 	.word	0x20000220

08004180 <__malloc_unlock>:
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <__malloc_unlock+0x8>)
 8004182:	f000 baf4 	b.w	800476e <__retarget_lock_release_recursive>
 8004186:	bf00      	nop
 8004188:	20000220 	.word	0x20000220

0800418c <__ssputs_r>:
 800418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004190:	688e      	ldr	r6, [r1, #8]
 8004192:	429e      	cmp	r6, r3
 8004194:	4682      	mov	sl, r0
 8004196:	460c      	mov	r4, r1
 8004198:	4690      	mov	r8, r2
 800419a:	461f      	mov	r7, r3
 800419c:	d838      	bhi.n	8004210 <__ssputs_r+0x84>
 800419e:	898a      	ldrh	r2, [r1, #12]
 80041a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041a4:	d032      	beq.n	800420c <__ssputs_r+0x80>
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	6909      	ldr	r1, [r1, #16]
 80041aa:	eba5 0901 	sub.w	r9, r5, r1
 80041ae:	6965      	ldr	r5, [r4, #20]
 80041b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b8:	3301      	adds	r3, #1
 80041ba:	444b      	add	r3, r9
 80041bc:	106d      	asrs	r5, r5, #1
 80041be:	429d      	cmp	r5, r3
 80041c0:	bf38      	it	cc
 80041c2:	461d      	movcc	r5, r3
 80041c4:	0553      	lsls	r3, r2, #21
 80041c6:	d531      	bpl.n	800422c <__ssputs_r+0xa0>
 80041c8:	4629      	mov	r1, r5
 80041ca:	f7ff fea3 	bl	8003f14 <_malloc_r>
 80041ce:	4606      	mov	r6, r0
 80041d0:	b950      	cbnz	r0, 80041e8 <__ssputs_r+0x5c>
 80041d2:	230c      	movs	r3, #12
 80041d4:	f8ca 3000 	str.w	r3, [sl]
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041de:	81a3      	strh	r3, [r4, #12]
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	6921      	ldr	r1, [r4, #16]
 80041ea:	464a      	mov	r2, r9
 80041ec:	f000 fac0 	bl	8004770 <memcpy>
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	6126      	str	r6, [r4, #16]
 80041fe:	6165      	str	r5, [r4, #20]
 8004200:	444e      	add	r6, r9
 8004202:	eba5 0509 	sub.w	r5, r5, r9
 8004206:	6026      	str	r6, [r4, #0]
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	463e      	mov	r6, r7
 800420c:	42be      	cmp	r6, r7
 800420e:	d900      	bls.n	8004212 <__ssputs_r+0x86>
 8004210:	463e      	mov	r6, r7
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	4632      	mov	r2, r6
 8004216:	4641      	mov	r1, r8
 8004218:	f000 fab8 	bl	800478c <memmove>
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	1b9b      	subs	r3, r3, r6
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	4433      	add	r3, r6
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	2000      	movs	r0, #0
 800422a:	e7db      	b.n	80041e4 <__ssputs_r+0x58>
 800422c:	462a      	mov	r2, r5
 800422e:	f000 fac7 	bl	80047c0 <_realloc_r>
 8004232:	4606      	mov	r6, r0
 8004234:	2800      	cmp	r0, #0
 8004236:	d1e1      	bne.n	80041fc <__ssputs_r+0x70>
 8004238:	6921      	ldr	r1, [r4, #16]
 800423a:	4650      	mov	r0, sl
 800423c:	f7ff fdfe 	bl	8003e3c <_free_r>
 8004240:	e7c7      	b.n	80041d2 <__ssputs_r+0x46>
	...

08004244 <_svfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	4698      	mov	r8, r3
 800424a:	898b      	ldrh	r3, [r1, #12]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	b09d      	sub	sp, #116	; 0x74
 8004250:	4607      	mov	r7, r0
 8004252:	460d      	mov	r5, r1
 8004254:	4614      	mov	r4, r2
 8004256:	d50e      	bpl.n	8004276 <_svfiprintf_r+0x32>
 8004258:	690b      	ldr	r3, [r1, #16]
 800425a:	b963      	cbnz	r3, 8004276 <_svfiprintf_r+0x32>
 800425c:	2140      	movs	r1, #64	; 0x40
 800425e:	f7ff fe59 	bl	8003f14 <_malloc_r>
 8004262:	6028      	str	r0, [r5, #0]
 8004264:	6128      	str	r0, [r5, #16]
 8004266:	b920      	cbnz	r0, 8004272 <_svfiprintf_r+0x2e>
 8004268:	230c      	movs	r3, #12
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e0d1      	b.n	8004416 <_svfiprintf_r+0x1d2>
 8004272:	2340      	movs	r3, #64	; 0x40
 8004274:	616b      	str	r3, [r5, #20]
 8004276:	2300      	movs	r3, #0
 8004278:	9309      	str	r3, [sp, #36]	; 0x24
 800427a:	2320      	movs	r3, #32
 800427c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004280:	f8cd 800c 	str.w	r8, [sp, #12]
 8004284:	2330      	movs	r3, #48	; 0x30
 8004286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004430 <_svfiprintf_r+0x1ec>
 800428a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800428e:	f04f 0901 	mov.w	r9, #1
 8004292:	4623      	mov	r3, r4
 8004294:	469a      	mov	sl, r3
 8004296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800429a:	b10a      	cbz	r2, 80042a0 <_svfiprintf_r+0x5c>
 800429c:	2a25      	cmp	r2, #37	; 0x25
 800429e:	d1f9      	bne.n	8004294 <_svfiprintf_r+0x50>
 80042a0:	ebba 0b04 	subs.w	fp, sl, r4
 80042a4:	d00b      	beq.n	80042be <_svfiprintf_r+0x7a>
 80042a6:	465b      	mov	r3, fp
 80042a8:	4622      	mov	r2, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	4638      	mov	r0, r7
 80042ae:	f7ff ff6d 	bl	800418c <__ssputs_r>
 80042b2:	3001      	adds	r0, #1
 80042b4:	f000 80aa 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ba:	445a      	add	r2, fp
 80042bc:	9209      	str	r2, [sp, #36]	; 0x24
 80042be:	f89a 3000 	ldrb.w	r3, [sl]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a2 	beq.w	800440c <_svfiprintf_r+0x1c8>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295
 80042ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d2:	f10a 0a01 	add.w	sl, sl, #1
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042de:	931a      	str	r3, [sp, #104]	; 0x68
 80042e0:	4654      	mov	r4, sl
 80042e2:	2205      	movs	r2, #5
 80042e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e8:	4851      	ldr	r0, [pc, #324]	; (8004430 <_svfiprintf_r+0x1ec>)
 80042ea:	f7fb ff81 	bl	80001f0 <memchr>
 80042ee:	9a04      	ldr	r2, [sp, #16]
 80042f0:	b9d8      	cbnz	r0, 800432a <_svfiprintf_r+0xe6>
 80042f2:	06d0      	lsls	r0, r2, #27
 80042f4:	bf44      	itt	mi
 80042f6:	2320      	movmi	r3, #32
 80042f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fc:	0711      	lsls	r1, r2, #28
 80042fe:	bf44      	itt	mi
 8004300:	232b      	movmi	r3, #43	; 0x2b
 8004302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004306:	f89a 3000 	ldrb.w	r3, [sl]
 800430a:	2b2a      	cmp	r3, #42	; 0x2a
 800430c:	d015      	beq.n	800433a <_svfiprintf_r+0xf6>
 800430e:	9a07      	ldr	r2, [sp, #28]
 8004310:	4654      	mov	r4, sl
 8004312:	2000      	movs	r0, #0
 8004314:	f04f 0c0a 	mov.w	ip, #10
 8004318:	4621      	mov	r1, r4
 800431a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431e:	3b30      	subs	r3, #48	; 0x30
 8004320:	2b09      	cmp	r3, #9
 8004322:	d94e      	bls.n	80043c2 <_svfiprintf_r+0x17e>
 8004324:	b1b0      	cbz	r0, 8004354 <_svfiprintf_r+0x110>
 8004326:	9207      	str	r2, [sp, #28]
 8004328:	e014      	b.n	8004354 <_svfiprintf_r+0x110>
 800432a:	eba0 0308 	sub.w	r3, r0, r8
 800432e:	fa09 f303 	lsl.w	r3, r9, r3
 8004332:	4313      	orrs	r3, r2
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	46a2      	mov	sl, r4
 8004338:	e7d2      	b.n	80042e0 <_svfiprintf_r+0x9c>
 800433a:	9b03      	ldr	r3, [sp, #12]
 800433c:	1d19      	adds	r1, r3, #4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	9103      	str	r1, [sp, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bfbb      	ittet	lt
 8004346:	425b      	neglt	r3, r3
 8004348:	f042 0202 	orrlt.w	r2, r2, #2
 800434c:	9307      	strge	r3, [sp, #28]
 800434e:	9307      	strlt	r3, [sp, #28]
 8004350:	bfb8      	it	lt
 8004352:	9204      	strlt	r2, [sp, #16]
 8004354:	7823      	ldrb	r3, [r4, #0]
 8004356:	2b2e      	cmp	r3, #46	; 0x2e
 8004358:	d10c      	bne.n	8004374 <_svfiprintf_r+0x130>
 800435a:	7863      	ldrb	r3, [r4, #1]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d135      	bne.n	80043cc <_svfiprintf_r+0x188>
 8004360:	9b03      	ldr	r3, [sp, #12]
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	9203      	str	r2, [sp, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	bfb8      	it	lt
 800436c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004370:	3402      	adds	r4, #2
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004440 <_svfiprintf_r+0x1fc>
 8004378:	7821      	ldrb	r1, [r4, #0]
 800437a:	2203      	movs	r2, #3
 800437c:	4650      	mov	r0, sl
 800437e:	f7fb ff37 	bl	80001f0 <memchr>
 8004382:	b140      	cbz	r0, 8004396 <_svfiprintf_r+0x152>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	eba0 000a 	sub.w	r0, r0, sl
 800438a:	fa03 f000 	lsl.w	r0, r3, r0
 800438e:	9b04      	ldr	r3, [sp, #16]
 8004390:	4303      	orrs	r3, r0
 8004392:	3401      	adds	r4, #1
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439a:	4826      	ldr	r0, [pc, #152]	; (8004434 <_svfiprintf_r+0x1f0>)
 800439c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043a0:	2206      	movs	r2, #6
 80043a2:	f7fb ff25 	bl	80001f0 <memchr>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d038      	beq.n	800441c <_svfiprintf_r+0x1d8>
 80043aa:	4b23      	ldr	r3, [pc, #140]	; (8004438 <_svfiprintf_r+0x1f4>)
 80043ac:	bb1b      	cbnz	r3, 80043f6 <_svfiprintf_r+0x1b2>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	3307      	adds	r3, #7
 80043b2:	f023 0307 	bic.w	r3, r3, #7
 80043b6:	3308      	adds	r3, #8
 80043b8:	9303      	str	r3, [sp, #12]
 80043ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043bc:	4433      	add	r3, r6
 80043be:	9309      	str	r3, [sp, #36]	; 0x24
 80043c0:	e767      	b.n	8004292 <_svfiprintf_r+0x4e>
 80043c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043c6:	460c      	mov	r4, r1
 80043c8:	2001      	movs	r0, #1
 80043ca:	e7a5      	b.n	8004318 <_svfiprintf_r+0xd4>
 80043cc:	2300      	movs	r3, #0
 80043ce:	3401      	adds	r4, #1
 80043d0:	9305      	str	r3, [sp, #20]
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0c0a 	mov.w	ip, #10
 80043d8:	4620      	mov	r0, r4
 80043da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043de:	3a30      	subs	r2, #48	; 0x30
 80043e0:	2a09      	cmp	r2, #9
 80043e2:	d903      	bls.n	80043ec <_svfiprintf_r+0x1a8>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0c5      	beq.n	8004374 <_svfiprintf_r+0x130>
 80043e8:	9105      	str	r1, [sp, #20]
 80043ea:	e7c3      	b.n	8004374 <_svfiprintf_r+0x130>
 80043ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80043f0:	4604      	mov	r4, r0
 80043f2:	2301      	movs	r3, #1
 80043f4:	e7f0      	b.n	80043d8 <_svfiprintf_r+0x194>
 80043f6:	ab03      	add	r3, sp, #12
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	462a      	mov	r2, r5
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <_svfiprintf_r+0x1f8>)
 80043fe:	a904      	add	r1, sp, #16
 8004400:	4638      	mov	r0, r7
 8004402:	f3af 8000 	nop.w
 8004406:	1c42      	adds	r2, r0, #1
 8004408:	4606      	mov	r6, r0
 800440a:	d1d6      	bne.n	80043ba <_svfiprintf_r+0x176>
 800440c:	89ab      	ldrh	r3, [r5, #12]
 800440e:	065b      	lsls	r3, r3, #25
 8004410:	f53f af2c 	bmi.w	800426c <_svfiprintf_r+0x28>
 8004414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004416:	b01d      	add	sp, #116	; 0x74
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	ab03      	add	r3, sp, #12
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	462a      	mov	r2, r5
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <_svfiprintf_r+0x1f8>)
 8004424:	a904      	add	r1, sp, #16
 8004426:	4638      	mov	r0, r7
 8004428:	f000 f87a 	bl	8004520 <_printf_i>
 800442c:	e7eb      	b.n	8004406 <_svfiprintf_r+0x1c2>
 800442e:	bf00      	nop
 8004430:	08004af5 	.word	0x08004af5
 8004434:	08004aff 	.word	0x08004aff
 8004438:	00000000 	.word	0x00000000
 800443c:	0800418d 	.word	0x0800418d
 8004440:	08004afb 	.word	0x08004afb

08004444 <_printf_common>:
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	4616      	mov	r6, r2
 800444a:	4699      	mov	r9, r3
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004454:	4293      	cmp	r3, r2
 8004456:	bfb8      	it	lt
 8004458:	4613      	movlt	r3, r2
 800445a:	6033      	str	r3, [r6, #0]
 800445c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004460:	4607      	mov	r7, r0
 8004462:	460c      	mov	r4, r1
 8004464:	b10a      	cbz	r2, 800446a <_printf_common+0x26>
 8004466:	3301      	adds	r3, #1
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	0699      	lsls	r1, r3, #26
 800446e:	bf42      	ittt	mi
 8004470:	6833      	ldrmi	r3, [r6, #0]
 8004472:	3302      	addmi	r3, #2
 8004474:	6033      	strmi	r3, [r6, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	f015 0506 	ands.w	r5, r5, #6
 800447c:	d106      	bne.n	800448c <_printf_common+0x48>
 800447e:	f104 0a19 	add.w	sl, r4, #25
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	6832      	ldr	r2, [r6, #0]
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ab      	cmp	r3, r5
 800448a:	dc26      	bgt.n	80044da <_printf_common+0x96>
 800448c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004490:	1e13      	subs	r3, r2, #0
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	2301      	movne	r3, #1
 8004498:	0692      	lsls	r2, r2, #26
 800449a:	d42b      	bmi.n	80044f4 <_printf_common+0xb0>
 800449c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a0:	4649      	mov	r1, r9
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d01e      	beq.n	80044e8 <_printf_common+0xa4>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	68e5      	ldr	r5, [r4, #12]
 80044ae:	6832      	ldr	r2, [r6, #0]
 80044b0:	f003 0306 	and.w	r3, r3, #6
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	bf08      	it	eq
 80044b8:	1aad      	subeq	r5, r5, r2
 80044ba:	68a3      	ldr	r3, [r4, #8]
 80044bc:	6922      	ldr	r2, [r4, #16]
 80044be:	bf0c      	ite	eq
 80044c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c4:	2500      	movne	r5, #0
 80044c6:	4293      	cmp	r3, r2
 80044c8:	bfc4      	itt	gt
 80044ca:	1a9b      	subgt	r3, r3, r2
 80044cc:	18ed      	addgt	r5, r5, r3
 80044ce:	2600      	movs	r6, #0
 80044d0:	341a      	adds	r4, #26
 80044d2:	42b5      	cmp	r5, r6
 80044d4:	d11a      	bne.n	800450c <_printf_common+0xc8>
 80044d6:	2000      	movs	r0, #0
 80044d8:	e008      	b.n	80044ec <_printf_common+0xa8>
 80044da:	2301      	movs	r3, #1
 80044dc:	4652      	mov	r2, sl
 80044de:	4649      	mov	r1, r9
 80044e0:	4638      	mov	r0, r7
 80044e2:	47c0      	blx	r8
 80044e4:	3001      	adds	r0, #1
 80044e6:	d103      	bne.n	80044f0 <_printf_common+0xac>
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f0:	3501      	adds	r5, #1
 80044f2:	e7c6      	b.n	8004482 <_printf_common+0x3e>
 80044f4:	18e1      	adds	r1, r4, r3
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	2030      	movs	r0, #48	; 0x30
 80044fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044fe:	4422      	add	r2, r4
 8004500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004508:	3302      	adds	r3, #2
 800450a:	e7c7      	b.n	800449c <_printf_common+0x58>
 800450c:	2301      	movs	r3, #1
 800450e:	4622      	mov	r2, r4
 8004510:	4649      	mov	r1, r9
 8004512:	4638      	mov	r0, r7
 8004514:	47c0      	blx	r8
 8004516:	3001      	adds	r0, #1
 8004518:	d0e6      	beq.n	80044e8 <_printf_common+0xa4>
 800451a:	3601      	adds	r6, #1
 800451c:	e7d9      	b.n	80044d2 <_printf_common+0x8e>
	...

08004520 <_printf_i>:
 8004520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004524:	7e0f      	ldrb	r7, [r1, #24]
 8004526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004528:	2f78      	cmp	r7, #120	; 0x78
 800452a:	4691      	mov	r9, r2
 800452c:	4680      	mov	r8, r0
 800452e:	460c      	mov	r4, r1
 8004530:	469a      	mov	sl, r3
 8004532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004536:	d807      	bhi.n	8004548 <_printf_i+0x28>
 8004538:	2f62      	cmp	r7, #98	; 0x62
 800453a:	d80a      	bhi.n	8004552 <_printf_i+0x32>
 800453c:	2f00      	cmp	r7, #0
 800453e:	f000 80d8 	beq.w	80046f2 <_printf_i+0x1d2>
 8004542:	2f58      	cmp	r7, #88	; 0x58
 8004544:	f000 80a3 	beq.w	800468e <_printf_i+0x16e>
 8004548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800454c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004550:	e03a      	b.n	80045c8 <_printf_i+0xa8>
 8004552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004556:	2b15      	cmp	r3, #21
 8004558:	d8f6      	bhi.n	8004548 <_printf_i+0x28>
 800455a:	a101      	add	r1, pc, #4	; (adr r1, 8004560 <_printf_i+0x40>)
 800455c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004560:	080045b9 	.word	0x080045b9
 8004564:	080045cd 	.word	0x080045cd
 8004568:	08004549 	.word	0x08004549
 800456c:	08004549 	.word	0x08004549
 8004570:	08004549 	.word	0x08004549
 8004574:	08004549 	.word	0x08004549
 8004578:	080045cd 	.word	0x080045cd
 800457c:	08004549 	.word	0x08004549
 8004580:	08004549 	.word	0x08004549
 8004584:	08004549 	.word	0x08004549
 8004588:	08004549 	.word	0x08004549
 800458c:	080046d9 	.word	0x080046d9
 8004590:	080045fd 	.word	0x080045fd
 8004594:	080046bb 	.word	0x080046bb
 8004598:	08004549 	.word	0x08004549
 800459c:	08004549 	.word	0x08004549
 80045a0:	080046fb 	.word	0x080046fb
 80045a4:	08004549 	.word	0x08004549
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004549 	.word	0x08004549
 80045b0:	08004549 	.word	0x08004549
 80045b4:	080046c3 	.word	0x080046c3
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0a3      	b.n	8004714 <_printf_i+0x1f4>
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	6829      	ldr	r1, [r5, #0]
 80045d0:	0606      	lsls	r6, r0, #24
 80045d2:	f101 0304 	add.w	r3, r1, #4
 80045d6:	d50a      	bpl.n	80045ee <_printf_i+0xce>
 80045d8:	680e      	ldr	r6, [r1, #0]
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	2e00      	cmp	r6, #0
 80045de:	da03      	bge.n	80045e8 <_printf_i+0xc8>
 80045e0:	232d      	movs	r3, #45	; 0x2d
 80045e2:	4276      	negs	r6, r6
 80045e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e8:	485e      	ldr	r0, [pc, #376]	; (8004764 <_printf_i+0x244>)
 80045ea:	230a      	movs	r3, #10
 80045ec:	e019      	b.n	8004622 <_printf_i+0x102>
 80045ee:	680e      	ldr	r6, [r1, #0]
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045f6:	bf18      	it	ne
 80045f8:	b236      	sxthne	r6, r6
 80045fa:	e7ef      	b.n	80045dc <_printf_i+0xbc>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	1d19      	adds	r1, r3, #4
 8004602:	6029      	str	r1, [r5, #0]
 8004604:	0601      	lsls	r1, r0, #24
 8004606:	d501      	bpl.n	800460c <_printf_i+0xec>
 8004608:	681e      	ldr	r6, [r3, #0]
 800460a:	e002      	b.n	8004612 <_printf_i+0xf2>
 800460c:	0646      	lsls	r6, r0, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0xe8>
 8004610:	881e      	ldrh	r6, [r3, #0]
 8004612:	4854      	ldr	r0, [pc, #336]	; (8004764 <_printf_i+0x244>)
 8004614:	2f6f      	cmp	r7, #111	; 0x6f
 8004616:	bf0c      	ite	eq
 8004618:	2308      	moveq	r3, #8
 800461a:	230a      	movne	r3, #10
 800461c:	2100      	movs	r1, #0
 800461e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004622:	6865      	ldr	r5, [r4, #4]
 8004624:	60a5      	str	r5, [r4, #8]
 8004626:	2d00      	cmp	r5, #0
 8004628:	bfa2      	ittt	ge
 800462a:	6821      	ldrge	r1, [r4, #0]
 800462c:	f021 0104 	bicge.w	r1, r1, #4
 8004630:	6021      	strge	r1, [r4, #0]
 8004632:	b90e      	cbnz	r6, 8004638 <_printf_i+0x118>
 8004634:	2d00      	cmp	r5, #0
 8004636:	d04d      	beq.n	80046d4 <_printf_i+0x1b4>
 8004638:	4615      	mov	r5, r2
 800463a:	fbb6 f1f3 	udiv	r1, r6, r3
 800463e:	fb03 6711 	mls	r7, r3, r1, r6
 8004642:	5dc7      	ldrb	r7, [r0, r7]
 8004644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004648:	4637      	mov	r7, r6
 800464a:	42bb      	cmp	r3, r7
 800464c:	460e      	mov	r6, r1
 800464e:	d9f4      	bls.n	800463a <_printf_i+0x11a>
 8004650:	2b08      	cmp	r3, #8
 8004652:	d10b      	bne.n	800466c <_printf_i+0x14c>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07de      	lsls	r6, r3, #31
 8004658:	d508      	bpl.n	800466c <_printf_i+0x14c>
 800465a:	6923      	ldr	r3, [r4, #16]
 800465c:	6861      	ldr	r1, [r4, #4]
 800465e:	4299      	cmp	r1, r3
 8004660:	bfde      	ittt	le
 8004662:	2330      	movle	r3, #48	; 0x30
 8004664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800466c:	1b52      	subs	r2, r2, r5
 800466e:	6122      	str	r2, [r4, #16]
 8004670:	f8cd a000 	str.w	sl, [sp]
 8004674:	464b      	mov	r3, r9
 8004676:	aa03      	add	r2, sp, #12
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f7ff fee2 	bl	8004444 <_printf_common>
 8004680:	3001      	adds	r0, #1
 8004682:	d14c      	bne.n	800471e <_printf_i+0x1fe>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	b004      	add	sp, #16
 800468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468e:	4835      	ldr	r0, [pc, #212]	; (8004764 <_printf_i+0x244>)
 8004690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004694:	6829      	ldr	r1, [r5, #0]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	f851 6b04 	ldr.w	r6, [r1], #4
 800469c:	6029      	str	r1, [r5, #0]
 800469e:	061d      	lsls	r5, r3, #24
 80046a0:	d514      	bpl.n	80046cc <_printf_i+0x1ac>
 80046a2:	07df      	lsls	r7, r3, #31
 80046a4:	bf44      	itt	mi
 80046a6:	f043 0320 	orrmi.w	r3, r3, #32
 80046aa:	6023      	strmi	r3, [r4, #0]
 80046ac:	b91e      	cbnz	r6, 80046b6 <_printf_i+0x196>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	f023 0320 	bic.w	r3, r3, #32
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	2310      	movs	r3, #16
 80046b8:	e7b0      	b.n	800461c <_printf_i+0xfc>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f043 0320 	orr.w	r3, r3, #32
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	2378      	movs	r3, #120	; 0x78
 80046c4:	4828      	ldr	r0, [pc, #160]	; (8004768 <_printf_i+0x248>)
 80046c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ca:	e7e3      	b.n	8004694 <_printf_i+0x174>
 80046cc:	0659      	lsls	r1, r3, #25
 80046ce:	bf48      	it	mi
 80046d0:	b2b6      	uxthmi	r6, r6
 80046d2:	e7e6      	b.n	80046a2 <_printf_i+0x182>
 80046d4:	4615      	mov	r5, r2
 80046d6:	e7bb      	b.n	8004650 <_printf_i+0x130>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	6826      	ldr	r6, [r4, #0]
 80046dc:	6961      	ldr	r1, [r4, #20]
 80046de:	1d18      	adds	r0, r3, #4
 80046e0:	6028      	str	r0, [r5, #0]
 80046e2:	0635      	lsls	r5, r6, #24
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	d501      	bpl.n	80046ec <_printf_i+0x1cc>
 80046e8:	6019      	str	r1, [r3, #0]
 80046ea:	e002      	b.n	80046f2 <_printf_i+0x1d2>
 80046ec:	0670      	lsls	r0, r6, #25
 80046ee:	d5fb      	bpl.n	80046e8 <_printf_i+0x1c8>
 80046f0:	8019      	strh	r1, [r3, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	4615      	mov	r5, r2
 80046f8:	e7ba      	b.n	8004670 <_printf_i+0x150>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	681d      	ldr	r5, [r3, #0]
 8004702:	6862      	ldr	r2, [r4, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	4628      	mov	r0, r5
 8004708:	f7fb fd72 	bl	80001f0 <memchr>
 800470c:	b108      	cbz	r0, 8004712 <_printf_i+0x1f2>
 800470e:	1b40      	subs	r0, r0, r5
 8004710:	6060      	str	r0, [r4, #4]
 8004712:	6863      	ldr	r3, [r4, #4]
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	2300      	movs	r3, #0
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471c:	e7a8      	b.n	8004670 <_printf_i+0x150>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	462a      	mov	r2, r5
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d0ab      	beq.n	8004684 <_printf_i+0x164>
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	079b      	lsls	r3, r3, #30
 8004730:	d413      	bmi.n	800475a <_printf_i+0x23a>
 8004732:	68e0      	ldr	r0, [r4, #12]
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	4298      	cmp	r0, r3
 8004738:	bfb8      	it	lt
 800473a:	4618      	movlt	r0, r3
 800473c:	e7a4      	b.n	8004688 <_printf_i+0x168>
 800473e:	2301      	movs	r3, #1
 8004740:	4632      	mov	r2, r6
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	47d0      	blx	sl
 8004748:	3001      	adds	r0, #1
 800474a:	d09b      	beq.n	8004684 <_printf_i+0x164>
 800474c:	3501      	adds	r5, #1
 800474e:	68e3      	ldr	r3, [r4, #12]
 8004750:	9903      	ldr	r1, [sp, #12]
 8004752:	1a5b      	subs	r3, r3, r1
 8004754:	42ab      	cmp	r3, r5
 8004756:	dcf2      	bgt.n	800473e <_printf_i+0x21e>
 8004758:	e7eb      	b.n	8004732 <_printf_i+0x212>
 800475a:	2500      	movs	r5, #0
 800475c:	f104 0619 	add.w	r6, r4, #25
 8004760:	e7f5      	b.n	800474e <_printf_i+0x22e>
 8004762:	bf00      	nop
 8004764:	08004b06 	.word	0x08004b06
 8004768:	08004b17 	.word	0x08004b17

0800476c <__retarget_lock_acquire_recursive>:
 800476c:	4770      	bx	lr

0800476e <__retarget_lock_release_recursive>:
 800476e:	4770      	bx	lr

08004770 <memcpy>:
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	f100 33ff 	add.w	r3, r0, #4294967295
 8004778:	d100      	bne.n	800477c <memcpy+0xc>
 800477a:	4770      	bx	lr
 800477c:	b510      	push	{r4, lr}
 800477e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004786:	4291      	cmp	r1, r2
 8004788:	d1f9      	bne.n	800477e <memcpy+0xe>
 800478a:	bd10      	pop	{r4, pc}

0800478c <memmove>:
 800478c:	4288      	cmp	r0, r1
 800478e:	b510      	push	{r4, lr}
 8004790:	eb01 0402 	add.w	r4, r1, r2
 8004794:	d902      	bls.n	800479c <memmove+0x10>
 8004796:	4284      	cmp	r4, r0
 8004798:	4623      	mov	r3, r4
 800479a:	d807      	bhi.n	80047ac <memmove+0x20>
 800479c:	1e43      	subs	r3, r0, #1
 800479e:	42a1      	cmp	r1, r4
 80047a0:	d008      	beq.n	80047b4 <memmove+0x28>
 80047a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047aa:	e7f8      	b.n	800479e <memmove+0x12>
 80047ac:	4402      	add	r2, r0
 80047ae:	4601      	mov	r1, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	d100      	bne.n	80047b6 <memmove+0x2a>
 80047b4:	bd10      	pop	{r4, pc}
 80047b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047be:	e7f7      	b.n	80047b0 <memmove+0x24>

080047c0 <_realloc_r>:
 80047c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c4:	4680      	mov	r8, r0
 80047c6:	4614      	mov	r4, r2
 80047c8:	460e      	mov	r6, r1
 80047ca:	b921      	cbnz	r1, 80047d6 <_realloc_r+0x16>
 80047cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047d0:	4611      	mov	r1, r2
 80047d2:	f7ff bb9f 	b.w	8003f14 <_malloc_r>
 80047d6:	b92a      	cbnz	r2, 80047e4 <_realloc_r+0x24>
 80047d8:	f7ff fb30 	bl	8003e3c <_free_r>
 80047dc:	4625      	mov	r5, r4
 80047de:	4628      	mov	r0, r5
 80047e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e4:	f000 f81b 	bl	800481e <_malloc_usable_size_r>
 80047e8:	4284      	cmp	r4, r0
 80047ea:	4607      	mov	r7, r0
 80047ec:	d802      	bhi.n	80047f4 <_realloc_r+0x34>
 80047ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047f2:	d812      	bhi.n	800481a <_realloc_r+0x5a>
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f7ff fb8c 	bl	8003f14 <_malloc_r>
 80047fc:	4605      	mov	r5, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d0ed      	beq.n	80047de <_realloc_r+0x1e>
 8004802:	42bc      	cmp	r4, r7
 8004804:	4622      	mov	r2, r4
 8004806:	4631      	mov	r1, r6
 8004808:	bf28      	it	cs
 800480a:	463a      	movcs	r2, r7
 800480c:	f7ff ffb0 	bl	8004770 <memcpy>
 8004810:	4631      	mov	r1, r6
 8004812:	4640      	mov	r0, r8
 8004814:	f7ff fb12 	bl	8003e3c <_free_r>
 8004818:	e7e1      	b.n	80047de <_realloc_r+0x1e>
 800481a:	4635      	mov	r5, r6
 800481c:	e7df      	b.n	80047de <_realloc_r+0x1e>

0800481e <_malloc_usable_size_r>:
 800481e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004822:	1f18      	subs	r0, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	bfbc      	itt	lt
 8004828:	580b      	ldrlt	r3, [r1, r0]
 800482a:	18c0      	addlt	r0, r0, r3
 800482c:	4770      	bx	lr
	...

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
