
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004178  08004178  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004180  08004180  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08004188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000184  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000368  20000368  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a933  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc6  00000000  00000000  0002ab47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002cb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c0  00000000  00000000  0002d378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022985  00000000  00000000  0002db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b4b2  00000000  00000000  000504bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ceb4f  00000000  00000000  0005b96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a4be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c4  00000000  00000000  0012a510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ef0 	.word	0x08003ef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	08003ef0 	.word	0x08003ef0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Ringbuf_init+0x1c>)
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <Ringbuf_init+0x20>)
 80005cc:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <Ringbuf_init+0x24>)
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <Ringbuf_init+0x28>)
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000290 	.word	0x20000290
 80005e4:	20000200 	.word	0x20000200
 80005e8:	20000294 	.word	0x20000294
 80005ec:	20000248 	.word	0x20000248

080005f0 <uart_read>:

/* checks, if the entered string is present in the giver buffer ?
 */

int uart_read(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <uart_read+0x4c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <uart_read+0x4c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	429a      	cmp	r2, r3
 8000604:	d102      	bne.n	800060c <uart_read+0x1c>
  {
    return -1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e010      	b.n	800062e <uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <uart_read+0x4c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <uart_read+0x4c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	5cd3      	ldrb	r3, [r2, r3]
 8000618:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <uart_read+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <uart_read+0x4c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800062a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800062c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000290 	.word	0x20000290

08000640 <uart_write>:

/* writes a single character to the uart and increments head
 */
void uart_write(int c)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db21      	blt.n	8000692 <uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <uart_write+0x60>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	3301      	adds	r3, #1
 8000656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800065a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800065c:	bf00      	nop
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <uart_write+0x60>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	429a      	cmp	r2, r3
 8000668:	d0f9      	beq.n	800065e <uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <uart_write+0x60>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <uart_write+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	b2c9      	uxtb	r1, r1
 8000678:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <uart_write+0x60>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE); // Enable UART transmission interrupt
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <uart_write+0x64>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68da      	ldr	r2, [r3, #12]
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <uart_write+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000690:	60da      	str	r2, [r3, #12]
	}
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000294 	.word	0x20000294
 80006a4:	20000310 	.word	0x20000310

080006a8 <is_data_available>:

/* checks if the new data is available in the incoming buffer
 */
int is_data_available(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <is_data_available+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <is_data_available+0x2c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3340      	adds	r3, #64	; 0x40
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000290 	.word	0x20000290

080006d8 <uart_sendstring>:

/* sends the string to the uart
 */
void uart_sendstring (const char *s)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	while(*s) uart_write(*s++);
 80006e0:	e006      	b.n	80006f0 <uart_sendstring+0x18>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffa8 	bl	8000640 <uart_write>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f4      	bne.n	80006e2 <uart_sendstring+0xa>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_GPIO_Init+0xd4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xd4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xd4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xd4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000790:	4812      	ldr	r0, [pc, #72]	; (80007dc <MX_GPIO_Init+0xd8>)
 8000792:	f001 f8ef 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_GPIO_Init+0xdc>)
 80007ac:	f000 ff1e 	bl	80015ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0xd8>)
 80007ca:	f000 ff0f 	bl	80015ec <HAL_GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40020800 	.word	0x40020800

080007e4 <parse_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int parse_mode(const char *s){
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
	while(*s) {
 80007f0:	e054      	b.n	800089c <parse_mode+0xb8>
		if  (i >= LENGTH){
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	dd02      	ble.n	80007fe <parse_mode+0x1a>
			return -1;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e059      	b.n	80008b2 <parse_mode+0xce>
		}
		switch(*s++){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3b67      	subs	r3, #103	; 0x67
 8000808:	2b12      	cmp	r3, #18
 800080a:	d841      	bhi.n	8000890 <parse_mode+0xac>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <parse_mode+0x30>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000861 	.word	0x08000861
 8000818:	08000891 	.word	0x08000891
 800081c:	08000891 	.word	0x08000891
 8000820:	08000891 	.word	0x08000891
 8000824:	08000891 	.word	0x08000891
 8000828:	08000891 	.word	0x08000891
 800082c:	08000891 	.word	0x08000891
 8000830:	08000885 	.word	0x08000885
 8000834:	08000891 	.word	0x08000891
 8000838:	08000891 	.word	0x08000891
 800083c:	08000891 	.word	0x08000891
 8000840:	0800086d 	.word	0x0800086d
 8000844:	08000891 	.word	0x08000891
 8000848:	08000891 	.word	0x08000891
 800084c:	08000891 	.word	0x08000891
 8000850:	08000891 	.word	0x08000891
 8000854:	08000891 	.word	0x08000891
 8000858:	08000891 	.word	0x08000891
 800085c:	08000879 	.word	0x08000879
			case 'g':
				buffer_mode[i] = LED_GREEN;
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <parse_mode+0xdc>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2100      	movs	r1, #0
 8000866:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800086a:	e014      	b.n	8000896 <parse_mode+0xb2>
			case 'r':
				buffer_mode[i] = LED_RED;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <parse_mode+0xdc>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2102      	movs	r1, #2
 8000872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000876:	e00e      	b.n	8000896 <parse_mode+0xb2>
			case 'y':
				buffer_mode[i] = LED_YELLOW;
 8000878:	4a11      	ldr	r2, [pc, #68]	; (80008c0 <parse_mode+0xdc>)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2101      	movs	r1, #1
 800087e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000882:	e008      	b.n	8000896 <parse_mode+0xb2>
			case 'n':
				buffer_mode[i] = LED_NO_ONE;
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <parse_mode+0xdc>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2103      	movs	r1, #3
 800088a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800088e:	e002      	b.n	8000896 <parse_mode+0xb2>
			default:
				return -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	e00d      	b.n	80008b2 <parse_mode+0xce>
		}
		i++;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
	while(*s) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1a6      	bne.n	80007f2 <parse_mode+0xe>
	}
	return (i > 1) ? i : -1;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	dd01      	ble.n	80008ae <parse_mode+0xca>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	e001      	b.n	80008b2 <parse_mode+0xce>
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	200002a4 	.word	0x200002a4

080008c4 <clean_cmd>:

void clean_cmd(){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
	for (int j = 0; j < index_char; j++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	e007      	b.n	80008e0 <clean_cmd+0x1c>
		cmd[j] = 0;
 80008d0:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <clean_cmd+0x38>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < index_char; j++){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <clean_cmd+0x3c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	dbf2      	blt.n	80008d0 <clean_cmd+0xc>
	}
	index_char = 0;
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <clean_cmd+0x3c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	200002c8 	.word	0x200002c8
 8000900:	20000308 	.word	0x20000308

08000904 <handle_data>:



void handle_data(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	print(&recieved_char);
 8000908:	4819      	ldr	r0, [pc, #100]	; (8000970 <handle_data+0x6c>)
 800090a:	f000 fa3f 	bl	8000d8c <print>
	if (recieved_char == '\r'){
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <handle_data+0x6c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b0d      	cmp	r3, #13
 8000914:	d107      	bne.n	8000926 <handle_data+0x22>
		print("\n");
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <handle_data+0x70>)
 8000918:	f000 fa38 	bl	8000d8c <print>
		execute_command();
 800091c:	f000 f8c0 	bl	8000aa0 <execute_command>
		clean_cmd();
 8000920:	f7ff ffd0 	bl	80008c4 <clean_cmd>
			}else{
				cmd[index_char++] = recieved_char;
			}
		}
	}
}
 8000924:	e021      	b.n	800096a <handle_data+0x66>
		if (recieved_char == '\177'){
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <handle_data+0x6c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b7f      	cmp	r3, #127	; 0x7f
 800092c:	d10a      	bne.n	8000944 <handle_data+0x40>
			cmd[--index_char] = 0;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <handle_data+0x74>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <handle_data+0x74>)
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <handle_data+0x74>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <handle_data+0x78>)
 800093e:	2100      	movs	r1, #0
 8000940:	54d1      	strb	r1, [r2, r3]
}
 8000942:	e012      	b.n	800096a <handle_data+0x66>
			if (index_char >= UART_BUFFER_SIZE){
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <handle_data+0x74>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b3f      	cmp	r3, #63	; 0x3f
 800094a:	dd05      	ble.n	8000958 <handle_data+0x54>
				print("\r\ntoo long string\r\n");
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <handle_data+0x7c>)
 800094e:	f000 fa1d 	bl	8000d8c <print>
				clean_cmd();
 8000952:	f7ff ffb7 	bl	80008c4 <clean_cmd>
}
 8000956:	e008      	b.n	800096a <handle_data+0x66>
				cmd[index_char++] = recieved_char;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <handle_data+0x74>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	4906      	ldr	r1, [pc, #24]	; (8000978 <handle_data+0x74>)
 8000960:	600a      	str	r2, [r1, #0]
 8000962:	4a03      	ldr	r2, [pc, #12]	; (8000970 <handle_data+0x6c>)
 8000964:	7811      	ldrb	r1, [r2, #0]
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <handle_data+0x78>)
 8000968:	54d1      	strb	r1, [r2, r3]
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200002c4 	.word	0x200002c4
 8000974:	08003f08 	.word	0x08003f08
 8000978:	20000308 	.word	0x20000308
 800097c:	200002c8 	.word	0x200002c8
 8000980:	08003f0c 	.word	0x08003f0c

08000984 <add_mode>:



int add_mode(int code[], int size, int delay){
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (++index_last_changed_mode >= MODES_LENGTH) index_last_changed_mode = 4;
 8000990:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <add_mode+0xb8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <add_mode+0xb8>)
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <add_mode+0xb8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b07      	cmp	r3, #7
 80009a0:	dd02      	ble.n	80009a8 <add_mode+0x24>
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <add_mode+0xb8>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < size; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e013      	b.n	80009d6 <add_mode+0x52>
		MODES[index_last_changed_mode].code[i] = code[i];
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <add_mode+0xb8>)
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	4820      	ldr	r0, [pc, #128]	; (8000a40 <add_mode+0xbc>)
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	4413      	add	r3, r2
 80009cc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (int i = 0; i < size; i++){
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbe7      	blt.n	80009ae <add_mode+0x2a>
	}
	MODES[index_last_changed_mode].size = size;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <add_mode+0xb8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <add_mode+0xbc>)
 80009e4:	212c      	movs	r1, #44	; 0x2c
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	3320      	adds	r3, #32
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	601a      	str	r2, [r3, #0]
	MODES[index_last_changed_mode].delay = delay;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <add_mode+0xb8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <add_mode+0xbc>)
 80009f8:	212c      	movs	r1, #44	; 0x2c
 80009fa:	fb01 f303 	mul.w	r3, r1, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	3324      	adds	r3, #36	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
	MODES[index_last_changed_mode].current_code_index = 0;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <add_mode+0xb8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <add_mode+0xbc>)
 8000a0c:	212c      	movs	r1, #44	; 0x2c
 8000a0e:	fb01 f303 	mul.w	r3, r1, r3
 8000a12:	4413      	add	r3, r2
 8000a14:	3328      	adds	r3, #40	; 0x28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]

	if (modes_size < MODES_LENGTH) modes_size++;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <add_mode+0xc0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dc04      	bgt.n	8000a2c <add_mode+0xa8>
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <add_mode+0xc0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <add_mode+0xc0>)
 8000a2a:	6013      	str	r3, [r2, #0]
	return index_last_changed_mode;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <add_mode+0xb8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	20000170 	.word	0x20000170
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	2000016c 	.word	0x2000016c

08000a48 <handle_delay_input>:

int handle_delay_input(){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if (strcmp(cmd, "1") == 0) return 200;
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <handle_delay_input+0x48>)
 8000a4e:	4811      	ldr	r0, [pc, #68]	; (8000a94 <handle_delay_input+0x4c>)
 8000a50:	f7ff fbce 	bl	80001f0 <strcmp>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <handle_delay_input+0x16>
 8000a5a:	23c8      	movs	r3, #200	; 0xc8
 8000a5c:	e015      	b.n	8000a8a <handle_delay_input+0x42>
	else if (strcmp(cmd, "2") == 0) return 500;
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <handle_delay_input+0x50>)
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <handle_delay_input+0x4c>)
 8000a62:	f7ff fbc5 	bl	80001f0 <strcmp>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <handle_delay_input+0x2a>
 8000a6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a70:	e00b      	b.n	8000a8a <handle_delay_input+0x42>
	else if (strcmp(cmd, "3") == 0) return 1000;
 8000a72:	490a      	ldr	r1, [pc, #40]	; (8000a9c <handle_delay_input+0x54>)
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <handle_delay_input+0x4c>)
 8000a76:	f7ff fbbb 	bl	80001f0 <strcmp>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <handle_delay_input+0x3e>
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	e001      	b.n	8000a8a <handle_delay_input+0x42>
	else return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	08003f20 	.word	0x08003f20
 8000a94:	200002c8 	.word	0x200002c8
 8000a98:	08003f24 	.word	0x08003f24
 8000a9c:	08003f28 	.word	0x08003f28

08000aa0 <execute_command>:


void execute_command(){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
	if (wait_delay_idx){
 8000aa6:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <execute_command+0x170>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d027      	beq.n	8000afe <execute_command+0x5e>
		int delay = handle_delay_input();
 8000aae:	f7ff ffcb 	bl	8000a48 <handle_delay_input>
 8000ab2:	60b8      	str	r0, [r7, #8]
		if (delay == -1){
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aba:	d103      	bne.n	8000ac4 <execute_command+0x24>
			print("Invalid delay. Try again: ");
 8000abc:	4855      	ldr	r0, [pc, #340]	; (8000c14 <execute_command+0x174>)
 8000abe:	f000 f965 	bl	8000d8c <print>
				print("Input delay: 1,2 or 3 where 1 = 200ms; 2 = 500ms; 3 = 1000ms: ");
				wait_delay_idx = true;
			}else print("Invalid parameter\r\n");
		}else print("Invalid command\r\n");
	}
}
 8000ac2:	e0a1      	b.n	8000c08 <execute_command+0x168>
			add_mode(buffer_mode, new_mode_length, delay);
 8000ac4:	4b54      	ldr	r3, [pc, #336]	; (8000c18 <execute_command+0x178>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	68ba      	ldr	r2, [r7, #8]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4853      	ldr	r0, [pc, #332]	; (8000c1c <execute_command+0x17c>)
 8000ace:	f7ff ff59 	bl	8000984 <add_mode>
			sprintf(mode_number, "%i", index_last_changed_mode + 1);
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <execute_command+0x180>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4952      	ldr	r1, [pc, #328]	; (8000c24 <execute_command+0x184>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fde7 	bl	80036b0 <siprintf>
			print("OK\r\nNumber of new mode: ");
 8000ae2:	4851      	ldr	r0, [pc, #324]	; (8000c28 <execute_command+0x188>)
 8000ae4:	f000 f952 	bl	8000d8c <print>
			print(mode_number);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f94e 	bl	8000d8c <print>
			print("\r\n");
 8000af0:	484e      	ldr	r0, [pc, #312]	; (8000c2c <execute_command+0x18c>)
 8000af2:	f000 f94b 	bl	8000d8c <print>
			wait_delay_idx = false;
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <execute_command+0x170>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
}
 8000afc:	e084      	b.n	8000c08 <execute_command+0x168>
		if (strcmp(cmd, "set interrupts on") == 0){
 8000afe:	494c      	ldr	r1, [pc, #304]	; (8000c30 <execute_command+0x190>)
 8000b00:	484c      	ldr	r0, [pc, #304]	; (8000c34 <execute_command+0x194>)
 8000b02:	f7ff fb75 	bl	80001f0 <strcmp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d116      	bne.n	8000b3a <execute_command+0x9a>
			it_mode = true;
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <execute_command+0x198>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
			print("OK\r\n");
 8000b12:	484a      	ldr	r0, [pc, #296]	; (8000c3c <execute_command+0x19c>)
 8000b14:	f000 f93a 	bl	8000d8c <print>
			__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000b18:	4b49      	ldr	r3, [pc, #292]	; (8000c40 <execute_command+0x1a0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <execute_command+0x1a0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b26:	60da      	str	r2, [r3, #12]
			__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <execute_command+0x1a0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <execute_command+0x1a0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0220 	orr.w	r2, r2, #32
 8000b36:	60da      	str	r2, [r3, #12]
}
 8000b38:	e066      	b.n	8000c08 <execute_command+0x168>
		}else if (strcmp(cmd, "set interrupts off") == 0){
 8000b3a:	4942      	ldr	r1, [pc, #264]	; (8000c44 <execute_command+0x1a4>)
 8000b3c:	483d      	ldr	r0, [pc, #244]	; (8000c34 <execute_command+0x194>)
 8000b3e:	f7ff fb57 	bl	80001f0 <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d116      	bne.n	8000b76 <execute_command+0xd6>
			it_mode = false;
 8000b48:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <execute_command+0x198>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
			print("OK\r\n");
 8000b4e:	483b      	ldr	r0, [pc, #236]	; (8000c3c <execute_command+0x19c>)
 8000b50:	f000 f91c 	bl	8000d8c <print>
			__HAL_UART_DISABLE_IT(&huart6, UART_IT_TXE);
 8000b54:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <execute_command+0x1a0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <execute_command+0x1a0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b62:	60da      	str	r2, [r3, #12]
			__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 8000b64:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <execute_command+0x1a0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <execute_command+0x1a0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0220 	bic.w	r2, r2, #32
 8000b72:	60da      	str	r2, [r3, #12]
}
 8000b74:	e048      	b.n	8000c08 <execute_command+0x168>
		}else if (strstr(cmd, "set ") == cmd && strlen(cmd) > 4){
 8000b76:	4934      	ldr	r1, [pc, #208]	; (8000c48 <execute_command+0x1a8>)
 8000b78:	482e      	ldr	r0, [pc, #184]	; (8000c34 <execute_command+0x194>)
 8000b7a:	f002 fdb9 	bl	80036f0 <strstr>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a2c      	ldr	r2, [pc, #176]	; (8000c34 <execute_command+0x194>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d11e      	bne.n	8000bc4 <execute_command+0x124>
 8000b86:	482b      	ldr	r0, [pc, #172]	; (8000c34 <execute_command+0x194>)
 8000b88:	f7ff fb3c 	bl	8000204 <strlen>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d918      	bls.n	8000bc4 <execute_command+0x124>
			int p = atoi(&cmd[4]);
 8000b92:	482e      	ldr	r0, [pc, #184]	; (8000c4c <execute_command+0x1ac>)
 8000b94:	f002 fc66 	bl	8003464 <atoi>
 8000b98:	60f8      	str	r0, [r7, #12]
			if (p <= modes_size && p > 0){
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <execute_command+0x1b0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dc0b      	bgt.n	8000bbc <execute_command+0x11c>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dd08      	ble.n	8000bbc <execute_command+0x11c>
				cur_mode_index = p - 1;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <execute_command+0x1b4>)
 8000bb0:	6013      	str	r3, [r2, #0]
				print("OK\r\n");
 8000bb2:	4822      	ldr	r0, [pc, #136]	; (8000c3c <execute_command+0x19c>)
 8000bb4:	f000 f8ea 	bl	8000d8c <print>
			if (p <= modes_size && p > 0){
 8000bb8:	bf00      	nop
		}else if (strstr(cmd, "set ") == cmd && strlen(cmd) > 4){
 8000bba:	e025      	b.n	8000c08 <execute_command+0x168>
			}else print("This mode is't exist\r\n");
 8000bbc:	4826      	ldr	r0, [pc, #152]	; (8000c58 <execute_command+0x1b8>)
 8000bbe:	f000 f8e5 	bl	8000d8c <print>
		}else if (strstr(cmd, "set ") == cmd && strlen(cmd) > 4){
 8000bc2:	e021      	b.n	8000c08 <execute_command+0x168>
		}else if (strstr(cmd, "new ") == cmd){
 8000bc4:	4925      	ldr	r1, [pc, #148]	; (8000c5c <execute_command+0x1bc>)
 8000bc6:	481b      	ldr	r0, [pc, #108]	; (8000c34 <execute_command+0x194>)
 8000bc8:	f002 fd92 	bl	80036f0 <strstr>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <execute_command+0x194>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d115      	bne.n	8000c00 <execute_command+0x160>
			new_mode_length = parse_mode(&cmd[4]);
 8000bd4:	481d      	ldr	r0, [pc, #116]	; (8000c4c <execute_command+0x1ac>)
 8000bd6:	f7ff fe05 	bl	80007e4 <parse_mode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <execute_command+0x178>)
 8000bde:	6013      	str	r3, [r2, #0]
			if (new_mode_length != -1){
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <execute_command+0x178>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d006      	beq.n	8000bf8 <execute_command+0x158>
				print("Input delay: 1,2 or 3 where 1 = 200ms; 2 = 500ms; 3 = 1000ms: ");
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <execute_command+0x1c0>)
 8000bec:	f000 f8ce 	bl	8000d8c <print>
				wait_delay_idx = true;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <execute_command+0x170>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
}
 8000bf6:	e007      	b.n	8000c08 <execute_command+0x168>
			}else print("Invalid parameter\r\n");
 8000bf8:	481a      	ldr	r0, [pc, #104]	; (8000c64 <execute_command+0x1c4>)
 8000bfa:	f000 f8c7 	bl	8000d8c <print>
}
 8000bfe:	e003      	b.n	8000c08 <execute_command+0x168>
		}else print("Invalid command\r\n");
 8000c00:	4819      	ldr	r0, [pc, #100]	; (8000c68 <execute_command+0x1c8>)
 8000c02:	f000 f8c3 	bl	8000d8c <print>
}
 8000c06:	e7ff      	b.n	8000c08 <execute_command+0x168>
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000029c 	.word	0x2000029c
 8000c14:	08003f2c 	.word	0x08003f2c
 8000c18:	200002a0 	.word	0x200002a0
 8000c1c:	200002a4 	.word	0x200002a4
 8000c20:	20000170 	.word	0x20000170
 8000c24:	08003f48 	.word	0x08003f48
 8000c28:	08003f4c 	.word	0x08003f4c
 8000c2c:	08003f68 	.word	0x08003f68
 8000c30:	08003f6c 	.word	0x08003f6c
 8000c34:	200002c8 	.word	0x200002c8
 8000c38:	2000029d 	.word	0x2000029d
 8000c3c:	08003f80 	.word	0x08003f80
 8000c40:	20000310 	.word	0x20000310
 8000c44:	08003f88 	.word	0x08003f88
 8000c48:	08003f9c 	.word	0x08003f9c
 8000c4c:	200002cc 	.word	0x200002cc
 8000c50:	2000016c 	.word	0x2000016c
 8000c54:	20000298 	.word	0x20000298
 8000c58:	08003fa4 	.word	0x08003fa4
 8000c5c:	08003fbc 	.word	0x08003fbc
 8000c60:	08003fc4 	.word	0x08003fc4
 8000c64:	08004004 	.word	0x08004004
 8000c68:	08004018 	.word	0x08004018

08000c6c <activate_mode>:

bool activate_mode(struct Mode* current_mode) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	bool mode_switched = false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	75fb      	strb	r3, [r7, #23]
	bool btn_state = is_btn_press();
 8000c78:	f000 fa66 	bl	8001148 <is_btn_press>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	75bb      	strb	r3, [r7, #22]
	int led = current_mode->code[current_mode->current_code_index];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	613b      	str	r3, [r7, #16]
	if (led != LED_NO_ONE) HAL_GPIO_WritePin(GPIOD, PINS[led], GPIO_PIN_SET);
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d009      	beq.n	8000ca6 <activate_mode+0x3a>
 8000c92:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <activate_mode+0x10c>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4836      	ldr	r0, [pc, #216]	; (8000d7c <activate_mode+0x110>)
 8000ca2:	f000 fe67 	bl	8001974 <HAL_GPIO_WritePin>

	int start_time = HAL_GetTick();
 8000ca6:	f000 faf1 	bl	800128c <HAL_GetTick>
 8000caa:	4603      	mov	r3, r0
 8000cac:	60fb      	str	r3, [r7, #12]
	while (HAL_GetTick() < start_time + current_mode->delay){
 8000cae:	e03a      	b.n	8000d26 <activate_mode+0xba>
		if (!mode_switched){
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	f083 0301 	eor.w	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d016      	beq.n	8000cea <activate_mode+0x7e>
			bool i = is_btn_press();
 8000cbc:	f000 fa44 	bl	8001148 <is_btn_press>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	72fb      	strb	r3, [r7, #11]
			mode_switched = !i && btn_state;
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d004      	beq.n	8000cda <activate_mode+0x6e>
 8000cd0:	7dbb      	ldrb	r3, [r7, #22]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <activate_mode+0x6e>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <activate_mode+0x70>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
			btn_state = i;
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	75bb      	strb	r3, [r7, #22]
		}

		if (it_mode){
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <activate_mode+0x114>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00e      	beq.n	8000d10 <activate_mode+0xa4>
			while(is_data_available()){
 8000cf2:	e007      	b.n	8000d04 <activate_mode+0x98>
				recieved_char = uart_read();
 8000cf4:	f7ff fc7c 	bl	80005f0 <uart_read>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <activate_mode+0x118>)
 8000cfe:	701a      	strb	r2, [r3, #0]
				handle_data();
 8000d00:	f7ff fe00 	bl	8000904 <handle_data>
			while(is_data_available()){
 8000d04:	f7ff fcd0 	bl	80006a8 <is_data_available>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f2      	bne.n	8000cf4 <activate_mode+0x88>
 8000d0e:	e00a      	b.n	8000d26 <activate_mode+0xba>
			}
		}else{
			if (HAL_UART_Receive(&huart6, &recieved_char, 1, 50) == HAL_OK){
 8000d10:	2332      	movs	r3, #50	; 0x32
 8000d12:	2201      	movs	r2, #1
 8000d14:	491b      	ldr	r1, [pc, #108]	; (8000d84 <activate_mode+0x118>)
 8000d16:	481c      	ldr	r0, [pc, #112]	; (8000d88 <activate_mode+0x11c>)
 8000d18:	f001 fbcd 	bl	80024b6 <HAL_UART_Receive>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <activate_mode+0xba>
				handle_data();
 8000d22:	f7ff fdef 	bl	8000904 <handle_data>
	while (HAL_GetTick() < start_time + current_mode->delay){
 8000d26:	f000 fab1 	bl	800128c <HAL_GetTick>
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d3bb      	bcc.n	8000cb0 <activate_mode+0x44>
			}
		}
	}

	if (++(current_mode->current_code_index) >= current_mode->size)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	db02      	blt.n	8000d54 <activate_mode+0xe8>
		current_mode->current_code_index = 0;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
	if (led != LED_NO_ONE) HAL_GPIO_WritePin(GPIOD, PINS[led], GPIO_PIN_RESET);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d009      	beq.n	8000d6e <activate_mode+0x102>
 8000d5a:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <activate_mode+0x10c>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <activate_mode+0x110>)
 8000d6a:	f000 fe03 	bl	8001974 <HAL_GPIO_WritePin>
	return mode_switched;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	2000029d 	.word	0x2000029d
 8000d84:	200002c4 	.word	0x200002c4
 8000d88:	20000310 	.word	0x20000310

08000d8c <print>:


void print(const char * content) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if (it_mode) {
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <print+0x34>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <print+0x18>
		uart_sendstring(content);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fc9b 	bl	80006d8 <uart_sendstring>
	} else HAL_UART_Transmit(&huart6, (void *) content, strlen(content), TIMEOUT);
}
 8000da2:	e009      	b.n	8000db8 <print+0x2c>
	} else HAL_UART_Transmit(&huart6, (void *) content, strlen(content), TIMEOUT);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fa2d 	bl	8000204 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	230a      	movs	r3, #10
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <print+0x38>)
 8000db4:	f001 faed 	bl	8002392 <HAL_UART_Transmit>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000029d 	.word	0x2000029d
 8000dc4:	20000310 	.word	0x20000310

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 f9f8 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f828 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f7ff fc96 	bl	8000704 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000dd8:	f000 f93c 	bl	8001054 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init ();
 8000ddc:	f7ff fbf2 	bl	80005c4 <Ringbuf_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (activate_mode(&MODES[cur_mode_index])) {
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <main+0x50>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	222c      	movs	r2, #44	; 0x2c
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <main+0x54>)
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff3c 	bl	8000c6c <activate_mode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f2      	beq.n	8000de0 <main+0x18>
	  		cur_mode_index++;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <main+0x50>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <main+0x50>)
 8000e02:	6013      	str	r3, [r2, #0]
	  		if (cur_mode_index >= modes_size)
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <main+0x50>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <main+0x58>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dbe7      	blt.n	8000de0 <main+0x18>
	  			cur_mode_index = 0;
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <main+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
	  if (activate_mode(&MODES[cur_mode_index])) {
 8000e16:	e7e3      	b.n	8000de0 <main+0x18>
 8000e18:	20000298 	.word	0x20000298
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	2000016c 	.word	0x2000016c

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	; 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fb44 	bl	80034c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <SystemClock_Config+0xd8>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <SystemClock_Config+0xd8>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SystemClock_Config+0xd8>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xdc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <SystemClock_Config+0xdc>)
 8000e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <SystemClock_Config+0xdc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e94:	230f      	movs	r3, #15
 8000e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e98:	23d8      	movs	r3, #216	; 0xd8
 8000e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fdcd 	bl	8001a48 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000eb4:	f000 f826 	bl	8000f04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000eb8:	f000 fd76 	bl	80019a8 <HAL_PWREx_EnableOverDrive>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000ec2:	f000 f81f 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f001 f827 	bl	8001f38 <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ef0:	f000 f808 	bl	8000f04 <Error_Handler>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3750      	adds	r7, #80	; 0x50
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x4>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f95c 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART6_IRQHandler+0x10>)
 8000fb6:	f001 fb21 	bl	80025fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000310 	.word	0x20000310

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f002 fa3a 	bl	800346c <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20030000 	.word	0x20030000
 8001024:	00000400 	.word	0x00000400
 8001028:	2000030c 	.word	0x2000030c
 800102c:	20000368 	.word	0x20000368

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_USART6_UART_Init+0x50>)
 800105c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001060:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001064:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_USART6_UART_Init+0x4c>)
 800108c:	f001 f934 	bl	80022f8 <HAL_UART_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001096:	f7ff ff35 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000310 	.word	0x20000310
 80010a4:	40011400 	.word	0x40011400

080010a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_UART_MspInit+0x94>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d133      	bne.n	8001132 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_UART_MspInit+0x98>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23c0      	movs	r3, #192	; 0xc0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001112:	2308      	movs	r3, #8
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_UART_MspInit+0x9c>)
 800111e:	f000 fa65 	bl	80015ec <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2047      	movs	r0, #71	; 0x47
 8001128:	f000 f997 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800112c:	2047      	movs	r0, #71	; 0x47
 800112e:	f000 f9b0 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40011400 	.word	0x40011400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800

08001148 <is_btn_press>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
}

bool is_btn_press() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	 return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) == 0;
 800114c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <is_btn_press+0x20>)
 8001152:	f000 fbf7 	bl	8001944 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 }
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40020800 	.word	0x40020800

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001196:	f7ff ff4b 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f002 f96d 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fe13 	bl	8000dc8 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80011b0:	08004188 	.word	0x08004188
  ldr r2, =_sbss
 80011b4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80011b8:	20000368 	.word	0x20000368

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f92b 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe8a 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f943 	bl	80014ae <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f90b 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000174 	.word	0x20000174
 800125c:	2000017c 	.word	0x2000017c
 8001260:	20000178 	.word	0x20000178

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000017c 	.word	0x2000017c
 8001288:	20000354 	.word	0x20000354

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000354 	.word	0x20000354

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff3e 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff31 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff feda 	bl	800128c <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d008      	beq.n	80014f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e052      	b.n	800159e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0216 	bic.w	r2, r2, #22
 8001506:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001516:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d103      	bne.n	8001528 <HAL_DMA_Abort+0x62>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0208 	bic.w	r2, r2, #8
 8001536:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001548:	e013      	b.n	8001572 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800154a:	f7ff fe9f 	bl	800128c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b05      	cmp	r3, #5
 8001556:	d90c      	bls.n	8001572 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2220      	movs	r2, #32
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e015      	b.n	800159e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1e4      	bne.n	800154a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	223f      	movs	r2, #63	; 0x3f
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d004      	beq.n	80015c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e00c      	b.n	80015de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2205      	movs	r2, #5
 80015c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e177      	b.n	80018f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8166 	bne.w	80018f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d005      	beq.n	800163e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	2b02      	cmp	r3, #2
 800163c:	d130      	bne.n	80016a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	2203      	movs	r2, #3
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 0201 	and.w	r2, r3, #1
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d017      	beq.n	80016dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80c0 	beq.w	80018f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b66      	ldr	r3, [pc, #408]	; (8001910 <HAL_GPIO_Init+0x324>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a65      	ldr	r2, [pc, #404]	; (8001910 <HAL_GPIO_Init+0x324>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_GPIO_Init+0x324>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a61      	ldr	r2, [pc, #388]	; (8001914 <HAL_GPIO_Init+0x328>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_GPIO_Init+0x32c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d037      	beq.n	800182a <HAL_GPIO_Init+0x23e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_GPIO_Init+0x330>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d031      	beq.n	8001826 <HAL_GPIO_Init+0x23a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_GPIO_Init+0x334>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02b      	beq.n	8001822 <HAL_GPIO_Init+0x236>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a55      	ldr	r2, [pc, #340]	; (8001924 <HAL_GPIO_Init+0x338>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x232>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x33c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x22e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a53      	ldr	r2, [pc, #332]	; (800192c <HAL_GPIO_Init+0x340>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x22a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_GPIO_Init+0x344>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x226>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a51      	ldr	r2, [pc, #324]	; (8001934 <HAL_GPIO_Init+0x348>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x222>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <HAL_GPIO_Init+0x34c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x21e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4f      	ldr	r2, [pc, #316]	; (800193c <HAL_GPIO_Init+0x350>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x21a>
 8001802:	2309      	movs	r3, #9
 8001804:	e012      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001806:	230a      	movs	r3, #10
 8001808:	e010      	b.n	800182c <HAL_GPIO_Init+0x240>
 800180a:	2308      	movs	r3, #8
 800180c:	e00e      	b.n	800182c <HAL_GPIO_Init+0x240>
 800180e:	2307      	movs	r3, #7
 8001810:	e00c      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001812:	2306      	movs	r3, #6
 8001814:	e00a      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001816:	2305      	movs	r3, #5
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x240>
 800181a:	2304      	movs	r3, #4
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x240>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x240>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x240>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4935      	ldr	r1, [pc, #212]	; (8001914 <HAL_GPIO_Init+0x328>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x354>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186e:	4a34      	ldr	r2, [pc, #208]	; (8001940 <HAL_GPIO_Init+0x354>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_GPIO_Init+0x354>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001898:	4a29      	ldr	r2, [pc, #164]	; (8001940 <HAL_GPIO_Init+0x354>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_GPIO_Init+0x354>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f ae84 	bls.w	8001608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40013800 	.word	0x40013800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40021000 	.word	0x40021000
 800192c:	40021400 	.word	0x40021400
 8001930:	40021800 	.word	0x40021800
 8001934:	40021c00 	.word	0x40021c00
 8001938:	40022000 	.word	0x40022000
 800193c:	40022400 	.word	0x40022400
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_PWREx_EnableOverDrive+0x94>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d4:	f7ff fc5a 	bl	800128c <HAL_GetTick>
 80019d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019da:	e009      	b.n	80019f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019dc:	f7ff fc56 	bl	800128c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ea:	d901      	bls.n	80019f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e01f      	b.n	8001a30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d1ee      	bne.n	80019dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a04:	f7ff fc42 	bl	800128c <HAL_GetTick>
 8001a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a0a:	e009      	b.n	8001a20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc3e 	bl	800128c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a1a:	d901      	bls.n	8001a20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e007      	b.n	8001a30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	420e0040 	.word	0x420e0040
 8001a40:	40007000 	.word	0x40007000
 8001a44:	420e0044 	.word	0x420e0044

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e267      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d075      	beq.n	8001b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d00c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d112      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d05b      	beq.n	8001b50 <HAL_RCC_OscConfig+0x108>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d157      	bne.n	8001b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e242      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x74>
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e01d      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b70      	ldr	r3, [pc, #448]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6f      	ldr	r2, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6c      	ldr	r2, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0xb0>
 8001ae0:	4b69      	ldr	r3, [pc, #420]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a68      	ldr	r2, [pc, #416]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff fbc4 	bl	800128c <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fbc0 	bl	800128c <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e207      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b5b      	ldr	r3, [pc, #364]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0xc0>
 8001b26:	e014      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fbb0 	bl	800128c <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fbac 	bl	800128c <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1f3      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	4b51      	ldr	r3, [pc, #324]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0xe8>
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d11c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d116      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x152>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d001      	beq.n	8001b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e1c7      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4937      	ldr	r1, [pc, #220]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	e03a      	b.n	8001c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x244>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fb65 	bl	800128c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fb61 	bl	800128c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1a8      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	4925      	ldr	r1, [pc, #148]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	600b      	str	r3, [r1, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x244>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb44 	bl	800128c <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb40 	bl	800128c <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e187      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d036      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d016      	beq.n	8001c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x248>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff fb24 	bl	800128c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff fb20 	bl	800128c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e167      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x200>
 8001c66:	e01b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_OscConfig+0x248>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb0d 	bl	800128c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	e00e      	b.n	8001c94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c76:	f7ff fb09 	bl	800128c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d907      	bls.n	8001c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e150      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	42470000 	.word	0x42470000
 8001c90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ea      	bne.n	8001c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8097 	beq.w	8001ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b81      	ldr	r3, [pc, #516]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b7d      	ldr	r3, [pc, #500]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a7c      	ldr	r2, [pc, #496]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b7a      	ldr	r3, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b77      	ldr	r3, [pc, #476]	; (8001ebc <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b74      	ldr	r3, [pc, #464]	; (8001ebc <HAL_RCC_OscConfig+0x474>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a73      	ldr	r2, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x474>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fac9 	bl	800128c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fac5 	bl	800128c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e10c      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x474>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2ea>
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a63      	ldr	r2, [pc, #396]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x324>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x30c>
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5e      	ldr	r2, [pc, #376]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4b5c      	ldr	r3, [pc, #368]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a5b      	ldr	r2, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0x324>
 8001d54:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d60:	4b55      	ldr	r3, [pc, #340]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	4a54      	ldr	r2, [pc, #336]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d66:	f023 0304 	bic.w	r3, r3, #4
 8001d6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d015      	beq.n	8001da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff fa8a 	bl	800128c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fa86 	bl	800128c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0cb      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0ee      	beq.n	8001d7c <HAL_RCC_OscConfig+0x334>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fa74 	bl	800128c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7ff fa70 	bl	800128c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0b5      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ee      	bne.n	8001da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a1 	beq.w	8001f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001de6:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d05c      	beq.n	8001eac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d141      	bne.n	8001e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_OscConfig+0x478>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa44 	bl	800128c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff fa40 	bl	800128c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e087      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x478>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff fa19 	bl	800128c <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7ff fa15 	bl	800128c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e05c      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x416>
 8001e7c:	e054      	b.n	8001f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x478>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fa02 	bl	800128c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f9fe 	bl	800128c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e045      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x444>
 8001eaa:	e03d      	b.n	8001f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e038      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x4ec>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d028      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d121      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11a      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d111      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0cc      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d90c      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0b8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f8c:	4b59      	ldr	r3, [pc, #356]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa4:	4b53      	ldr	r3, [pc, #332]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	494d      	ldr	r1, [pc, #308]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d044      	beq.n	8002058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d119      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e067      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 0203 	bic.w	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4934      	ldr	r1, [pc, #208]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7ff f930 	bl	800128c <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7ff f92c 	bl	800128c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e04f      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 020c 	and.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1eb      	bne.n	8002030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d20c      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e032      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4916      	ldr	r1, [pc, #88]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	490e      	ldr	r1, [pc, #56]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020be:	f000 f821 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	490a      	ldr	r1, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	5ccb      	ldrb	r3, [r1, r3]
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f890 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00
 80020f4:	40023800 	.word	0x40023800
 80020f8:	0800402c 	.word	0x0800402c
 80020fc:	20000174 	.word	0x20000174
 8002100:	20000178 	.word	0x20000178

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b090      	sub	sp, #64	; 0x40
 800210a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002114:	2300      	movs	r3, #0
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b08      	cmp	r3, #8
 8002126:	d00d      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x40>
 8002128:	2b08      	cmp	r3, #8
 800212a:	f200 80a1 	bhi.w	8002270 <HAL_RCC_GetSysClockFreq+0x16c>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 8002132:	2b04      	cmp	r3, #4
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x3a>
 8002136:	e09b      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_GetSysClockFreq+0x184>)
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800213c:	e09b      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800213e:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_GetSysClockFreq+0x188>)
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002142:	e098      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800214e:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d028      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	2200      	movs	r2, #0
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	627a      	str	r2, [r7, #36]	; 0x24
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800216c:	2100      	movs	r1, #0
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_GetSysClockFreq+0x188>)
 8002170:	fb03 f201 	mul.w	r2, r3, r1
 8002174:	2300      	movs	r3, #0
 8002176:	fb00 f303 	mul.w	r3, r0, r3
 800217a:	4413      	add	r3, r2
 800217c:	4a43      	ldr	r2, [pc, #268]	; (800228c <HAL_RCC_GetSysClockFreq+0x188>)
 800217e:	fba0 1202 	umull	r1, r2, r0, r2
 8002182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002184:	460a      	mov	r2, r1
 8002186:	62ba      	str	r2, [r7, #40]	; 0x28
 8002188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800218a:	4413      	add	r3, r2
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002190:	2200      	movs	r2, #0
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	61fa      	str	r2, [r7, #28]
 8002196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800219e:	f7fe f88f 	bl	80002c0 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4613      	mov	r3, r2
 80021a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021aa:	e053      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ac:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	2200      	movs	r2, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	617a      	str	r2, [r7, #20]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021be:	f04f 0b00 	mov.w	fp, #0
 80021c2:	4652      	mov	r2, sl
 80021c4:	465b      	mov	r3, fp
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d4:	0150      	lsls	r0, r2, #5
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	ebb2 080a 	subs.w	r8, r2, sl
 80021de:	eb63 090b 	sbc.w	r9, r3, fp
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021f6:	ebb2 0408 	subs.w	r4, r2, r8
 80021fa:	eb63 0509 	sbc.w	r5, r3, r9
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	00eb      	lsls	r3, r5, #3
 8002208:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220c:	00e2      	lsls	r2, r4, #3
 800220e:	4614      	mov	r4, r2
 8002210:	461d      	mov	r5, r3
 8002212:	eb14 030a 	adds.w	r3, r4, sl
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	eb45 030b 	adc.w	r3, r5, fp
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222a:	4629      	mov	r1, r5
 800222c:	028b      	lsls	r3, r1, #10
 800222e:	4621      	mov	r1, r4
 8002230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002234:	4621      	mov	r1, r4
 8002236:	028a      	lsls	r2, r1, #10
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	2200      	movs	r2, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	60fa      	str	r2, [r7, #12]
 8002244:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002248:	f7fe f83a 	bl	80002c0 <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4613      	mov	r3, r2
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_GetSysClockFreq+0x180>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetSysClockFreq+0x184>)
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002278:	4618      	mov	r0, r3
 800227a:	3740      	adds	r7, #64	; 0x40
 800227c:	46bd      	mov	sp, r7
 800227e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400
 800228c:	017d7840 	.word	0x017d7840

08002290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000174 	.word	0x20000174

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022ac:	f7ff fff0 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0a9b      	lsrs	r3, r3, #10
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	0800403c 	.word	0x0800403c

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022d4:	f7ff ffdc 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0b5b      	lsrs	r3, r3, #13
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	0800403c 	.word	0x0800403c

080022f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03f      	b.n	800238a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fec2 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fe1d 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af02      	add	r7, sp, #8
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d17c      	bne.n	80024ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <HAL_UART_Transmit+0x2c>
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e075      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x3e>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e06e      	b.n	80024ae <HAL_UART_Transmit+0x11c>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023e6:	f7fe ff51 	bl	800128c <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	88fa      	ldrh	r2, [r7, #6]
 80023f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002400:	d108      	bne.n	8002414 <HAL_UART_Transmit+0x82>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e003      	b.n	800241c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002424:	e02a      	b.n	800247c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2200      	movs	r2, #0
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb9b 	bl	8002b6c <UART_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e036      	b.n	80024ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002454:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	3302      	adds	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	e007      	b.n	800246e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3301      	adds	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1cf      	bne.n	8002426 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2200      	movs	r2, #0
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fb6b 	bl	8002b6c <UART_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b08a      	sub	sp, #40	; 0x28
 80024ba:	af02      	add	r7, sp, #8
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	f040 808c 	bne.w	80025f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_UART_Receive+0x2e>
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e084      	b.n	80025f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_UART_Receive+0x40>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e07d      	b.n	80025f2 <HAL_UART_Receive+0x13c>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2222      	movs	r2, #34	; 0x22
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002512:	f7fe febb 	bl	800128c <HAL_GetTick>
 8002516:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d108      	bne.n	8002540 <HAL_UART_Receive+0x8a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e003      	b.n	8002548 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002550:	e043      	b.n	80025da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2120      	movs	r1, #32
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fb05 	bl	8002b6c <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e042      	b.n	80025f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	b29b      	uxth	r3, r3
 800257a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257e:	b29a      	uxth	r2, r3
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3302      	adds	r3, #2
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e01f      	b.n	80025cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002594:	d007      	beq.n	80025a6 <HAL_UART_Receive+0xf0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_UART_Receive+0xfe>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e008      	b.n	80025c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1b6      	bne.n	8002552 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e000      	b.n	80025f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
  }
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ba      	sub	sp, #232	; 0xe8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800263a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10f      	bne.n	8002662 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_UART_IRQHandler+0x66>
 800264e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fbd3 	bl	8002e06 <UART_Receive_IT>
      return;
 8002660:	e256      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80de 	beq.w	8002828 <HAL_UART_IRQHandler+0x22c>
 800266c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800267c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80d1 	beq.w	8002828 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_UART_IRQHandler+0xae>
 8002692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_UART_IRQHandler+0xd2>
 80026b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_UART_IRQHandler+0xf6>
 80026da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d011      	beq.n	8002722 <HAL_UART_IRQHandler+0x126>
 80026fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0208 	orr.w	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 81ed 	beq.w	8002b06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800272c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_UART_IRQHandler+0x14e>
 8002738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fb5e 	bl	8002e06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_UART_IRQHandler+0x17a>
 800276e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d04f      	beq.n	8002816 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa66 	bl	8002c48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d141      	bne.n	800280e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1d9      	bne.n	800278a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e2:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_UART_IRQHandler+0x3dc>)
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fedb 	bl	80015a6 <HAL_DMA_Abort_IT>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	4610      	mov	r0, r2
 8002802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e00e      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f99a 	bl	8002b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800280c:	e00a      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f996 	bl	8002b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	e006      	b.n	8002824 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f992 	bl	8002b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002822:	e170      	b.n	8002b06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	bf00      	nop
    return;
 8002826:	e16e      	b.n	8002b06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2b01      	cmp	r3, #1
 800282e:	f040 814a 	bne.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8143 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 813c 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	f040 80b4 	bne.w	80029dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8140 	beq.w	8002b0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800288e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002892:	429a      	cmp	r2, r3
 8002894:	f080 8139 	bcs.w	8002b0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800289e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	f000 8088 	beq.w	80029be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1d9      	bne.n	80028ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3314      	adds	r3, #20
 8002900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800290a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800291e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002922:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e1      	bne.n	80028fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3314      	adds	r3, #20
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800295a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800295c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002960:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e3      	bne.n	8002936 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002986:	e853 3f00 	ldrex	r3, [r3]
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	f023 0310 	bic.w	r3, r3, #16
 8002992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e3      	bne.n	800297c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fd84 	bl	80014c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f8c0 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029d4:	e099      	b.n	8002b0a <HAL_UART_IRQHandler+0x50e>
 80029d6:	bf00      	nop
 80029d8:	08002d0f 	.word	0x08002d0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 808b 	beq.w	8002b0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8086 	beq.w	8002b0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a26:	647a      	str	r2, [r7, #68]	; 0x44
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e3      	bne.n	8002a02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3314      	adds	r3, #20
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	623b      	str	r3, [r7, #32]
   return(result);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3314      	adds	r3, #20
 8002a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a5e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e3      	bne.n	8002a3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	e853 3f00 	ldrex	r3, [r3]
 8002a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002aa4:	61fa      	str	r2, [r7, #28]
 8002aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e3      	bne.n	8002a80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f848 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ac4:	e023      	b.n	8002b0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x4ea>
 8002ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f929 	bl	8002d36 <UART_Transmit_IT>
    return;
 8002ae4:	e014      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <HAL_UART_IRQHandler+0x514>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f969 	bl	8002dd6 <UART_EndTransmit_IT>
    return;
 8002b04:	e004      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
    return;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
      return;
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HAL_UART_IRQHandler+0x514>
      return;
 8002b0e:	bf00      	nop
  }
}
 8002b10:	37e8      	adds	r7, #232	; 0xe8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b090      	sub	sp, #64	; 0x40
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7c:	e050      	b.n	8002c20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d04c      	beq.n	8002c20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b8c:	f7fe fb7e 	bl	800128c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d241      	bcs.n	8002c20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e5      	bne.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3314      	adds	r3, #20
 8002bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	613b      	str	r3, [r7, #16]
   return(result);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf0:	623a      	str	r2, [r7, #32]
 8002bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	6a3a      	ldr	r2, [r7, #32]
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1e5      	bne.n	8002bd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e00f      	b.n	8002c40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d09f      	beq.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3740      	adds	r7, #64	; 0x40
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b095      	sub	sp, #84	; 0x54
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c70:	643a      	str	r2, [r7, #64]	; 0x40
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d119      	bne.n	8002cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 0310 	bic.w	r3, r3, #16
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce0:	61ba      	str	r2, [r7, #24]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6979      	ldr	r1, [r7, #20]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	613b      	str	r3, [r7, #16]
   return(result);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d02:	bf00      	nop
 8002d04:	3754      	adds	r7, #84	; 0x54
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff ff09 	bl	8002b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b21      	cmp	r3, #33	; 0x21
 8002d48:	d13e      	bne.n	8002dc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d114      	bne.n	8002d7e <UART_Transmit_IT+0x48>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d110      	bne.n	8002d7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	e008      	b.n	8002d90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1c59      	adds	r1, r3, #1
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6211      	str	r1, [r2, #32]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fe8e 	bl	8002b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08c      	sub	sp, #48	; 0x30
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b22      	cmp	r3, #34	; 0x22
 8002e18:	f040 80ab 	bne.w	8002f72 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d117      	bne.n	8002e56 <UART_Receive_IT+0x50>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
 8002e54:	e026      	b.n	8002ea4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d007      	beq.n	8002e7a <UART_Receive_IT+0x74>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <UART_Receive_IT+0x82>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	701a      	strb	r2, [r3, #0]
 8002e86:	e008      	b.n	8002e9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d15a      	bne.n	8002f6e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0220 	bic.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d135      	bne.n	8002f64 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 0310 	bic.w	r3, r3, #16
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	623a      	str	r2, [r7, #32]
 8002f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	69f9      	ldr	r1, [r7, #28]
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d10a      	bne.n	8002f56 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff fdf9 	bl	8002b54 <HAL_UARTEx_RxEventCallback>
 8002f62:	e002      	b.n	8002f6a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fde1 	bl	8002b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e002      	b.n	8002f74 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b0c0      	sub	sp, #256	; 0x100
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	ea40 0301 	orr.w	r3, r0, r1
 8002fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd4:	f021 010c 	bic.w	r1, r1, #12
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff6:	6999      	ldr	r1, [r3, #24]
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	ea40 0301 	orr.w	r3, r0, r1
 8003002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <UART_SetConfig+0x2cc>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d005      	beq.n	800301c <UART_SetConfig+0xa0>
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b8d      	ldr	r3, [pc, #564]	; (800324c <UART_SetConfig+0x2d0>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d104      	bne.n	8003026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff f958 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8003020:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003024:	e003      	b.n	800302e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7ff f93f 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 800302a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003038:	f040 810c 	bne.w	8003254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800303c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003040:	2200      	movs	r2, #0
 8003042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003046:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800304a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	1891      	adds	r1, r2, r2
 8003054:	65b9      	str	r1, [r7, #88]	; 0x58
 8003056:	415b      	adcs	r3, r3
 8003058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800305e:	4621      	mov	r1, r4
 8003060:	eb12 0801 	adds.w	r8, r2, r1
 8003064:	4629      	mov	r1, r5
 8003066:	eb43 0901 	adc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800308c:	462b      	mov	r3, r5
 800308e:	eb49 0303 	adc.w	r3, r9, r3
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030aa:	460b      	mov	r3, r1
 80030ac:	18db      	adds	r3, r3, r3
 80030ae:	653b      	str	r3, [r7, #80]	; 0x50
 80030b0:	4613      	mov	r3, r2
 80030b2:	eb42 0303 	adc.w	r3, r2, r3
 80030b6:	657b      	str	r3, [r7, #84]	; 0x54
 80030b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030c0:	f7fd f8fe 	bl	80002c0 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <UART_SetConfig+0x2d4>)
 80030ca:	fba3 2302 	umull	r2, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	011c      	lsls	r4, r3, #4
 80030d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	1891      	adds	r1, r2, r2
 80030ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80030ec:	415b      	adcs	r3, r3
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f4:	4641      	mov	r1, r8
 80030f6:	eb12 0a01 	adds.w	sl, r2, r1
 80030fa:	4649      	mov	r1, r9
 80030fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800310c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003114:	4692      	mov	sl, r2
 8003116:	469b      	mov	fp, r3
 8003118:	4643      	mov	r3, r8
 800311a:	eb1a 0303 	adds.w	r3, sl, r3
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003122:	464b      	mov	r3, r9
 8003124:	eb4b 0303 	adc.w	r3, fp, r3
 8003128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003138:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800313c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003140:	460b      	mov	r3, r1
 8003142:	18db      	adds	r3, r3, r3
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
 8003146:	4613      	mov	r3, r2
 8003148:	eb42 0303 	adc.w	r3, r2, r3
 800314c:	647b      	str	r3, [r7, #68]	; 0x44
 800314e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003156:	f7fd f8b3 	bl	80002c0 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4611      	mov	r1, r2
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <UART_SetConfig+0x2d4>)
 8003162:	fba3 2301 	umull	r2, r3, r3, r1
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2264      	movs	r2, #100	; 0x64
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	1acb      	subs	r3, r1, r3
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <UART_SetConfig+0x2d4>)
 8003178:	fba3 2302 	umull	r2, r3, r3, r2
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003184:	441c      	add	r4, r3
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003190:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a0:	415b      	adcs	r3, r3
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031a8:	4641      	mov	r1, r8
 80031aa:	1851      	adds	r1, r2, r1
 80031ac:	6339      	str	r1, [r7, #48]	; 0x30
 80031ae:	4649      	mov	r1, r9
 80031b0:	414b      	adcs	r3, r1
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031c0:	4659      	mov	r1, fp
 80031c2:	00cb      	lsls	r3, r1, #3
 80031c4:	4651      	mov	r1, sl
 80031c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ca:	4651      	mov	r1, sl
 80031cc:	00ca      	lsls	r2, r1, #3
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	4642      	mov	r2, r8
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031dc:	464b      	mov	r3, r9
 80031de:	460a      	mov	r2, r1
 80031e0:	eb42 0303 	adc.w	r3, r2, r3
 80031e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031fc:	460b      	mov	r3, r1
 80031fe:	18db      	adds	r3, r3, r3
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 8003202:	4613      	mov	r3, r2
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003212:	f7fd f855 	bl	80002c0 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <UART_SetConfig+0x2d4>)
 800321c:	fba3 1302 	umull	r1, r3, r3, r2
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	2164      	movs	r1, #100	; 0x64
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	3332      	adds	r3, #50	; 0x32
 800322e:	4a08      	ldr	r2, [pc, #32]	; (8003250 <UART_SetConfig+0x2d4>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	f003 0207 	and.w	r2, r3, #7
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4422      	add	r2, r4
 8003242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003244:	e105      	b.n	8003452 <UART_SetConfig+0x4d6>
 8003246:	bf00      	nop
 8003248:	40011000 	.word	0x40011000
 800324c:	40011400 	.word	0x40011400
 8003250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800325e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003266:	4642      	mov	r2, r8
 8003268:	464b      	mov	r3, r9
 800326a:	1891      	adds	r1, r2, r2
 800326c:	6239      	str	r1, [r7, #32]
 800326e:	415b      	adcs	r3, r3
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003276:	4641      	mov	r1, r8
 8003278:	1854      	adds	r4, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb43 0501 	adc.w	r5, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	00eb      	lsls	r3, r5, #3
 800328a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328e:	00e2      	lsls	r2, r4, #3
 8003290:	4614      	mov	r4, r2
 8003292:	461d      	mov	r5, r3
 8003294:	4643      	mov	r3, r8
 8003296:	18e3      	adds	r3, r4, r3
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800329c:	464b      	mov	r3, r9
 800329e:	eb45 0303 	adc.w	r3, r5, r3
 80032a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032c2:	4629      	mov	r1, r5
 80032c4:	008b      	lsls	r3, r1, #2
 80032c6:	4621      	mov	r1, r4
 80032c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032cc:	4621      	mov	r1, r4
 80032ce:	008a      	lsls	r2, r1, #2
 80032d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032d4:	f7fc fff4 	bl	80002c0 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4b60      	ldr	r3, [pc, #384]	; (8003460 <UART_SetConfig+0x4e4>)
 80032de:	fba3 2302 	umull	r2, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	011c      	lsls	r4, r3, #4
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	61b9      	str	r1, [r7, #24]
 8003300:	415b      	adcs	r3, r3
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003308:	4641      	mov	r1, r8
 800330a:	1851      	adds	r1, r2, r1
 800330c:	6139      	str	r1, [r7, #16]
 800330e:	4649      	mov	r1, r9
 8003310:	414b      	adcs	r3, r1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003320:	4659      	mov	r1, fp
 8003322:	00cb      	lsls	r3, r1, #3
 8003324:	4651      	mov	r1, sl
 8003326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332a:	4651      	mov	r1, sl
 800332c:	00ca      	lsls	r2, r1, #3
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	4603      	mov	r3, r0
 8003334:	4642      	mov	r2, r8
 8003336:	189b      	adds	r3, r3, r2
 8003338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	67bb      	str	r3, [r7, #120]	; 0x78
 8003352:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003360:	4649      	mov	r1, r9
 8003362:	008b      	lsls	r3, r1, #2
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336a:	4641      	mov	r1, r8
 800336c:	008a      	lsls	r2, r1, #2
 800336e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003372:	f7fc ffa5 	bl	80002c0 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4b39      	ldr	r3, [pc, #228]	; (8003460 <UART_SetConfig+0x4e4>)
 800337c:	fba3 1302 	umull	r1, r3, r3, r2
 8003380:	095b      	lsrs	r3, r3, #5
 8003382:	2164      	movs	r1, #100	; 0x64
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	3332      	adds	r3, #50	; 0x32
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <UART_SetConfig+0x4e4>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339a:	441c      	add	r4, r3
 800339c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a0:	2200      	movs	r2, #0
 80033a2:	673b      	str	r3, [r7, #112]	; 0x70
 80033a4:	677a      	str	r2, [r7, #116]	; 0x74
 80033a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033aa:	4642      	mov	r2, r8
 80033ac:	464b      	mov	r3, r9
 80033ae:	1891      	adds	r1, r2, r2
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	415b      	adcs	r3, r3
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ba:	4641      	mov	r1, r8
 80033bc:	1851      	adds	r1, r2, r1
 80033be:	6039      	str	r1, [r7, #0]
 80033c0:	4649      	mov	r1, r9
 80033c2:	414b      	adcs	r3, r1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d2:	4659      	mov	r1, fp
 80033d4:	00cb      	lsls	r3, r1, #3
 80033d6:	4651      	mov	r1, sl
 80033d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033dc:	4651      	mov	r1, sl
 80033de:	00ca      	lsls	r2, r1, #3
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	4642      	mov	r2, r8
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ec:	464b      	mov	r3, r9
 80033ee:	460a      	mov	r2, r1
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003400:	667a      	str	r2, [r7, #100]	; 0x64
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800340e:	4649      	mov	r1, r9
 8003410:	008b      	lsls	r3, r1, #2
 8003412:	4641      	mov	r1, r8
 8003414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003418:	4641      	mov	r1, r8
 800341a:	008a      	lsls	r2, r1, #2
 800341c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003420:	f7fc ff4e 	bl	80002c0 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <UART_SetConfig+0x4e4>)
 800342a:	fba3 1302 	umull	r1, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2164      	movs	r1, #100	; 0x64
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	3332      	adds	r3, #50	; 0x32
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <UART_SetConfig+0x4e4>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4422      	add	r2, r4
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	bf00      	nop
 8003454:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	51eb851f 	.word	0x51eb851f

08003464 <atoi>:
 8003464:	220a      	movs	r2, #10
 8003466:	2100      	movs	r1, #0
 8003468:	f000 b9da 	b.w	8003820 <strtol>

0800346c <__errno>:
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <__errno+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000180 	.word	0x20000180

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4d0d      	ldr	r5, [pc, #52]	; (80034b0 <__libc_init_array+0x38>)
 800347c:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	2600      	movs	r6, #0
 8003484:	42a6      	cmp	r6, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	4d0b      	ldr	r5, [pc, #44]	; (80034b8 <__libc_init_array+0x40>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	; (80034bc <__libc_init_array+0x44>)
 800348c:	f000 fd30 	bl	8003ef0 <_init>
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	2600      	movs	r6, #0
 8003496:	42a6      	cmp	r6, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a0:	4798      	blx	r3
 80034a2:	3601      	adds	r6, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034aa:	4798      	blx	r3
 80034ac:	3601      	adds	r6, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08004180 	.word	0x08004180
 80034b4:	08004180 	.word	0x08004180
 80034b8:	08004180 	.word	0x08004180
 80034bc:	08004184 	.word	0x08004184

080034c0 <memset>:
 80034c0:	4402      	add	r2, r0
 80034c2:	4603      	mov	r3, r0
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d100      	bne.n	80034ca <memset+0xa>
 80034c8:	4770      	bx	lr
 80034ca:	f803 1b01 	strb.w	r1, [r3], #1
 80034ce:	e7f9      	b.n	80034c4 <memset+0x4>

080034d0 <_free_r>:
 80034d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034d2:	2900      	cmp	r1, #0
 80034d4:	d044      	beq.n	8003560 <_free_r+0x90>
 80034d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034da:	9001      	str	r0, [sp, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f1a1 0404 	sub.w	r4, r1, #4
 80034e2:	bfb8      	it	lt
 80034e4:	18e4      	addlt	r4, r4, r3
 80034e6:	f000 f9a5 	bl	8003834 <__malloc_lock>
 80034ea:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <_free_r+0x94>)
 80034ec:	9801      	ldr	r0, [sp, #4]
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	b933      	cbnz	r3, 8003500 <_free_r+0x30>
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	6014      	str	r4, [r2, #0]
 80034f6:	b003      	add	sp, #12
 80034f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034fc:	f000 b9a0 	b.w	8003840 <__malloc_unlock>
 8003500:	42a3      	cmp	r3, r4
 8003502:	d908      	bls.n	8003516 <_free_r+0x46>
 8003504:	6825      	ldr	r5, [r4, #0]
 8003506:	1961      	adds	r1, r4, r5
 8003508:	428b      	cmp	r3, r1
 800350a:	bf01      	itttt	eq
 800350c:	6819      	ldreq	r1, [r3, #0]
 800350e:	685b      	ldreq	r3, [r3, #4]
 8003510:	1949      	addeq	r1, r1, r5
 8003512:	6021      	streq	r1, [r4, #0]
 8003514:	e7ed      	b.n	80034f2 <_free_r+0x22>
 8003516:	461a      	mov	r2, r3
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b10b      	cbz	r3, 8003520 <_free_r+0x50>
 800351c:	42a3      	cmp	r3, r4
 800351e:	d9fa      	bls.n	8003516 <_free_r+0x46>
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	1855      	adds	r5, r2, r1
 8003524:	42a5      	cmp	r5, r4
 8003526:	d10b      	bne.n	8003540 <_free_r+0x70>
 8003528:	6824      	ldr	r4, [r4, #0]
 800352a:	4421      	add	r1, r4
 800352c:	1854      	adds	r4, r2, r1
 800352e:	42a3      	cmp	r3, r4
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	d1e0      	bne.n	80034f6 <_free_r+0x26>
 8003534:	681c      	ldr	r4, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	6053      	str	r3, [r2, #4]
 800353a:	4421      	add	r1, r4
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	e7da      	b.n	80034f6 <_free_r+0x26>
 8003540:	d902      	bls.n	8003548 <_free_r+0x78>
 8003542:	230c      	movs	r3, #12
 8003544:	6003      	str	r3, [r0, #0]
 8003546:	e7d6      	b.n	80034f6 <_free_r+0x26>
 8003548:	6825      	ldr	r5, [r4, #0]
 800354a:	1961      	adds	r1, r4, r5
 800354c:	428b      	cmp	r3, r1
 800354e:	bf04      	itt	eq
 8003550:	6819      	ldreq	r1, [r3, #0]
 8003552:	685b      	ldreq	r3, [r3, #4]
 8003554:	6063      	str	r3, [r4, #4]
 8003556:	bf04      	itt	eq
 8003558:	1949      	addeq	r1, r1, r5
 800355a:	6021      	streq	r1, [r4, #0]
 800355c:	6054      	str	r4, [r2, #4]
 800355e:	e7ca      	b.n	80034f6 <_free_r+0x26>
 8003560:	b003      	add	sp, #12
 8003562:	bd30      	pop	{r4, r5, pc}
 8003564:	20000358 	.word	0x20000358

08003568 <sbrk_aligned>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	4e0e      	ldr	r6, [pc, #56]	; (80035a4 <sbrk_aligned+0x3c>)
 800356c:	460c      	mov	r4, r1
 800356e:	6831      	ldr	r1, [r6, #0]
 8003570:	4605      	mov	r5, r0
 8003572:	b911      	cbnz	r1, 800357a <sbrk_aligned+0x12>
 8003574:	f000 f88c 	bl	8003690 <_sbrk_r>
 8003578:	6030      	str	r0, [r6, #0]
 800357a:	4621      	mov	r1, r4
 800357c:	4628      	mov	r0, r5
 800357e:	f000 f887 	bl	8003690 <_sbrk_r>
 8003582:	1c43      	adds	r3, r0, #1
 8003584:	d00a      	beq.n	800359c <sbrk_aligned+0x34>
 8003586:	1cc4      	adds	r4, r0, #3
 8003588:	f024 0403 	bic.w	r4, r4, #3
 800358c:	42a0      	cmp	r0, r4
 800358e:	d007      	beq.n	80035a0 <sbrk_aligned+0x38>
 8003590:	1a21      	subs	r1, r4, r0
 8003592:	4628      	mov	r0, r5
 8003594:	f000 f87c 	bl	8003690 <_sbrk_r>
 8003598:	3001      	adds	r0, #1
 800359a:	d101      	bne.n	80035a0 <sbrk_aligned+0x38>
 800359c:	f04f 34ff 	mov.w	r4, #4294967295
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	2000035c 	.word	0x2000035c

080035a8 <_malloc_r>:
 80035a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ac:	1ccd      	adds	r5, r1, #3
 80035ae:	f025 0503 	bic.w	r5, r5, #3
 80035b2:	3508      	adds	r5, #8
 80035b4:	2d0c      	cmp	r5, #12
 80035b6:	bf38      	it	cc
 80035b8:	250c      	movcc	r5, #12
 80035ba:	2d00      	cmp	r5, #0
 80035bc:	4607      	mov	r7, r0
 80035be:	db01      	blt.n	80035c4 <_malloc_r+0x1c>
 80035c0:	42a9      	cmp	r1, r5
 80035c2:	d905      	bls.n	80035d0 <_malloc_r+0x28>
 80035c4:	230c      	movs	r3, #12
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	2600      	movs	r6, #0
 80035ca:	4630      	mov	r0, r6
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	4e2e      	ldr	r6, [pc, #184]	; (800368c <_malloc_r+0xe4>)
 80035d2:	f000 f92f 	bl	8003834 <__malloc_lock>
 80035d6:	6833      	ldr	r3, [r6, #0]
 80035d8:	461c      	mov	r4, r3
 80035da:	bb34      	cbnz	r4, 800362a <_malloc_r+0x82>
 80035dc:	4629      	mov	r1, r5
 80035de:	4638      	mov	r0, r7
 80035e0:	f7ff ffc2 	bl	8003568 <sbrk_aligned>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	4604      	mov	r4, r0
 80035e8:	d14d      	bne.n	8003686 <_malloc_r+0xde>
 80035ea:	6834      	ldr	r4, [r6, #0]
 80035ec:	4626      	mov	r6, r4
 80035ee:	2e00      	cmp	r6, #0
 80035f0:	d140      	bne.n	8003674 <_malloc_r+0xcc>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	4631      	mov	r1, r6
 80035f6:	4638      	mov	r0, r7
 80035f8:	eb04 0803 	add.w	r8, r4, r3
 80035fc:	f000 f848 	bl	8003690 <_sbrk_r>
 8003600:	4580      	cmp	r8, r0
 8003602:	d13a      	bne.n	800367a <_malloc_r+0xd2>
 8003604:	6821      	ldr	r1, [r4, #0]
 8003606:	3503      	adds	r5, #3
 8003608:	1a6d      	subs	r5, r5, r1
 800360a:	f025 0503 	bic.w	r5, r5, #3
 800360e:	3508      	adds	r5, #8
 8003610:	2d0c      	cmp	r5, #12
 8003612:	bf38      	it	cc
 8003614:	250c      	movcc	r5, #12
 8003616:	4629      	mov	r1, r5
 8003618:	4638      	mov	r0, r7
 800361a:	f7ff ffa5 	bl	8003568 <sbrk_aligned>
 800361e:	3001      	adds	r0, #1
 8003620:	d02b      	beq.n	800367a <_malloc_r+0xd2>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	442b      	add	r3, r5
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	e00e      	b.n	8003648 <_malloc_r+0xa0>
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	1b52      	subs	r2, r2, r5
 800362e:	d41e      	bmi.n	800366e <_malloc_r+0xc6>
 8003630:	2a0b      	cmp	r2, #11
 8003632:	d916      	bls.n	8003662 <_malloc_r+0xba>
 8003634:	1961      	adds	r1, r4, r5
 8003636:	42a3      	cmp	r3, r4
 8003638:	6025      	str	r5, [r4, #0]
 800363a:	bf18      	it	ne
 800363c:	6059      	strne	r1, [r3, #4]
 800363e:	6863      	ldr	r3, [r4, #4]
 8003640:	bf08      	it	eq
 8003642:	6031      	streq	r1, [r6, #0]
 8003644:	5162      	str	r2, [r4, r5]
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	4638      	mov	r0, r7
 800364a:	f104 060b 	add.w	r6, r4, #11
 800364e:	f000 f8f7 	bl	8003840 <__malloc_unlock>
 8003652:	f026 0607 	bic.w	r6, r6, #7
 8003656:	1d23      	adds	r3, r4, #4
 8003658:	1af2      	subs	r2, r6, r3
 800365a:	d0b6      	beq.n	80035ca <_malloc_r+0x22>
 800365c:	1b9b      	subs	r3, r3, r6
 800365e:	50a3      	str	r3, [r4, r2]
 8003660:	e7b3      	b.n	80035ca <_malloc_r+0x22>
 8003662:	6862      	ldr	r2, [r4, #4]
 8003664:	42a3      	cmp	r3, r4
 8003666:	bf0c      	ite	eq
 8003668:	6032      	streq	r2, [r6, #0]
 800366a:	605a      	strne	r2, [r3, #4]
 800366c:	e7ec      	b.n	8003648 <_malloc_r+0xa0>
 800366e:	4623      	mov	r3, r4
 8003670:	6864      	ldr	r4, [r4, #4]
 8003672:	e7b2      	b.n	80035da <_malloc_r+0x32>
 8003674:	4634      	mov	r4, r6
 8003676:	6876      	ldr	r6, [r6, #4]
 8003678:	e7b9      	b.n	80035ee <_malloc_r+0x46>
 800367a:	230c      	movs	r3, #12
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4638      	mov	r0, r7
 8003680:	f000 f8de 	bl	8003840 <__malloc_unlock>
 8003684:	e7a1      	b.n	80035ca <_malloc_r+0x22>
 8003686:	6025      	str	r5, [r4, #0]
 8003688:	e7de      	b.n	8003648 <_malloc_r+0xa0>
 800368a:	bf00      	nop
 800368c:	20000358 	.word	0x20000358

08003690 <_sbrk_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4d06      	ldr	r5, [pc, #24]	; (80036ac <_sbrk_r+0x1c>)
 8003694:	2300      	movs	r3, #0
 8003696:	4604      	mov	r4, r0
 8003698:	4608      	mov	r0, r1
 800369a:	602b      	str	r3, [r5, #0]
 800369c:	f7fd fc92 	bl	8000fc4 <_sbrk>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_sbrk_r+0x1a>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_sbrk_r+0x1a>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000360 	.word	0x20000360

080036b0 <siprintf>:
 80036b0:	b40e      	push	{r1, r2, r3}
 80036b2:	b500      	push	{lr}
 80036b4:	b09c      	sub	sp, #112	; 0x70
 80036b6:	ab1d      	add	r3, sp, #116	; 0x74
 80036b8:	9002      	str	r0, [sp, #8]
 80036ba:	9006      	str	r0, [sp, #24]
 80036bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <siprintf+0x38>)
 80036c2:	9107      	str	r1, [sp, #28]
 80036c4:	9104      	str	r1, [sp, #16]
 80036c6:	4909      	ldr	r1, [pc, #36]	; (80036ec <siprintf+0x3c>)
 80036c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036cc:	9105      	str	r1, [sp, #20]
 80036ce:	6800      	ldr	r0, [r0, #0]
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	a902      	add	r1, sp, #8
 80036d4:	f000 f916 	bl	8003904 <_svfiprintf_r>
 80036d8:	9b02      	ldr	r3, [sp, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	b01c      	add	sp, #112	; 0x70
 80036e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e4:	b003      	add	sp, #12
 80036e6:	4770      	bx	lr
 80036e8:	20000180 	.word	0x20000180
 80036ec:	ffff0208 	.word	0xffff0208

080036f0 <strstr>:
 80036f0:	780a      	ldrb	r2, [r1, #0]
 80036f2:	b570      	push	{r4, r5, r6, lr}
 80036f4:	b96a      	cbnz	r2, 8003712 <strstr+0x22>
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d109      	bne.n	8003710 <strstr+0x20>
 80036fc:	460c      	mov	r4, r1
 80036fe:	4605      	mov	r5, r0
 8003700:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f6      	beq.n	80036f6 <strstr+0x6>
 8003708:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800370c:	429e      	cmp	r6, r3
 800370e:	d0f7      	beq.n	8003700 <strstr+0x10>
 8003710:	3001      	adds	r0, #1
 8003712:	7803      	ldrb	r3, [r0, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ef      	bne.n	80036f8 <strstr+0x8>
 8003718:	4618      	mov	r0, r3
 800371a:	e7ec      	b.n	80036f6 <strstr+0x6>

0800371c <_strtol_l.constprop.0>:
 800371c:	2b01      	cmp	r3, #1
 800371e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003722:	d001      	beq.n	8003728 <_strtol_l.constprop.0+0xc>
 8003724:	2b24      	cmp	r3, #36	; 0x24
 8003726:	d906      	bls.n	8003736 <_strtol_l.constprop.0+0x1a>
 8003728:	f7ff fea0 	bl	800346c <__errno>
 800372c:	2316      	movs	r3, #22
 800372e:	6003      	str	r3, [r0, #0]
 8003730:	2000      	movs	r0, #0
 8003732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003736:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800381c <_strtol_l.constprop.0+0x100>
 800373a:	460d      	mov	r5, r1
 800373c:	462e      	mov	r6, r5
 800373e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003742:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003746:	f017 0708 	ands.w	r7, r7, #8
 800374a:	d1f7      	bne.n	800373c <_strtol_l.constprop.0+0x20>
 800374c:	2c2d      	cmp	r4, #45	; 0x2d
 800374e:	d132      	bne.n	80037b6 <_strtol_l.constprop.0+0x9a>
 8003750:	782c      	ldrb	r4, [r5, #0]
 8003752:	2701      	movs	r7, #1
 8003754:	1cb5      	adds	r5, r6, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d05b      	beq.n	8003812 <_strtol_l.constprop.0+0xf6>
 800375a:	2b10      	cmp	r3, #16
 800375c:	d109      	bne.n	8003772 <_strtol_l.constprop.0+0x56>
 800375e:	2c30      	cmp	r4, #48	; 0x30
 8003760:	d107      	bne.n	8003772 <_strtol_l.constprop.0+0x56>
 8003762:	782c      	ldrb	r4, [r5, #0]
 8003764:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003768:	2c58      	cmp	r4, #88	; 0x58
 800376a:	d14d      	bne.n	8003808 <_strtol_l.constprop.0+0xec>
 800376c:	786c      	ldrb	r4, [r5, #1]
 800376e:	2310      	movs	r3, #16
 8003770:	3502      	adds	r5, #2
 8003772:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003776:	f108 38ff 	add.w	r8, r8, #4294967295
 800377a:	f04f 0c00 	mov.w	ip, #0
 800377e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003782:	4666      	mov	r6, ip
 8003784:	fb03 8a19 	mls	sl, r3, r9, r8
 8003788:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800378c:	f1be 0f09 	cmp.w	lr, #9
 8003790:	d816      	bhi.n	80037c0 <_strtol_l.constprop.0+0xa4>
 8003792:	4674      	mov	r4, lr
 8003794:	42a3      	cmp	r3, r4
 8003796:	dd24      	ble.n	80037e2 <_strtol_l.constprop.0+0xc6>
 8003798:	f1bc 0f00 	cmp.w	ip, #0
 800379c:	db1e      	blt.n	80037dc <_strtol_l.constprop.0+0xc0>
 800379e:	45b1      	cmp	r9, r6
 80037a0:	d31c      	bcc.n	80037dc <_strtol_l.constprop.0+0xc0>
 80037a2:	d101      	bne.n	80037a8 <_strtol_l.constprop.0+0x8c>
 80037a4:	45a2      	cmp	sl, r4
 80037a6:	db19      	blt.n	80037dc <_strtol_l.constprop.0+0xc0>
 80037a8:	fb06 4603 	mla	r6, r6, r3, r4
 80037ac:	f04f 0c01 	mov.w	ip, #1
 80037b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037b4:	e7e8      	b.n	8003788 <_strtol_l.constprop.0+0x6c>
 80037b6:	2c2b      	cmp	r4, #43	; 0x2b
 80037b8:	bf04      	itt	eq
 80037ba:	782c      	ldrbeq	r4, [r5, #0]
 80037bc:	1cb5      	addeq	r5, r6, #2
 80037be:	e7ca      	b.n	8003756 <_strtol_l.constprop.0+0x3a>
 80037c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80037c4:	f1be 0f19 	cmp.w	lr, #25
 80037c8:	d801      	bhi.n	80037ce <_strtol_l.constprop.0+0xb2>
 80037ca:	3c37      	subs	r4, #55	; 0x37
 80037cc:	e7e2      	b.n	8003794 <_strtol_l.constprop.0+0x78>
 80037ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80037d2:	f1be 0f19 	cmp.w	lr, #25
 80037d6:	d804      	bhi.n	80037e2 <_strtol_l.constprop.0+0xc6>
 80037d8:	3c57      	subs	r4, #87	; 0x57
 80037da:	e7db      	b.n	8003794 <_strtol_l.constprop.0+0x78>
 80037dc:	f04f 3cff 	mov.w	ip, #4294967295
 80037e0:	e7e6      	b.n	80037b0 <_strtol_l.constprop.0+0x94>
 80037e2:	f1bc 0f00 	cmp.w	ip, #0
 80037e6:	da05      	bge.n	80037f4 <_strtol_l.constprop.0+0xd8>
 80037e8:	2322      	movs	r3, #34	; 0x22
 80037ea:	6003      	str	r3, [r0, #0]
 80037ec:	4646      	mov	r6, r8
 80037ee:	b942      	cbnz	r2, 8003802 <_strtol_l.constprop.0+0xe6>
 80037f0:	4630      	mov	r0, r6
 80037f2:	e79e      	b.n	8003732 <_strtol_l.constprop.0+0x16>
 80037f4:	b107      	cbz	r7, 80037f8 <_strtol_l.constprop.0+0xdc>
 80037f6:	4276      	negs	r6, r6
 80037f8:	2a00      	cmp	r2, #0
 80037fa:	d0f9      	beq.n	80037f0 <_strtol_l.constprop.0+0xd4>
 80037fc:	f1bc 0f00 	cmp.w	ip, #0
 8003800:	d000      	beq.n	8003804 <_strtol_l.constprop.0+0xe8>
 8003802:	1e69      	subs	r1, r5, #1
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	e7f3      	b.n	80037f0 <_strtol_l.constprop.0+0xd4>
 8003808:	2430      	movs	r4, #48	; 0x30
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1b1      	bne.n	8003772 <_strtol_l.constprop.0+0x56>
 800380e:	2308      	movs	r3, #8
 8003810:	e7af      	b.n	8003772 <_strtol_l.constprop.0+0x56>
 8003812:	2c30      	cmp	r4, #48	; 0x30
 8003814:	d0a5      	beq.n	8003762 <_strtol_l.constprop.0+0x46>
 8003816:	230a      	movs	r3, #10
 8003818:	e7ab      	b.n	8003772 <_strtol_l.constprop.0+0x56>
 800381a:	bf00      	nop
 800381c:	08004045 	.word	0x08004045

08003820 <strtol>:
 8003820:	4613      	mov	r3, r2
 8003822:	460a      	mov	r2, r1
 8003824:	4601      	mov	r1, r0
 8003826:	4802      	ldr	r0, [pc, #8]	; (8003830 <strtol+0x10>)
 8003828:	6800      	ldr	r0, [r0, #0]
 800382a:	f7ff bf77 	b.w	800371c <_strtol_l.constprop.0>
 800382e:	bf00      	nop
 8003830:	20000180 	.word	0x20000180

08003834 <__malloc_lock>:
 8003834:	4801      	ldr	r0, [pc, #4]	; (800383c <__malloc_lock+0x8>)
 8003836:	f000 baf9 	b.w	8003e2c <__retarget_lock_acquire_recursive>
 800383a:	bf00      	nop
 800383c:	20000364 	.word	0x20000364

08003840 <__malloc_unlock>:
 8003840:	4801      	ldr	r0, [pc, #4]	; (8003848 <__malloc_unlock+0x8>)
 8003842:	f000 baf4 	b.w	8003e2e <__retarget_lock_release_recursive>
 8003846:	bf00      	nop
 8003848:	20000364 	.word	0x20000364

0800384c <__ssputs_r>:
 800384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	688e      	ldr	r6, [r1, #8]
 8003852:	429e      	cmp	r6, r3
 8003854:	4682      	mov	sl, r0
 8003856:	460c      	mov	r4, r1
 8003858:	4690      	mov	r8, r2
 800385a:	461f      	mov	r7, r3
 800385c:	d838      	bhi.n	80038d0 <__ssputs_r+0x84>
 800385e:	898a      	ldrh	r2, [r1, #12]
 8003860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003864:	d032      	beq.n	80038cc <__ssputs_r+0x80>
 8003866:	6825      	ldr	r5, [r4, #0]
 8003868:	6909      	ldr	r1, [r1, #16]
 800386a:	eba5 0901 	sub.w	r9, r5, r1
 800386e:	6965      	ldr	r5, [r4, #20]
 8003870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003878:	3301      	adds	r3, #1
 800387a:	444b      	add	r3, r9
 800387c:	106d      	asrs	r5, r5, #1
 800387e:	429d      	cmp	r5, r3
 8003880:	bf38      	it	cc
 8003882:	461d      	movcc	r5, r3
 8003884:	0553      	lsls	r3, r2, #21
 8003886:	d531      	bpl.n	80038ec <__ssputs_r+0xa0>
 8003888:	4629      	mov	r1, r5
 800388a:	f7ff fe8d 	bl	80035a8 <_malloc_r>
 800388e:	4606      	mov	r6, r0
 8003890:	b950      	cbnz	r0, 80038a8 <__ssputs_r+0x5c>
 8003892:	230c      	movs	r3, #12
 8003894:	f8ca 3000 	str.w	r3, [sl]
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a8:	6921      	ldr	r1, [r4, #16]
 80038aa:	464a      	mov	r2, r9
 80038ac:	f000 fac0 	bl	8003e30 <memcpy>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	6126      	str	r6, [r4, #16]
 80038be:	6165      	str	r5, [r4, #20]
 80038c0:	444e      	add	r6, r9
 80038c2:	eba5 0509 	sub.w	r5, r5, r9
 80038c6:	6026      	str	r6, [r4, #0]
 80038c8:	60a5      	str	r5, [r4, #8]
 80038ca:	463e      	mov	r6, r7
 80038cc:	42be      	cmp	r6, r7
 80038ce:	d900      	bls.n	80038d2 <__ssputs_r+0x86>
 80038d0:	463e      	mov	r6, r7
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	4632      	mov	r2, r6
 80038d6:	4641      	mov	r1, r8
 80038d8:	f000 fab8 	bl	8003e4c <memmove>
 80038dc:	68a3      	ldr	r3, [r4, #8]
 80038de:	1b9b      	subs	r3, r3, r6
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	4433      	add	r3, r6
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	e7db      	b.n	80038a4 <__ssputs_r+0x58>
 80038ec:	462a      	mov	r2, r5
 80038ee:	f000 fac7 	bl	8003e80 <_realloc_r>
 80038f2:	4606      	mov	r6, r0
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1e1      	bne.n	80038bc <__ssputs_r+0x70>
 80038f8:	6921      	ldr	r1, [r4, #16]
 80038fa:	4650      	mov	r0, sl
 80038fc:	f7ff fde8 	bl	80034d0 <_free_r>
 8003900:	e7c7      	b.n	8003892 <__ssputs_r+0x46>
	...

08003904 <_svfiprintf_r>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	4698      	mov	r8, r3
 800390a:	898b      	ldrh	r3, [r1, #12]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	b09d      	sub	sp, #116	; 0x74
 8003910:	4607      	mov	r7, r0
 8003912:	460d      	mov	r5, r1
 8003914:	4614      	mov	r4, r2
 8003916:	d50e      	bpl.n	8003936 <_svfiprintf_r+0x32>
 8003918:	690b      	ldr	r3, [r1, #16]
 800391a:	b963      	cbnz	r3, 8003936 <_svfiprintf_r+0x32>
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	f7ff fe43 	bl	80035a8 <_malloc_r>
 8003922:	6028      	str	r0, [r5, #0]
 8003924:	6128      	str	r0, [r5, #16]
 8003926:	b920      	cbnz	r0, 8003932 <_svfiprintf_r+0x2e>
 8003928:	230c      	movs	r3, #12
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	e0d1      	b.n	8003ad6 <_svfiprintf_r+0x1d2>
 8003932:	2340      	movs	r3, #64	; 0x40
 8003934:	616b      	str	r3, [r5, #20]
 8003936:	2300      	movs	r3, #0
 8003938:	9309      	str	r3, [sp, #36]	; 0x24
 800393a:	2320      	movs	r3, #32
 800393c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003940:	f8cd 800c 	str.w	r8, [sp, #12]
 8003944:	2330      	movs	r3, #48	; 0x30
 8003946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003af0 <_svfiprintf_r+0x1ec>
 800394a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800394e:	f04f 0901 	mov.w	r9, #1
 8003952:	4623      	mov	r3, r4
 8003954:	469a      	mov	sl, r3
 8003956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395a:	b10a      	cbz	r2, 8003960 <_svfiprintf_r+0x5c>
 800395c:	2a25      	cmp	r2, #37	; 0x25
 800395e:	d1f9      	bne.n	8003954 <_svfiprintf_r+0x50>
 8003960:	ebba 0b04 	subs.w	fp, sl, r4
 8003964:	d00b      	beq.n	800397e <_svfiprintf_r+0x7a>
 8003966:	465b      	mov	r3, fp
 8003968:	4622      	mov	r2, r4
 800396a:	4629      	mov	r1, r5
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ff6d 	bl	800384c <__ssputs_r>
 8003972:	3001      	adds	r0, #1
 8003974:	f000 80aa 	beq.w	8003acc <_svfiprintf_r+0x1c8>
 8003978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800397a:	445a      	add	r2, fp
 800397c:	9209      	str	r2, [sp, #36]	; 0x24
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a2 	beq.w	8003acc <_svfiprintf_r+0x1c8>
 8003988:	2300      	movs	r3, #0
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003992:	f10a 0a01 	add.w	sl, sl, #1
 8003996:	9304      	str	r3, [sp, #16]
 8003998:	9307      	str	r3, [sp, #28]
 800399a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800399e:	931a      	str	r3, [sp, #104]	; 0x68
 80039a0:	4654      	mov	r4, sl
 80039a2:	2205      	movs	r2, #5
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	4851      	ldr	r0, [pc, #324]	; (8003af0 <_svfiprintf_r+0x1ec>)
 80039aa:	f7fc fc39 	bl	8000220 <memchr>
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	b9d8      	cbnz	r0, 80039ea <_svfiprintf_r+0xe6>
 80039b2:	06d0      	lsls	r0, r2, #27
 80039b4:	bf44      	itt	mi
 80039b6:	2320      	movmi	r3, #32
 80039b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039bc:	0711      	lsls	r1, r2, #28
 80039be:	bf44      	itt	mi
 80039c0:	232b      	movmi	r3, #43	; 0x2b
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ca:	2b2a      	cmp	r3, #42	; 0x2a
 80039cc:	d015      	beq.n	80039fa <_svfiprintf_r+0xf6>
 80039ce:	9a07      	ldr	r2, [sp, #28]
 80039d0:	4654      	mov	r4, sl
 80039d2:	2000      	movs	r0, #0
 80039d4:	f04f 0c0a 	mov.w	ip, #10
 80039d8:	4621      	mov	r1, r4
 80039da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039de:	3b30      	subs	r3, #48	; 0x30
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d94e      	bls.n	8003a82 <_svfiprintf_r+0x17e>
 80039e4:	b1b0      	cbz	r0, 8003a14 <_svfiprintf_r+0x110>
 80039e6:	9207      	str	r2, [sp, #28]
 80039e8:	e014      	b.n	8003a14 <_svfiprintf_r+0x110>
 80039ea:	eba0 0308 	sub.w	r3, r0, r8
 80039ee:	fa09 f303 	lsl.w	r3, r9, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	46a2      	mov	sl, r4
 80039f8:	e7d2      	b.n	80039a0 <_svfiprintf_r+0x9c>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfbb      	ittet	lt
 8003a06:	425b      	neglt	r3, r3
 8003a08:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0c:	9307      	strge	r3, [sp, #28]
 8003a0e:	9307      	strlt	r3, [sp, #28]
 8003a10:	bfb8      	it	lt
 8003a12:	9204      	strlt	r2, [sp, #16]
 8003a14:	7823      	ldrb	r3, [r4, #0]
 8003a16:	2b2e      	cmp	r3, #46	; 0x2e
 8003a18:	d10c      	bne.n	8003a34 <_svfiprintf_r+0x130>
 8003a1a:	7863      	ldrb	r3, [r4, #1]
 8003a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a1e:	d135      	bne.n	8003a8c <_svfiprintf_r+0x188>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	9203      	str	r2, [sp, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bfb8      	it	lt
 8003a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a30:	3402      	adds	r4, #2
 8003a32:	9305      	str	r3, [sp, #20]
 8003a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b00 <_svfiprintf_r+0x1fc>
 8003a38:	7821      	ldrb	r1, [r4, #0]
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	f7fc fbef 	bl	8000220 <memchr>
 8003a42:	b140      	cbz	r0, 8003a56 <_svfiprintf_r+0x152>
 8003a44:	2340      	movs	r3, #64	; 0x40
 8003a46:	eba0 000a 	sub.w	r0, r0, sl
 8003a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a4e:	9b04      	ldr	r3, [sp, #16]
 8003a50:	4303      	orrs	r3, r0
 8003a52:	3401      	adds	r4, #1
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a5a:	4826      	ldr	r0, [pc, #152]	; (8003af4 <_svfiprintf_r+0x1f0>)
 8003a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a60:	2206      	movs	r2, #6
 8003a62:	f7fc fbdd 	bl	8000220 <memchr>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d038      	beq.n	8003adc <_svfiprintf_r+0x1d8>
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <_svfiprintf_r+0x1f4>)
 8003a6c:	bb1b      	cbnz	r3, 8003ab6 <_svfiprintf_r+0x1b2>
 8003a6e:	9b03      	ldr	r3, [sp, #12]
 8003a70:	3307      	adds	r3, #7
 8003a72:	f023 0307 	bic.w	r3, r3, #7
 8003a76:	3308      	adds	r3, #8
 8003a78:	9303      	str	r3, [sp, #12]
 8003a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a7c:	4433      	add	r3, r6
 8003a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a80:	e767      	b.n	8003952 <_svfiprintf_r+0x4e>
 8003a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a86:	460c      	mov	r4, r1
 8003a88:	2001      	movs	r0, #1
 8003a8a:	e7a5      	b.n	80039d8 <_svfiprintf_r+0xd4>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	3401      	adds	r4, #1
 8003a90:	9305      	str	r3, [sp, #20]
 8003a92:	4619      	mov	r1, r3
 8003a94:	f04f 0c0a 	mov.w	ip, #10
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a9e:	3a30      	subs	r2, #48	; 0x30
 8003aa0:	2a09      	cmp	r2, #9
 8003aa2:	d903      	bls.n	8003aac <_svfiprintf_r+0x1a8>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0c5      	beq.n	8003a34 <_svfiprintf_r+0x130>
 8003aa8:	9105      	str	r1, [sp, #20]
 8003aaa:	e7c3      	b.n	8003a34 <_svfiprintf_r+0x130>
 8003aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7f0      	b.n	8003a98 <_svfiprintf_r+0x194>
 8003ab6:	ab03      	add	r3, sp, #12
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	462a      	mov	r2, r5
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <_svfiprintf_r+0x1f8>)
 8003abe:	a904      	add	r1, sp, #16
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f3af 8000 	nop.w
 8003ac6:	1c42      	adds	r2, r0, #1
 8003ac8:	4606      	mov	r6, r0
 8003aca:	d1d6      	bne.n	8003a7a <_svfiprintf_r+0x176>
 8003acc:	89ab      	ldrh	r3, [r5, #12]
 8003ace:	065b      	lsls	r3, r3, #25
 8003ad0:	f53f af2c 	bmi.w	800392c <_svfiprintf_r+0x28>
 8003ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ad6:	b01d      	add	sp, #116	; 0x74
 8003ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003adc:	ab03      	add	r3, sp, #12
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <_svfiprintf_r+0x1f8>)
 8003ae4:	a904      	add	r1, sp, #16
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	f000 f87a 	bl	8003be0 <_printf_i>
 8003aec:	e7eb      	b.n	8003ac6 <_svfiprintf_r+0x1c2>
 8003aee:	bf00      	nop
 8003af0:	08004145 	.word	0x08004145
 8003af4:	0800414f 	.word	0x0800414f
 8003af8:	00000000 	.word	0x00000000
 8003afc:	0800384d 	.word	0x0800384d
 8003b00:	0800414b 	.word	0x0800414b

08003b04 <_printf_common>:
 8003b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	4616      	mov	r6, r2
 8003b0a:	4699      	mov	r9, r3
 8003b0c:	688a      	ldr	r2, [r1, #8]
 8003b0e:	690b      	ldr	r3, [r1, #16]
 8003b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bfb8      	it	lt
 8003b18:	4613      	movlt	r3, r2
 8003b1a:	6033      	str	r3, [r6, #0]
 8003b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b20:	4607      	mov	r7, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	b10a      	cbz	r2, 8003b2a <_printf_common+0x26>
 8003b26:	3301      	adds	r3, #1
 8003b28:	6033      	str	r3, [r6, #0]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	0699      	lsls	r1, r3, #26
 8003b2e:	bf42      	ittt	mi
 8003b30:	6833      	ldrmi	r3, [r6, #0]
 8003b32:	3302      	addmi	r3, #2
 8003b34:	6033      	strmi	r3, [r6, #0]
 8003b36:	6825      	ldr	r5, [r4, #0]
 8003b38:	f015 0506 	ands.w	r5, r5, #6
 8003b3c:	d106      	bne.n	8003b4c <_printf_common+0x48>
 8003b3e:	f104 0a19 	add.w	sl, r4, #25
 8003b42:	68e3      	ldr	r3, [r4, #12]
 8003b44:	6832      	ldr	r2, [r6, #0]
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	42ab      	cmp	r3, r5
 8003b4a:	dc26      	bgt.n	8003b9a <_printf_common+0x96>
 8003b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b50:	1e13      	subs	r3, r2, #0
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	bf18      	it	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	0692      	lsls	r2, r2, #26
 8003b5a:	d42b      	bmi.n	8003bb4 <_printf_common+0xb0>
 8003b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b60:	4649      	mov	r1, r9
 8003b62:	4638      	mov	r0, r7
 8003b64:	47c0      	blx	r8
 8003b66:	3001      	adds	r0, #1
 8003b68:	d01e      	beq.n	8003ba8 <_printf_common+0xa4>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	68e5      	ldr	r5, [r4, #12]
 8003b6e:	6832      	ldr	r2, [r6, #0]
 8003b70:	f003 0306 	and.w	r3, r3, #6
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	bf08      	it	eq
 8003b78:	1aad      	subeq	r5, r5, r2
 8003b7a:	68a3      	ldr	r3, [r4, #8]
 8003b7c:	6922      	ldr	r2, [r4, #16]
 8003b7e:	bf0c      	ite	eq
 8003b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b84:	2500      	movne	r5, #0
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bfc4      	itt	gt
 8003b8a:	1a9b      	subgt	r3, r3, r2
 8003b8c:	18ed      	addgt	r5, r5, r3
 8003b8e:	2600      	movs	r6, #0
 8003b90:	341a      	adds	r4, #26
 8003b92:	42b5      	cmp	r5, r6
 8003b94:	d11a      	bne.n	8003bcc <_printf_common+0xc8>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e008      	b.n	8003bac <_printf_common+0xa8>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4652      	mov	r2, sl
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	47c0      	blx	r8
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d103      	bne.n	8003bb0 <_printf_common+0xac>
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	e7c6      	b.n	8003b42 <_printf_common+0x3e>
 8003bb4:	18e1      	adds	r1, r4, r3
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	2030      	movs	r0, #48	; 0x30
 8003bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bbe:	4422      	add	r2, r4
 8003bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bc8:	3302      	adds	r3, #2
 8003bca:	e7c7      	b.n	8003b5c <_printf_common+0x58>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	47c0      	blx	r8
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d0e6      	beq.n	8003ba8 <_printf_common+0xa4>
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7d9      	b.n	8003b92 <_printf_common+0x8e>
	...

08003be0 <_printf_i>:
 8003be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	7e0f      	ldrb	r7, [r1, #24]
 8003be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003be8:	2f78      	cmp	r7, #120	; 0x78
 8003bea:	4691      	mov	r9, r2
 8003bec:	4680      	mov	r8, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	469a      	mov	sl, r3
 8003bf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bf6:	d807      	bhi.n	8003c08 <_printf_i+0x28>
 8003bf8:	2f62      	cmp	r7, #98	; 0x62
 8003bfa:	d80a      	bhi.n	8003c12 <_printf_i+0x32>
 8003bfc:	2f00      	cmp	r7, #0
 8003bfe:	f000 80d8 	beq.w	8003db2 <_printf_i+0x1d2>
 8003c02:	2f58      	cmp	r7, #88	; 0x58
 8003c04:	f000 80a3 	beq.w	8003d4e <_printf_i+0x16e>
 8003c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c10:	e03a      	b.n	8003c88 <_printf_i+0xa8>
 8003c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c16:	2b15      	cmp	r3, #21
 8003c18:	d8f6      	bhi.n	8003c08 <_printf_i+0x28>
 8003c1a:	a101      	add	r1, pc, #4	; (adr r1, 8003c20 <_printf_i+0x40>)
 8003c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c8d 	.word	0x08003c8d
 8003c28:	08003c09 	.word	0x08003c09
 8003c2c:	08003c09 	.word	0x08003c09
 8003c30:	08003c09 	.word	0x08003c09
 8003c34:	08003c09 	.word	0x08003c09
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003c09 	.word	0x08003c09
 8003c40:	08003c09 	.word	0x08003c09
 8003c44:	08003c09 	.word	0x08003c09
 8003c48:	08003c09 	.word	0x08003c09
 8003c4c:	08003d99 	.word	0x08003d99
 8003c50:	08003cbd 	.word	0x08003cbd
 8003c54:	08003d7b 	.word	0x08003d7b
 8003c58:	08003c09 	.word	0x08003c09
 8003c5c:	08003c09 	.word	0x08003c09
 8003c60:	08003dbb 	.word	0x08003dbb
 8003c64:	08003c09 	.word	0x08003c09
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003c09 	.word	0x08003c09
 8003c70:	08003c09 	.word	0x08003c09
 8003c74:	08003d83 	.word	0x08003d83
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	602a      	str	r2, [r5, #0]
 8003c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0a3      	b.n	8003dd4 <_printf_i+0x1f4>
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	6829      	ldr	r1, [r5, #0]
 8003c90:	0606      	lsls	r6, r0, #24
 8003c92:	f101 0304 	add.w	r3, r1, #4
 8003c96:	d50a      	bpl.n	8003cae <_printf_i+0xce>
 8003c98:	680e      	ldr	r6, [r1, #0]
 8003c9a:	602b      	str	r3, [r5, #0]
 8003c9c:	2e00      	cmp	r6, #0
 8003c9e:	da03      	bge.n	8003ca8 <_printf_i+0xc8>
 8003ca0:	232d      	movs	r3, #45	; 0x2d
 8003ca2:	4276      	negs	r6, r6
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ca8:	485e      	ldr	r0, [pc, #376]	; (8003e24 <_printf_i+0x244>)
 8003caa:	230a      	movs	r3, #10
 8003cac:	e019      	b.n	8003ce2 <_printf_i+0x102>
 8003cae:	680e      	ldr	r6, [r1, #0]
 8003cb0:	602b      	str	r3, [r5, #0]
 8003cb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cb6:	bf18      	it	ne
 8003cb8:	b236      	sxthne	r6, r6
 8003cba:	e7ef      	b.n	8003c9c <_printf_i+0xbc>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	6820      	ldr	r0, [r4, #0]
 8003cc0:	1d19      	adds	r1, r3, #4
 8003cc2:	6029      	str	r1, [r5, #0]
 8003cc4:	0601      	lsls	r1, r0, #24
 8003cc6:	d501      	bpl.n	8003ccc <_printf_i+0xec>
 8003cc8:	681e      	ldr	r6, [r3, #0]
 8003cca:	e002      	b.n	8003cd2 <_printf_i+0xf2>
 8003ccc:	0646      	lsls	r6, r0, #25
 8003cce:	d5fb      	bpl.n	8003cc8 <_printf_i+0xe8>
 8003cd0:	881e      	ldrh	r6, [r3, #0]
 8003cd2:	4854      	ldr	r0, [pc, #336]	; (8003e24 <_printf_i+0x244>)
 8003cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2308      	moveq	r3, #8
 8003cda:	230a      	movne	r3, #10
 8003cdc:	2100      	movs	r1, #0
 8003cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ce2:	6865      	ldr	r5, [r4, #4]
 8003ce4:	60a5      	str	r5, [r4, #8]
 8003ce6:	2d00      	cmp	r5, #0
 8003ce8:	bfa2      	ittt	ge
 8003cea:	6821      	ldrge	r1, [r4, #0]
 8003cec:	f021 0104 	bicge.w	r1, r1, #4
 8003cf0:	6021      	strge	r1, [r4, #0]
 8003cf2:	b90e      	cbnz	r6, 8003cf8 <_printf_i+0x118>
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	d04d      	beq.n	8003d94 <_printf_i+0x1b4>
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8003d02:	5dc7      	ldrb	r7, [r0, r7]
 8003d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d08:	4637      	mov	r7, r6
 8003d0a:	42bb      	cmp	r3, r7
 8003d0c:	460e      	mov	r6, r1
 8003d0e:	d9f4      	bls.n	8003cfa <_printf_i+0x11a>
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d10b      	bne.n	8003d2c <_printf_i+0x14c>
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	07de      	lsls	r6, r3, #31
 8003d18:	d508      	bpl.n	8003d2c <_printf_i+0x14c>
 8003d1a:	6923      	ldr	r3, [r4, #16]
 8003d1c:	6861      	ldr	r1, [r4, #4]
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	bfde      	ittt	le
 8003d22:	2330      	movle	r3, #48	; 0x30
 8003d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d2c:	1b52      	subs	r2, r2, r5
 8003d2e:	6122      	str	r2, [r4, #16]
 8003d30:	f8cd a000 	str.w	sl, [sp]
 8003d34:	464b      	mov	r3, r9
 8003d36:	aa03      	add	r2, sp, #12
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	f7ff fee2 	bl	8003b04 <_printf_common>
 8003d40:	3001      	adds	r0, #1
 8003d42:	d14c      	bne.n	8003dde <_printf_i+0x1fe>
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	b004      	add	sp, #16
 8003d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4e:	4835      	ldr	r0, [pc, #212]	; (8003e24 <_printf_i+0x244>)
 8003d50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d54:	6829      	ldr	r1, [r5, #0]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d5c:	6029      	str	r1, [r5, #0]
 8003d5e:	061d      	lsls	r5, r3, #24
 8003d60:	d514      	bpl.n	8003d8c <_printf_i+0x1ac>
 8003d62:	07df      	lsls	r7, r3, #31
 8003d64:	bf44      	itt	mi
 8003d66:	f043 0320 	orrmi.w	r3, r3, #32
 8003d6a:	6023      	strmi	r3, [r4, #0]
 8003d6c:	b91e      	cbnz	r6, 8003d76 <_printf_i+0x196>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	f023 0320 	bic.w	r3, r3, #32
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	2310      	movs	r3, #16
 8003d78:	e7b0      	b.n	8003cdc <_printf_i+0xfc>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f043 0320 	orr.w	r3, r3, #32
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	2378      	movs	r3, #120	; 0x78
 8003d84:	4828      	ldr	r0, [pc, #160]	; (8003e28 <_printf_i+0x248>)
 8003d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d8a:	e7e3      	b.n	8003d54 <_printf_i+0x174>
 8003d8c:	0659      	lsls	r1, r3, #25
 8003d8e:	bf48      	it	mi
 8003d90:	b2b6      	uxthmi	r6, r6
 8003d92:	e7e6      	b.n	8003d62 <_printf_i+0x182>
 8003d94:	4615      	mov	r5, r2
 8003d96:	e7bb      	b.n	8003d10 <_printf_i+0x130>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	6826      	ldr	r6, [r4, #0]
 8003d9c:	6961      	ldr	r1, [r4, #20]
 8003d9e:	1d18      	adds	r0, r3, #4
 8003da0:	6028      	str	r0, [r5, #0]
 8003da2:	0635      	lsls	r5, r6, #24
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0x1cc>
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	e002      	b.n	8003db2 <_printf_i+0x1d2>
 8003dac:	0670      	lsls	r0, r6, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0x1c8>
 8003db0:	8019      	strh	r1, [r3, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	6123      	str	r3, [r4, #16]
 8003db6:	4615      	mov	r5, r2
 8003db8:	e7ba      	b.n	8003d30 <_printf_i+0x150>
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	1d1a      	adds	r2, r3, #4
 8003dbe:	602a      	str	r2, [r5, #0]
 8003dc0:	681d      	ldr	r5, [r3, #0]
 8003dc2:	6862      	ldr	r2, [r4, #4]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f7fc fa2a 	bl	8000220 <memchr>
 8003dcc:	b108      	cbz	r0, 8003dd2 <_printf_i+0x1f2>
 8003dce:	1b40      	subs	r0, r0, r5
 8003dd0:	6060      	str	r0, [r4, #4]
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ddc:	e7a8      	b.n	8003d30 <_printf_i+0x150>
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	462a      	mov	r2, r5
 8003de2:	4649      	mov	r1, r9
 8003de4:	4640      	mov	r0, r8
 8003de6:	47d0      	blx	sl
 8003de8:	3001      	adds	r0, #1
 8003dea:	d0ab      	beq.n	8003d44 <_printf_i+0x164>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	079b      	lsls	r3, r3, #30
 8003df0:	d413      	bmi.n	8003e1a <_printf_i+0x23a>
 8003df2:	68e0      	ldr	r0, [r4, #12]
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	4298      	cmp	r0, r3
 8003df8:	bfb8      	it	lt
 8003dfa:	4618      	movlt	r0, r3
 8003dfc:	e7a4      	b.n	8003d48 <_printf_i+0x168>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4632      	mov	r2, r6
 8003e02:	4649      	mov	r1, r9
 8003e04:	4640      	mov	r0, r8
 8003e06:	47d0      	blx	sl
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d09b      	beq.n	8003d44 <_printf_i+0x164>
 8003e0c:	3501      	adds	r5, #1
 8003e0e:	68e3      	ldr	r3, [r4, #12]
 8003e10:	9903      	ldr	r1, [sp, #12]
 8003e12:	1a5b      	subs	r3, r3, r1
 8003e14:	42ab      	cmp	r3, r5
 8003e16:	dcf2      	bgt.n	8003dfe <_printf_i+0x21e>
 8003e18:	e7eb      	b.n	8003df2 <_printf_i+0x212>
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	f104 0619 	add.w	r6, r4, #25
 8003e20:	e7f5      	b.n	8003e0e <_printf_i+0x22e>
 8003e22:	bf00      	nop
 8003e24:	08004156 	.word	0x08004156
 8003e28:	08004167 	.word	0x08004167

08003e2c <__retarget_lock_acquire_recursive>:
 8003e2c:	4770      	bx	lr

08003e2e <__retarget_lock_release_recursive>:
 8003e2e:	4770      	bx	lr

08003e30 <memcpy>:
 8003e30:	440a      	add	r2, r1
 8003e32:	4291      	cmp	r1, r2
 8003e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e38:	d100      	bne.n	8003e3c <memcpy+0xc>
 8003e3a:	4770      	bx	lr
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e46:	4291      	cmp	r1, r2
 8003e48:	d1f9      	bne.n	8003e3e <memcpy+0xe>
 8003e4a:	bd10      	pop	{r4, pc}

08003e4c <memmove>:
 8003e4c:	4288      	cmp	r0, r1
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	eb01 0402 	add.w	r4, r1, r2
 8003e54:	d902      	bls.n	8003e5c <memmove+0x10>
 8003e56:	4284      	cmp	r4, r0
 8003e58:	4623      	mov	r3, r4
 8003e5a:	d807      	bhi.n	8003e6c <memmove+0x20>
 8003e5c:	1e43      	subs	r3, r0, #1
 8003e5e:	42a1      	cmp	r1, r4
 8003e60:	d008      	beq.n	8003e74 <memmove+0x28>
 8003e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e6a:	e7f8      	b.n	8003e5e <memmove+0x12>
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4601      	mov	r1, r0
 8003e70:	428a      	cmp	r2, r1
 8003e72:	d100      	bne.n	8003e76 <memmove+0x2a>
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e7e:	e7f7      	b.n	8003e70 <memmove+0x24>

08003e80 <_realloc_r>:
 8003e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e84:	4680      	mov	r8, r0
 8003e86:	4614      	mov	r4, r2
 8003e88:	460e      	mov	r6, r1
 8003e8a:	b921      	cbnz	r1, 8003e96 <_realloc_r+0x16>
 8003e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	4611      	mov	r1, r2
 8003e92:	f7ff bb89 	b.w	80035a8 <_malloc_r>
 8003e96:	b92a      	cbnz	r2, 8003ea4 <_realloc_r+0x24>
 8003e98:	f7ff fb1a 	bl	80034d0 <_free_r>
 8003e9c:	4625      	mov	r5, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea4:	f000 f81b 	bl	8003ede <_malloc_usable_size_r>
 8003ea8:	4284      	cmp	r4, r0
 8003eaa:	4607      	mov	r7, r0
 8003eac:	d802      	bhi.n	8003eb4 <_realloc_r+0x34>
 8003eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003eb2:	d812      	bhi.n	8003eda <_realloc_r+0x5a>
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7ff fb76 	bl	80035a8 <_malloc_r>
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d0ed      	beq.n	8003e9e <_realloc_r+0x1e>
 8003ec2:	42bc      	cmp	r4, r7
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	bf28      	it	cs
 8003eca:	463a      	movcs	r2, r7
 8003ecc:	f7ff ffb0 	bl	8003e30 <memcpy>
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	f7ff fafc 	bl	80034d0 <_free_r>
 8003ed8:	e7e1      	b.n	8003e9e <_realloc_r+0x1e>
 8003eda:	4635      	mov	r5, r6
 8003edc:	e7df      	b.n	8003e9e <_realloc_r+0x1e>

08003ede <_malloc_usable_size_r>:
 8003ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee2:	1f18      	subs	r0, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bfbc      	itt	lt
 8003ee8:	580b      	ldrlt	r3, [r1, r0]
 8003eea:	18c0      	addlt	r0, r0, r3
 8003eec:	4770      	bx	lr
	...

08003ef0 <_init>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr

08003efc <_fini>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr
