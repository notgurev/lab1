
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f58  08005f58  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f60  08005f60  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08005f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          000001c8  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001302b  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b21  00000000  00000000  00033133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00035c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f60  00000000  00000000  00036cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024433  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159b1  00000000  00000000  0005c06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d99d5  00000000  00000000  00071a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b3f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048fc  00000000  00000000  0014b444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ca4 	.word	0x08005ca4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	08005ca4 	.word	0x08005ca4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Ringbuf_init+0x1c>)
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <Ringbuf_init+0x20>)
 800059c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Ringbuf_init+0x24>)
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <Ringbuf_init+0x28>)
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000188 	.word	0x20000188
 80005b4:	200000f8 	.word	0x200000f8
 80005b8:	2000018c 	.word	0x2000018c
 80005bc:	20000140 	.word	0x20000140

080005c0 <store_char>:



void store_char(unsigned char c, ring_buffer *buffer)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	3301      	adds	r3, #1
 80005d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d007      	beq.n	80005f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	79f9      	ldrb	r1, [r7, #7]
 80005ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <uart_write>:
}

/* writes a single character to the uart and increments head
 */
void uart_write(int c)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db21      	blt.n	8000652 <uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <uart_write+0x60>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	3301      	adds	r3, #1
 8000616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800061a:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800061c:	bf00      	nop
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <uart_write+0x60>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	429a      	cmp	r2, r3
 8000628:	d0f9      	beq.n	800061e <uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <uart_write+0x60>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <uart_write+0x60>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	b2c9      	uxtb	r1, r1
 8000638:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <uart_write+0x60>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE); // Enable UART transmission interrupt
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <uart_write+0x64>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68da      	ldr	r2, [r3, #12]
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <uart_write+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000650:	60da      	str	r2, [r3, #12]
	}
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000018c 	.word	0x2000018c
 8000664:	20000248 	.word	0x20000248

08000668 <uart_sendstring>:
}

/* sends the string to the uart
 */
void uart_sendstring (const char *s)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	while(*s) uart_write(*s++);
 8000670:	e006      	b.n	8000680 <uart_sendstring+0x18>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ffc0 	bl	8000600 <uart_write>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f4      	bne.n	8000672 <uart_sendstring+0xa>
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <uart_isr>:


void uart_isr (UART_HandleTypeDef *huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d013      	beq.n	80006de <uart_isr+0x4a>
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00e      	beq.n	80006de <uart_isr+0x4a>
    	    	      * @note   RXNE flag can be also cleared by a read to the USART_DR register.
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.
    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <uart_isr+0xac>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff72 	bl	80005c0 <store_char>
        return;
 80006dc:	e02c      	b.n	8000738 <uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d027      	beq.n	8000738 <uart_isr+0xa4>
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d022      	beq.n	8000738 <uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <uart_isr+0xb0>)
 80006f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <uart_isr+0xb0>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d108      	bne.n	8000710 <uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800070c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800070e:	e012      	b.n	8000736 <uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <uart_isr+0xb0>)
 8000712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <uart_isr+0xb0>)
 8000716:	5cd3      	ldrb	r3, [r2, r3]
 8000718:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <uart_isr+0xb0>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	3301      	adds	r3, #1
 8000720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <uart_isr+0xb0>)
 8000726:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	7bba      	ldrb	r2, [r7, #14]
 8000734:	605a      	str	r2, [r3, #4]
    	return;
 8000736:	bf00      	nop
    }
}
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000188 	.word	0x20000188
 8000744:	20000140 	.word	0x20000140

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xc4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a29      	ldr	r2, [pc, #164]	; (800080c <MX_GPIO_Init+0xc4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0xc4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xc4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <MX_GPIO_Init+0xc4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xc4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xc4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <MX_GPIO_Init+0xc4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0xc4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0xc4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <MX_GPIO_Init+0xc4>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_GPIO_Init+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xc8>)
 8000800:	f001 f8e0 	bl	80019c4 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800

08000814 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_I2C1_Init+0x74>)
 8000832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_I2C1_Init+0x74>)
 8000852:	f001 fa7b 	bl	8001d4c <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 fc20 	bl	80010a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_I2C1_Init+0x74>)
 8000864:	f002 fa31 	bl	8002cca <HAL_I2CEx_ConfigAnalogFilter>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800086e:	f000 fc17 	bl	80010a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C1_Init+0x74>)
 8000876:	f002 fa64 	bl	8002d42 <HAL_I2CEx_ConfigDigitalFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 fc0e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000190 	.word	0x20000190
 800088c:	40005400 	.word	0x40005400
 8000890:	00061a80 	.word	0x00061a80

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12c      	bne.n	8000910 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d8:	2312      	movs	r3, #18
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e4:	2304      	movs	r3, #4
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_I2C_MspInit+0x8c>)
 80008f0:	f001 f868 	bl	80019c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_I2C_MspInit+0x88>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40005400 	.word	0x40005400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400

08000924 <set_pin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void set_pin(int led, int brightness){
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	disable_all_pins();
 800092e:	f000 f831 	bl	8000994 <disable_all_pins>

	switch (led) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d01d      	beq.n	8000974 <set_pin+0x50>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b02      	cmp	r3, #2
 800093c:	dc24      	bgt.n	8000988 <set_pin+0x64>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <set_pin+0x28>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d00a      	beq.n	8000960 <set_pin+0x3c>
			break;
		case 2 :
			htim4.Instance->CCR4 = 10 * brightness;
			break;
	}
}
 800094a:	e01d      	b.n	8000988 <set_pin+0x64>
			htim4.Instance->CCR2 = 10 * brightness;
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	461a      	mov	r2, r3
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <set_pin+0x6c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800095e:	e013      	b.n	8000988 <set_pin+0x64>
			htim4.Instance->CCR3 = 10 * brightness;
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	461a      	mov	r2, r3
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <set_pin+0x6c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000972:	e009      	b.n	8000988 <set_pin+0x64>
			htim4.Instance->CCR4 = 10 * brightness;
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	461a      	mov	r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <set_pin+0x6c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000986:	bf00      	nop
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000200 	.word	0x20000200

08000994 <disable_all_pins>:

void disable_all_pins() {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	htim4.Instance->CCR2 = 0;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <disable_all_pins+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2200      	movs	r2, #0
 800099e:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 0;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <disable_all_pins+0x28>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 0;
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <disable_all_pins+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000200 	.word	0x20000200

080009c0 <print>:

void print(const char * content) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	uart_sendstring(content);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fe4d 	bl	8000668 <uart_sendstring>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <print_number>:

void print_number(const int content) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	char str_index[3];
	sprintf(str_index, "%i", content);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4906      	ldr	r1, [pc, #24]	; (8000a00 <print_number+0x28>)
 80009e8:	4618      	mov	r0, r3
 80009ea:	f004 fd51 	bl	8005490 <siprintf>
	print(str_index);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffe4 	bl	80009c0 <print>
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08005cbc 	.word	0x08005cbc

08000a04 <print_mode_description>:

void print_mode_description(struct Mode mode, int index, bool is_editing_mode){
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	f107 0408 	add.w	r4, r7, #8
 8000a0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	70fb      	strb	r3, [r7, #3]
	if (is_editing_mode) print("Editing mode ");
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <print_mode_description+0x20>
 8000a1c:	4817      	ldr	r0, [pc, #92]	; (8000a7c <print_mode_description+0x78>)
 8000a1e:	f7ff ffcf 	bl	80009c0 <print>
 8000a22:	e002      	b.n	8000a2a <print_mode_description+0x26>
	else print("Mode ");
 8000a24:	4816      	ldr	r0, [pc, #88]	; (8000a80 <print_mode_description+0x7c>)
 8000a26:	f7ff ffcb 	bl	80009c0 <print>
	print_number(index + 1);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffd2 	bl	80009d8 <print_number>
	print(": ");
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <print_mode_description+0x80>)
 8000a36:	f7ff ffc3 	bl	80009c0 <print>
	switch (mode.led) {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d00e      	beq.n	8000a5e <print_mode_description+0x5a>
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	dc10      	bgt.n	8000a66 <print_mode_description+0x62>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <print_mode_description+0x4a>
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d004      	beq.n	8000a56 <print_mode_description+0x52>
 8000a4c:	e00b      	b.n	8000a66 <print_mode_description+0x62>
		case 0 : print("green, "); break;
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <print_mode_description+0x84>)
 8000a50:	f7ff ffb6 	bl	80009c0 <print>
 8000a54:	e007      	b.n	8000a66 <print_mode_description+0x62>
		case 1 : print("yellow, "); break;
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <print_mode_description+0x88>)
 8000a58:	f7ff ffb2 	bl	80009c0 <print>
 8000a5c:	e003      	b.n	8000a66 <print_mode_description+0x62>
		case 2 : print("red, "); break;
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <print_mode_description+0x8c>)
 8000a60:	f7ff ffae 	bl	80009c0 <print>
 8000a64:	bf00      	nop
	}
	print_number(mode.brightness);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffb5 	bl	80009d8 <print_number>
	print("% brightness\n\r");
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <print_mode_description+0x90>)
 8000a70:	f7ff ffa6 	bl	80009c0 <print>
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	08005cc0 	.word	0x08005cc0
 8000a80:	08005cd0 	.word	0x08005cd0
 8000a84:	08005cd8 	.word	0x08005cd8
 8000a88:	08005cdc 	.word	0x08005cdc
 8000a8c:	08005ce4 	.word	0x08005ce4
 8000a90:	08005cf0 	.word	0x08005cf0
 8000a94:	08005cf8 	.word	0x08005cf8

08000a98 <get_peressed_btn_index>:

int get_peressed_btn_index(){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af04      	add	r7, sp, #16
	const uint32_t t = HAL_GetTick();
 8000a9e:	f000 fdbd 	bl	800161c <HAL_GetTick>
 8000aa2:	6078      	str	r0, [r7, #4]

	if (t - last_pressing_time < KB_KEY_DEBOUNCE_TIME) {
 8000aa4:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <get_peressed_btn_index+0x10c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b63      	cmp	r3, #99	; 0x63
 8000aae:	d802      	bhi.n	8000ab6 <get_peressed_btn_index+0x1e>
		return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	e072      	b.n	8000b9c <get_peressed_btn_index+0x104>
	}

	int index = -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	60fb      	str	r3, [r7, #12]

	uint8_t reg_buffer = ~0;
 8000abc:	23ff      	movs	r3, #255	; 0xff
 8000abe:	70fb      	strb	r3, [r7, #3]

	// Clear register by writing zeroes
	uint8_t tmp = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, KB_I2C_WRITE_ADDRESS, KB_OUTPUT_REG, 1, &tmp, 1, KB_KEY_DEBOUNCE_TIME);
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	1cbb      	adds	r3, r7, #2
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	21e2      	movs	r1, #226	; 0xe2
 8000ad6:	4834      	ldr	r0, [pc, #208]	; (8000ba8 <get_peressed_btn_index+0x110>)
 8000ad8:	f001 fa7c 	bl	8001fd4 <HAL_I2C_Mem_Write>

	for (int row = 0; row < 4; row++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	e046      	b.n	8000b70 <get_peressed_btn_index+0xd8>
		uint8_t buf = ~((uint8_t) (1 << row));
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	707b      	strb	r3, [r7, #1]

		HAL_I2C_Mem_Write(&hi2c1, KB_I2C_WRITE_ADDRESS, KB_CONFIG_REG, 1, &buf, 1, KB_KEY_DEBOUNCE_TIME);
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	2301      	movs	r3, #1
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	1c7b      	adds	r3, r7, #1
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	21e2      	movs	r1, #226	; 0xe2
 8000b04:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <get_peressed_btn_index+0x110>)
 8000b06:	f001 fa65 	bl	8001fd4 <HAL_I2C_Mem_Write>

		HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 fd92 	bl	8001634 <HAL_Delay>

		HAL_I2C_Mem_Read(&hi2c1, KB_I2C_READ_ADDRESS, KB_INPUT_REG, 1, &reg_buffer, 1, KB_KEY_DEBOUNCE_TIME);
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	2301      	movs	r3, #1
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	1cfb      	adds	r3, r7, #3
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	21e3      	movs	r1, #227	; 0xe3
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <get_peressed_btn_index+0x110>)
 8000b24:	f001 fb50 	bl	80021c8 <HAL_I2C_Mem_Read>

		switch(reg_buffer >> 4) {
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d006      	beq.n	8000b40 <get_peressed_btn_index+0xa8>
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	dc19      	bgt.n	8000b6a <get_peressed_btn_index+0xd2>
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d010      	beq.n	8000b5c <get_peressed_btn_index+0xc4>
 8000b3a:	2b05      	cmp	r3, #5
 8000b3c:	d007      	beq.n	8000b4e <get_peressed_btn_index+0xb6>
 8000b3e:	e014      	b.n	8000b6a <get_peressed_btn_index+0xd2>
			case 6: index = row * 3 + 1; break;
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e00d      	b.n	8000b6a <get_peressed_btn_index+0xd2>
			case 5: index = row * 3 + 2; break;
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	3302      	adds	r3, #2
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e006      	b.n	8000b6a <get_peressed_btn_index+0xd2>
			case 3: index = row * 3 + 3; break;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	bf00      	nop
	for (int row = 0; row < 4; row++) {
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	ddb5      	ble.n	8000ae2 <get_peressed_btn_index+0x4a>
		}
	}

	if (index != -1) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d002      	beq.n	8000b84 <get_peressed_btn_index+0xec>
		last_pressing_time = t;
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <get_peressed_btn_index+0x10c>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6013      	str	r3, [r2, #0]
	}

	if (index == last_peressed_btn_index) {
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <get_peressed_btn_index+0x114>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d102      	bne.n	8000b94 <get_peressed_btn_index+0xfc>
		return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e003      	b.n	8000b9c <get_peressed_btn_index+0x104>
	}

	last_peressed_btn_index = index;
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <get_peressed_btn_index+0x114>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6013      	str	r3, [r2, #0]

	return index;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001f4 	.word	0x200001f4
 8000ba8:	20000190 	.word	0x20000190
 8000bac:	20000048 	.word	0x20000048

08000bb0 <key2char>:

char key2char(const int key){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    return is_digit_input_mode ? digits[key - 1] : chars[key - 1];
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <key2char+0x30>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <key2char+0x1a>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <key2char+0x34>)
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	e003      	b.n	8000bd2 <key2char+0x22>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <key2char+0x38>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000004c 	.word	0x2000004c
 8000be4:	20000050 	.word	0x20000050
 8000be8:	2000005c 	.word	0x2000005c

08000bec <print_char_value>:

void print_char_value(const char * array, int i) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	if (array[i] == 'q'){
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b71      	cmp	r3, #113	; 0x71
 8000c00:	d103      	bne.n	8000c0a <print_char_value+0x1e>
		print("change keyboard layout");
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <print_char_value+0x5c>)
 8000c04:	f7ff fedc 	bl	80009c0 <print>
		return;
 8000c08:	e01b      	b.n	8000c42 <print_char_value+0x56>
	}

	if (array[i] == '\r'){
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b0d      	cmp	r3, #13
 8000c14:	d103      	bne.n	8000c1e <print_char_value+0x32>
		print("enter");
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <print_char_value+0x60>)
 8000c18:	f7ff fed2 	bl	80009c0 <print>
		return;
 8000c1c:	e011      	b.n	8000c42 <print_char_value+0x56>
	}

	if (array[i] != '!'){
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b21      	cmp	r3, #33	; 0x21
 8000c28:	d00b      	beq.n	8000c42 <print_char_value+0x56>
		char s[2];
		s[0] = array[i];
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	733b      	strb	r3, [r7, #12]
		s[1] = '\0';
 8000c34:	2300      	movs	r3, #0
 8000c36:	737b      	strb	r3, [r7, #13]
		print(s);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff febf 	bl	80009c0 <print>
	}
}
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08005d08 	.word	0x08005d08
 8000c4c:	08005d20 	.word	0x08005d20

08000c50 <print_key_value>:

void print_key_value(int i) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	print("Digit mode: ");
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <print_key_value+0x34>)
 8000c5a:	f7ff feb1 	bl	80009c0 <print>
	print_char_value(digits, i);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <print_key_value+0x38>)
 8000c62:	f7ff ffc3 	bl	8000bec <print_char_value>
	print(", Char mode: ");
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <print_key_value+0x3c>)
 8000c68:	f7ff feaa 	bl	80009c0 <print>
	print_char_value(chars, i);
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <print_key_value+0x40>)
 8000c70:	f7ff ffbc 	bl	8000bec <print_char_value>
	print("\r\n");
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <print_key_value+0x44>)
 8000c76:	f7ff fea3 	bl	80009c0 <print>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08005d28 	.word	0x08005d28
 8000c88:	20000050 	.word	0x20000050
 8000c8c:	08005d38 	.word	0x08005d38
 8000c90:	2000005c 	.word	0x2000005c
 8000c94:	08005d48 	.word	0x08005d48

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fc57 	bl	8001550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f98d 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca6:	f7ff fd4f 	bl	8000748 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000caa:	f000 fb9b 	bl	80013e4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8000cae:	f000 faad 	bl	800120c <MX_TIM4_Init>
  MX_I2C1_Init();
 8000cb2:	f7ff fdaf 	bl	8000814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init ();
 8000cb6:	f7ff fc6d 	bl	8000594 <Ringbuf_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000cba:	2104      	movs	r1, #4
 8000cbc:	4898      	ldr	r0, [pc, #608]	; (8000f20 <main+0x288>)
 8000cbe:	f002 fdcf 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4896      	ldr	r0, [pc, #600]	; (8000f20 <main+0x288>)
 8000cc6:	f002 fdcb 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000cca:	210c      	movs	r1, #12
 8000ccc:	4894      	ldr	r0, [pc, #592]	; (8000f20 <main+0x288>)
 8000cce:	f002 fdc7 	bl	8003860 <HAL_TIM_PWM_Start>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000cd2:	4b94      	ldr	r3, [pc, #592]	; (8000f24 <main+0x28c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	4b92      	ldr	r3, [pc, #584]	; (8000f24 <main+0x28c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ce0:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000ce2:	4b90      	ldr	r3, [pc, #576]	; (8000f24 <main+0x28c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	4b8e      	ldr	r3, [pc, #568]	; (8000f24 <main+0x28c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0220 	orr.w	r2, r2, #32
 8000cf0:	60da      	str	r2, [r3, #12]

  disable_all_pins();
 8000cf2:	f7ff fe4f 	bl	8000994 <disable_all_pins>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bool btn_state = is_btn_press();
 8000cf6:	f000 fbef 	bl	80014d8 <is_btn_press>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	75bb      	strb	r3, [r7, #22]
	  if (last_btn_state && !btn_state){
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <main+0x290>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d01f      	beq.n	8000d46 <main+0xae>
 8000d06:	7dbb      	ldrb	r3, [r7, #22]
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d019      	beq.n	8000d46 <main+0xae>
		  is_test_keyboard_mode = !is_test_keyboard_mode;
 8000d12:	4b86      	ldr	r3, [pc, #536]	; (8000f2c <main+0x294>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f083 0301 	eor.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <main+0x294>)
 8000d2e:	701a      	strb	r2, [r3, #0]
		  if (is_test_keyboard_mode) print("Test keyboard mode is on\n\r");
 8000d30:	4b7e      	ldr	r3, [pc, #504]	; (8000f2c <main+0x294>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <main+0xa8>
 8000d38:	487d      	ldr	r0, [pc, #500]	; (8000f30 <main+0x298>)
 8000d3a:	f7ff fe41 	bl	80009c0 <print>
 8000d3e:	e002      	b.n	8000d46 <main+0xae>
		  else print("Test keyboard mode is off\n\r");
 8000d40:	487c      	ldr	r0, [pc, #496]	; (8000f34 <main+0x29c>)
 8000d42:	f7ff fe3d 	bl	80009c0 <print>
	  }
	  last_btn_state = btn_state;
 8000d46:	4a78      	ldr	r2, [pc, #480]	; (8000f28 <main+0x290>)
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	7013      	strb	r3, [r2, #0]

	  int btn_index = get_peressed_btn_index();
 8000d4c:	f7ff fea4 	bl	8000a98 <get_peressed_btn_index>
 8000d50:	6138      	str	r0, [r7, #16]
	  if (btn_index != -1) {
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d0cd      	beq.n	8000cf6 <main+0x5e>
		char received_char = key2char(btn_index);
 8000d5a:	6938      	ldr	r0, [r7, #16]
 8000d5c:	f7ff ff28 	bl	8000bb0 <key2char>
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
		if (is_test_keyboard_mode) {
 8000d64:	4b71      	ldr	r3, [pc, #452]	; (8000f2c <main+0x294>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <main+0xe0>
			print_key_value(btn_index - 1);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff6d 	bl	8000c50 <print_key_value>
 8000d76:	e7be      	b.n	8000cf6 <main+0x5e>
		} else if (is_setting_mode) {
 8000d78:	4b6f      	ldr	r3, [pc, #444]	; (8000f38 <main+0x2a0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80c5 	beq.w	8000f0c <main+0x274>
			if (received_char == '\r') {
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b0d      	cmp	r3, #13
 8000d86:	d125      	bne.n	8000dd4 <main+0x13c>
				is_setting_mode = false;
 8000d88:	4b6b      	ldr	r3, [pc, #428]	; (8000f38 <main+0x2a0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
				MODES[input_index].led = buffer_mode.led;
 8000d8e:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <main+0x2a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a6b      	ldr	r2, [pc, #428]	; (8000f40 <main+0x2a8>)
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	496b      	ldr	r1, [pc, #428]	; (8000f44 <main+0x2ac>)
 8000d98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				MODES[input_index].brightness = buffer_mode.brightness;
 8000d9c:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <main+0x2a4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <main+0x2a8>)
 8000da2:	6852      	ldr	r2, [r2, #4]
 8000da4:	4967      	ldr	r1, [pc, #412]	; (8000f44 <main+0x2ac>)
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	440b      	add	r3, r1
 8000daa:	605a      	str	r2, [r3, #4]
				print("Mode is saved\n\r");
 8000dac:	4866      	ldr	r0, [pc, #408]	; (8000f48 <main+0x2b0>)
 8000dae:	f7ff fe07 	bl	80009c0 <print>
				print("Setting mode is off\n\r");
 8000db2:	4866      	ldr	r0, [pc, #408]	; (8000f4c <main+0x2b4>)
 8000db4:	f7ff fe04 	bl	80009c0 <print>
				if (!is_digit_input_mode) {
 8000db8:	4b65      	ldr	r3, [pc, #404]	; (8000f50 <main+0x2b8>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f083 0301 	eor.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d097      	beq.n	8000cf6 <main+0x5e>
					is_digit_input_mode = true;
 8000dc6:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <main+0x2b8>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
					print("Digit input mode is on\n\r");
 8000dcc:	4861      	ldr	r0, [pc, #388]	; (8000f54 <main+0x2bc>)
 8000dce:	f7ff fdf7 	bl	80009c0 <print>
 8000dd2:	e790      	b.n	8000cf6 <main+0x5e>
				}
			} else {
				bool changed = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	75fb      	strb	r3, [r7, #23]
				int i = atoi(&received_char) - 1;
 8000dd8:	1dfb      	adds	r3, r7, #7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 fa32 	bl	8005244 <atoi>
 8000de0:	4603      	mov	r3, r0
 8000de2:	3b01      	subs	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
				if (i >= 0) {
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db12      	blt.n	8000e12 <main+0x17a>
					input_index = i;
 8000dec:	4a53      	ldr	r2, [pc, #332]	; (8000f3c <main+0x2a4>)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	6013      	str	r3, [r2, #0]
					buffer_mode.led = MODES[input_index].led;
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <main+0x2a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a53      	ldr	r2, [pc, #332]	; (8000f44 <main+0x2ac>)
 8000df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dfc:	4a50      	ldr	r2, [pc, #320]	; (8000f40 <main+0x2a8>)
 8000dfe:	6013      	str	r3, [r2, #0]
					buffer_mode.brightness = MODES[input_index].brightness;
 8000e00:	4b4e      	ldr	r3, [pc, #312]	; (8000f3c <main+0x2a4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <main+0x2ac>)
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <main+0x2a8>)
 8000e0e:	6053      	str	r3, [r2, #4]
 8000e10:	e070      	b.n	8000ef4 <main+0x25c>
				} else switch (received_char) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b71      	cmp	r3, #113	; 0x71
 8000e16:	dc6a      	bgt.n	8000eee <main+0x256>
 8000e18:	2b61      	cmp	r3, #97	; 0x61
 8000e1a:	da04      	bge.n	8000e26 <main+0x18e>
 8000e1c:	2b2b      	cmp	r3, #43	; 0x2b
 8000e1e:	d05d      	beq.n	8000edc <main+0x244>
 8000e20:	2b2d      	cmp	r3, #45	; 0x2d
 8000e22:	d052      	beq.n	8000eca <main+0x232>
 8000e24:	e063      	b.n	8000eee <main+0x256>
 8000e26:	3b61      	subs	r3, #97	; 0x61
 8000e28:	2b10      	cmp	r3, #16
 8000e2a:	d860      	bhi.n	8000eee <main+0x256>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <main+0x19c>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e79 	.word	0x08000e79
 8000e38:	08000e81 	.word	0x08000e81
 8000e3c:	08000e89 	.word	0x08000e89
 8000e40:	08000eef 	.word	0x08000eef
 8000e44:	08000eef 	.word	0x08000eef
 8000e48:	08000eef 	.word	0x08000eef
 8000e4c:	08000eef 	.word	0x08000eef
 8000e50:	08000eef 	.word	0x08000eef
 8000e54:	08000eef 	.word	0x08000eef
 8000e58:	08000eef 	.word	0x08000eef
 8000e5c:	08000eef 	.word	0x08000eef
 8000e60:	08000eef 	.word	0x08000eef
 8000e64:	08000eef 	.word	0x08000eef
 8000e68:	08000eef 	.word	0x08000eef
 8000e6c:	08000eef 	.word	0x08000eef
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000e91 	.word	0x08000e91
					case 'a' :
						buffer_mode.led = LED_GREEN;
 8000e78:	4b31      	ldr	r3, [pc, #196]	; (8000f40 <main+0x2a8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
						break;
 8000e7e:	e039      	b.n	8000ef4 <main+0x25c>
					case 'b' :
						buffer_mode.led = LED_YELLOW;
 8000e80:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <main+0x2a8>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
						break;
 8000e86:	e035      	b.n	8000ef4 <main+0x25c>
					case 'c' :
						buffer_mode.led = LED_RED;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <main+0x2a8>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	601a      	str	r2, [r3, #0]
						break;
 8000e8e:	e031      	b.n	8000ef4 <main+0x25c>
					case 'q' :
						changed = false;
 8000e90:	2300      	movs	r3, #0
 8000e92:	75fb      	strb	r3, [r7, #23]
						is_digit_input_mode = !is_digit_input_mode;
 8000e94:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <main+0x2b8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f083 0301 	eor.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <main+0x2b8>)
 8000eb0:	701a      	strb	r2, [r3, #0]
						if (is_digit_input_mode) print("Digit input mode is on\n\r");
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <main+0x2b8>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <main+0x22a>
 8000eba:	4826      	ldr	r0, [pc, #152]	; (8000f54 <main+0x2bc>)
 8000ebc:	f7ff fd80 	bl	80009c0 <print>
						else print("Char input mode is on\n\r");
						break;
 8000ec0:	e018      	b.n	8000ef4 <main+0x25c>
						else print("Char input mode is on\n\r");
 8000ec2:	4825      	ldr	r0, [pc, #148]	; (8000f58 <main+0x2c0>)
 8000ec4:	f7ff fd7c 	bl	80009c0 <print>
						break;
 8000ec8:	e014      	b.n	8000ef4 <main+0x25c>
					case '-' :
						buffer_mode.brightness = buffer_mode.brightness >= 10 ? buffer_mode.brightness - 10 : 0;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <main+0x2a8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b0a      	cmp	r3, #10
 8000ed0:	bfb8      	it	lt
 8000ed2:	230a      	movlt	r3, #10
 8000ed4:	3b0a      	subs	r3, #10
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <main+0x2a8>)
 8000ed8:	6053      	str	r3, [r2, #4]
						break;
 8000eda:	e00b      	b.n	8000ef4 <main+0x25c>
					case '+' :
						buffer_mode.brightness = buffer_mode.brightness <= 90 ? buffer_mode.brightness + 10 : 100;
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <main+0x2a8>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b5a      	cmp	r3, #90	; 0x5a
 8000ee2:	bfa8      	it	ge
 8000ee4:	235a      	movge	r3, #90	; 0x5a
 8000ee6:	330a      	adds	r3, #10
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <main+0x2a8>)
 8000eea:	6053      	str	r3, [r2, #4]
						break;
 8000eec:	e002      	b.n	8000ef4 <main+0x25c>
					default:
						changed = false;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	75fb      	strb	r3, [r7, #23]
						break;
 8000ef2:	bf00      	nop
				}
				if (changed) print_mode_description(buffer_mode, input_index, true);
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f43f aefd 	beq.w	8000cf6 <main+0x5e>
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <main+0x2a4>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	490f      	ldr	r1, [pc, #60]	; (8000f40 <main+0x2a8>)
 8000f02:	2301      	movs	r3, #1
 8000f04:	c903      	ldmia	r1, {r0, r1}
 8000f06:	f7ff fd7d 	bl	8000a04 <print_mode_description>
 8000f0a:	e6f4      	b.n	8000cf6 <main+0x5e>
			}
		} else {
			if (received_char == '\r') {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b0d      	cmp	r3, #13
 8000f10:	d126      	bne.n	8000f60 <main+0x2c8>
				is_setting_mode = true;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <main+0x2a0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
				print("Setting mode is on\n\r");
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <main+0x2c4>)
 8000f1a:	f7ff fd51 	bl	80009c0 <print>
 8000f1e:	e6ea      	b.n	8000cf6 <main+0x5e>
 8000f20:	20000200 	.word	0x20000200
 8000f24:	20000248 	.word	0x20000248
 8000f28:	200001f9 	.word	0x200001f9
 8000f2c:	200001f8 	.word	0x200001f8
 8000f30:	08005d4c 	.word	0x08005d4c
 8000f34:	08005d68 	.word	0x08005d68
 8000f38:	200001f0 	.word	0x200001f0
 8000f3c:	200001ec 	.word	0x200001ec
 8000f40:	200001e4 	.word	0x200001e4
 8000f44:	20000000 	.word	0x20000000
 8000f48:	08005d84 	.word	0x08005d84
 8000f4c:	08005d94 	.word	0x08005d94
 8000f50:	2000004c 	.word	0x2000004c
 8000f54:	08005dac 	.word	0x08005dac
 8000f58:	08005dc8 	.word	0x08005dc8
 8000f5c:	08005de0 	.word	0x08005de0
			} else {
				int mode_index = atoi(&received_char) - 1;
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 f96e 	bl	8005244 <atoi>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
				if (received_char != 'q') {
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b71      	cmp	r3, #113	; 0x71
 8000f72:	f43f aec0 	beq.w	8000cf6 <main+0x5e>
					if (mode_index != -1) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d016      	beq.n	8000fac <main+0x314>
						set_pin(MODES[mode_index].led, MODES[mode_index].brightness);
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <main+0x320>)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <main+0x320>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f7ff fcc6 	bl	8000924 <set_pin>
						print_mode_description(MODES[mode_index], mode_index, false);
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <main+0x320>)
 8000f9a:	68f9      	ldr	r1, [r7, #12]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	00c9      	lsls	r1, r1, #3
 8000fa2:	4401      	add	r1, r0
 8000fa4:	c903      	ldmia	r1, {r0, r1}
 8000fa6:	f7ff fd2d 	bl	8000a04 <print_mode_description>
 8000faa:	e6a4      	b.n	8000cf6 <main+0x5e>
					} else {
						disable_all_pins();
 8000fac:	f7ff fcf2 	bl	8000994 <disable_all_pins>
						print("Every pin is off\n\r");
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <main+0x324>)
 8000fb2:	f7ff fd05 	bl	80009c0 <print>
  {
 8000fb6:	e69e      	b.n	8000cf6 <main+0x5e>
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	08005df8 	.word	0x08005df8

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 f966 	bl	80052a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <SystemClock_Config+0xd8>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <SystemClock_Config+0xd8>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <SystemClock_Config+0xd8>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xdc>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <SystemClock_Config+0xdc>)
 800100a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <SystemClock_Config+0xdc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001030:	230f      	movs	r3, #15
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001034:	23d8      	movs	r3, #216	; 0xd8
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4618      	mov	r0, r3
 8001046:	f001 ff0b 	bl	8002e60 <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001050:	f000 f826 	bl	80010a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001054:	f001 feb4 	bl	8002dc0 <HAL_PWREx_EnableOverDrive>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800105e:	f000 f81f 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2105      	movs	r1, #5
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f965 	bl	8003350 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800108c:	f000 f808 	bl	80010a0 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x4>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_MspInit+0x4c>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SysTick_Handler+0x20>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <SysTick_Handler+0x18>
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Handler+0x20>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <SysTick_Handler+0x20>)
 8001156:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 fa4c 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000f4 	.word	0x200000f4

08001164 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_isr (&huart6);
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <USART6_IRQHandler+0x14>)
 800116a:	f7ff fa93 	bl	8000694 <uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800116e:	4802      	ldr	r0, [pc, #8]	; (8001178 <USART6_IRQHandler+0x14>)
 8001170:	f003 f9a2 	bl	80044b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000248 	.word	0x20000248

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f004 f84e 	bl	800524c <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20030000 	.word	0x20030000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200001fc 	.word	0x200001fc
 80011e4:	200002a0 	.word	0x200002a0

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <MX_TIM4_Init+0x118>)
 800123e:	4a3a      	ldr	r2, [pc, #232]	; (8001328 <MX_TIM4_Init+0x11c>)
 8001240:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <MX_TIM4_Init+0x118>)
 8001244:	2259      	movs	r2, #89	; 0x59
 8001246:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b36      	ldr	r3, [pc, #216]	; (8001324 <MX_TIM4_Init+0x118>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <MX_TIM4_Init+0x118>)
 8001250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001254:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <MX_TIM4_Init+0x118>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <MX_TIM4_Init+0x118>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001262:	4830      	ldr	r0, [pc, #192]	; (8001324 <MX_TIM4_Init+0x118>)
 8001264:	f002 fa54 	bl	8003710 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800126e:	f7ff ff17 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127c:	4619      	mov	r1, r3
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <MX_TIM4_Init+0x118>)
 8001280:	f002 fc78 	bl	8003b74 <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800128a:	f7ff ff09 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <MX_TIM4_Init+0x118>)
 8001290:	f002 fa8d 	bl	80037ae <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800129a:	f7ff ff01 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	4619      	mov	r1, r3
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <MX_TIM4_Init+0x118>)
 80012ae:	f003 f839 	bl	8004324 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012b8:	f7ff fef2 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	2360      	movs	r3, #96	; 0x60
 80012be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80012c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2204      	movs	r2, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_TIM4_Init+0x118>)
 80012d6:	f002 fb8b 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012e0:	f7ff fede 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_TIM4_Init+0x118>)
 80012ec:	f002 fb80 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80012f6:	f7ff fed3 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	220c      	movs	r2, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM4_Init+0x118>)
 8001306:	f002 fb73 	bl	80039f0 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8001310:	f7ff fec6 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM4_Init+0x118>)
 8001316:	f000 f82b 	bl	8001370 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000200 	.word	0x20000200
 8001328:	40000800 	.word	0x40000800

0800132c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10d      	bne.n	800135a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_Base_MspInit+0x40>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_TIM_Base_MspInit+0x40>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_TIM_Base_MspInit+0x40>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40000800 	.word	0x40000800
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_TIM_MspPostInit+0x68>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11e      	bne.n	80013d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_TIM_MspPostInit+0x70>)
 80013cc:	f000 fafa 	bl	80019c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40000800 	.word	0x40000800
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020c00 	.word	0x40020c00

080013e4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART6_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART6_UART_Init+0x4c>)
 800141c:	f002 fffe 	bl	800441c <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f7ff fe3b 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000248 	.word	0x20000248
 8001434:	40011400 	.word	0x40011400

08001438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_UART_MspInit+0x94>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d133      	bne.n	80014c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_UART_MspInit+0x98>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_UART_MspInit+0x98>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001492:	23c0      	movs	r3, #192	; 0xc0
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014a2:	2308      	movs	r3, #8
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_UART_MspInit+0x9c>)
 80014ae:	f000 fa89 	bl	80019c4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2047      	movs	r0, #71	; 0x47
 80014b8:	f000 f9bb 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014bc:	2047      	movs	r0, #71	; 0x47
 80014be:	f000 f9d4 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020800 	.word	0x40020800

080014d8 <is_btn_press>:
#include <stdbool.h>
#include "gpio.h"

bool is_btn_press() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	 return HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15) == 0;
 80014dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <is_btn_press+0x20>)
 80014e2:	f000 fc1b 	bl	8001d1c <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 }
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40020800 	.word	0x40020800

080014fc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001502:	490e      	ldr	r1, [pc, #56]	; (800153c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001518:	4c0b      	ldr	r4, [pc, #44]	; (8001548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001526:	f7ff fe5f 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152a:	f003 fe95 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fbb3 	bl	8000c98 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001540:	08005f68 	.word	0x08005f68
  ldr r2, =_sbss
 8001544:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001548:	200002a0 	.word	0x200002a0

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f94f 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fd90 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f967 	bl	8001886 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f92f 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000068 	.word	0x20000068
 80015ec:	20000070 	.word	0x20000070
 80015f0:	2000006c 	.word	0x2000006c

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000070 	.word	0x20000070
 8001618:	2000028c 	.word	0x2000028c

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000028c 	.word	0x2000028c

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff ffee 	bl	800161c <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffde 	bl	800161c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000070 	.word	0x20000070

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff feb6 	bl	800161c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d008      	beq.n	80018d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e052      	b.n	8001976 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0216 	bic.w	r2, r2, #22
 80018de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <HAL_DMA_Abort+0x62>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0208 	bic.w	r2, r2, #8
 800190e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001920:	e013      	b.n	800194a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001922:	f7ff fe7b 	bl	800161c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b05      	cmp	r3, #5
 800192e:	d90c      	bls.n	800194a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2220      	movs	r2, #32
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e015      	b.n	8001976 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e4      	bne.n	8001922 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	223f      	movs	r2, #63	; 0x3f
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d004      	beq.n	800199c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e00c      	b.n	80019b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2205      	movs	r2, #5
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e177      	b.n	8001cd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8166 	bne.w	8001cca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d005      	beq.n	8001a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d130      	bne.n	8001a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d017      	beq.n	8001ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80c0 	beq.w	8001cca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_GPIO_Init+0x324>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b66:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_GPIO_Init+0x328>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_GPIO_Init+0x32c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d037      	beq.n	8001c02 <HAL_GPIO_Init+0x23e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <HAL_GPIO_Init+0x330>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_GPIO_Init+0x23a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x334>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02b      	beq.n	8001bfa <HAL_GPIO_Init+0x236>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <HAL_GPIO_Init+0x338>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d025      	beq.n	8001bf6 <HAL_GPIO_Init+0x232>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a54      	ldr	r2, [pc, #336]	; (8001d00 <HAL_GPIO_Init+0x33c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01f      	beq.n	8001bf2 <HAL_GPIO_Init+0x22e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <HAL_GPIO_Init+0x340>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d019      	beq.n	8001bee <HAL_GPIO_Init+0x22a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_GPIO_Init+0x344>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0x226>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_GPIO_Init+0x348>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00d      	beq.n	8001be6 <HAL_GPIO_Init+0x222>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a50      	ldr	r2, [pc, #320]	; (8001d10 <HAL_GPIO_Init+0x34c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_GPIO_Init+0x21e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4f      	ldr	r2, [pc, #316]	; (8001d14 <HAL_GPIO_Init+0x350>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d101      	bne.n	8001bde <HAL_GPIO_Init+0x21a>
 8001bda:	2309      	movs	r3, #9
 8001bdc:	e012      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bde:	230a      	movs	r3, #10
 8001be0:	e010      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001be2:	2308      	movs	r3, #8
 8001be4:	e00e      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e00c      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bea:	2306      	movs	r3, #6
 8001bec:	e00a      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x240>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x328>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c70:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x354>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f ae84 	bls.w	80019e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40021400 	.word	0x40021400
 8001d08:	40021800 	.word	0x40021800
 8001d0c:	40021c00 	.word	0x40021c00
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40022400 	.word	0x40022400
 8001d18:	40013c00 	.word	0x40013c00

08001d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fd8e 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f001 fc86 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	; (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	; (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fee:	f7ff fb15 	bl	800161c <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	f040 80d9 	bne.w	80021b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2319      	movs	r3, #25
 8002008:	2201      	movs	r2, #1
 800200a:	496d      	ldr	r1, [pc, #436]	; (80021c0 <HAL_I2C_Mem_Write+0x1ec>)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fc7f 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	e0cc      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Mem_Write+0x56>
 8002026:	2302      	movs	r3, #2
 8002028:	e0c5      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d007      	beq.n	8002050 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2221      	movs	r2, #33	; 0x21
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a3a      	ldr	r2, [r7, #32]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a4d      	ldr	r2, [pc, #308]	; (80021c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	893a      	ldrh	r2, [r7, #8]
 8002096:	8979      	ldrh	r1, [r7, #10]
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fab6 	bl	8002614 <I2C_RequestMemoryWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d052      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e081      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fd00 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00d      	beq.n	80020de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d107      	bne.n	80020da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d11b      	bne.n	8002154 <HAL_I2C_Mem_Write+0x180>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1aa      	bne.n	80020b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fcec 	bl	8002b3e <I2C_WaitOnBTFFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	2b04      	cmp	r3, #4
 8002172:	d107      	bne.n	8002184 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e016      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00100002 	.word	0x00100002
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	817b      	strh	r3, [r7, #10]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e2:	f7ff fa1b 	bl	800161c <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	f040 8208 	bne.w	8002606 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2319      	movs	r3, #25
 80021fc:	2201      	movs	r2, #1
 80021fe:	497b      	ldr	r1, [pc, #492]	; (80023ec <HAL_I2C_Mem_Read+0x224>)
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fb85 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	e1fb      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_I2C_Mem_Read+0x56>
 800221a:	2302      	movs	r3, #2
 800221c:	e1f4      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d007      	beq.n	8002244 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2222      	movs	r2, #34	; 0x22
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a5b      	ldr	r2, [pc, #364]	; (80023f0 <HAL_I2C_Mem_Read+0x228>)
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002286:	88f8      	ldrh	r0, [r7, #6]
 8002288:	893a      	ldrh	r2, [r7, #8]
 800228a:	8979      	ldrh	r1, [r7, #10]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4603      	mov	r3, r0
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa52 	bl	8002740 <I2C_RequestMemoryRead>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e1b0      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d113      	bne.n	80022d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e184      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d11b      	bne.n	8002316 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e164      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	2b02      	cmp	r3, #2
 800231c:	d11b      	bne.n	8002356 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	e144      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800236c:	e138      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	2b03      	cmp	r3, #3
 8002374:	f200 80f1 	bhi.w	800255a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b01      	cmp	r3, #1
 800237e:	d123      	bne.n	80023c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fc1b 	bl	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e139      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c6:	e10b      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d14e      	bne.n	800246e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2200      	movs	r2, #0
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <HAL_I2C_Mem_Read+0x22c>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fa98 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e10e      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
 80023ea:	bf00      	nop
 80023ec:	00100002 	.word	0x00100002
 80023f0:	ffff0000 	.word	0xffff0000
 80023f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246c:	e0b8      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	4966      	ldr	r1, [pc, #408]	; (8002610 <HAL_I2C_Mem_Read+0x448>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fa49 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0bf      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	2200      	movs	r2, #0
 80024d2:	494f      	ldr	r1, [pc, #316]	; (8002610 <HAL_I2C_Mem_Read+0x448>)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fa1b 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e091      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002558:	e042      	b.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fb2e 	bl	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e04c      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d118      	bne.n	80025e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f aec2 	bne.w	800236e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010004 	.word	0x00010004

08002614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	817b      	strh	r3, [r7, #10]
 8002626:	460b      	mov	r3, r1
 8002628:	813b      	strh	r3, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	2200      	movs	r2, #0
 8002646:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f960 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002664:	d103      	bne.n	800266e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e05f      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002672:	897b      	ldrh	r3, [r7, #10]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	492d      	ldr	r1, [pc, #180]	; (800273c <I2C_RequestMemoryWrite+0x128>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f998 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e04c      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6a39      	ldr	r1, [r7, #32]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa02 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d107      	bne.n	80026d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e02b      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	e021      	b.n	8002730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f9dc 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e005      	b.n	8002732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002726:	893b      	ldrh	r3, [r7, #8]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	00010002 	.word	0x00010002

08002740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	2200      	movs	r2, #0
 8002782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f8c2 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d103      	bne.n	80027aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0aa      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	4952      	ldr	r1, [pc, #328]	; (800290c <I2C_RequestMemoryRead+0x1cc>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f8fa 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e097      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f964 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d107      	bne.n	8002812 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e076      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	e021      	b.n	800286c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	6a39      	ldr	r1, [r7, #32]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f93e 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b04      	cmp	r3, #4
 800284c:	d107      	bne.n	800285e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e050      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002862:	893b      	ldrh	r3, [r7, #8]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6a39      	ldr	r1, [r7, #32]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f923 	bl	8002abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b04      	cmp	r3, #4
 8002882:	d107      	bne.n	8002894 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e035      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f82b 	bl	8002910 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ce:	d103      	bne.n	80028d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e013      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028dc:	897b      	ldrh	r3, [r7, #10]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	4906      	ldr	r1, [pc, #24]	; (800290c <I2C_RequestMemoryRead+0x1cc>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f863 	bl	80029be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	e025      	b.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d021      	beq.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fe77 	bl	800161c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e023      	b.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10d      	bne.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	e00c      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf0c      	ite	eq
 80029a6:	2301      	moveq	r3, #1
 80029a8:	2300      	movne	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d0b6      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029cc:	e051      	b.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d123      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e046      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d021      	beq.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2e:	f7fe fdf5 	bl	800161c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e020      	b.n	8002ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e00b      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d18d      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac8:	e02d      	b.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8ce 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e02d      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d021      	beq.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fd9b 	bl	800161c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0220 	orr.w	r2, r3, #32
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d1ca      	bne.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4a:	e02d      	b.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f88d 	bl	8002c6c <I2C_IsAcknowledgeFailed>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e02d      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d021      	beq.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b64:	f7fe fd5a 	bl	800161c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d116      	bne.n	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e007      	b.n	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d1ca      	bne.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bcc:	e042      	b.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d119      	bne.n	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e029      	b.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c10:	f7fe fd04 	bl	800161c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d302      	bcc.n	8002c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d1b5      	bne.n	8002bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c82:	d11b      	bne.n	8002cbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d129      	bne.n	8002d34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d12a      	bne.n	8002db2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	f023 030f 	bic.w	r3, r3, #15
 8002d82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	89fa      	ldrh	r2, [r7, #14]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
  }
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x94>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe fc16 	bl	800161c <HAL_GetTick>
 8002df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df2:	e009      	b.n	8002e08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df4:	f7fe fc12 	bl	800161c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d901      	bls.n	8002e08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e01f      	b.n	8002e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d1ee      	bne.n	8002df4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7fe fbfe 	bl	800161c <HAL_GetTick>
 8002e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e22:	e009      	b.n	8002e38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e24:	f7fe fbfa 	bl	800161c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e32:	d901      	bls.n	8002e38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e007      	b.n	8002e48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e44:	d1ee      	bne.n	8002e24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40023800 	.word	0x40023800
 8002e54:	420e0040 	.word	0x420e0040
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	420e0044 	.word	0x420e0044

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e267      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d00c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b82      	ldr	r3, [pc, #520]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05b      	beq.n	8002f68 <HAL_RCC_OscConfig+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d157      	bne.n	8002f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e242      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x74>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b70      	ldr	r3, [pc, #448]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6f      	ldr	r2, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe fb80 	bl	800161c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe fb7c 	bl	800161c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e207      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xc0>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fb6c 	bl	800161c <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fb68 	bl	800161c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1f3      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0xe8>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1c7      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4937      	ldr	r1, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_OscConfig+0x244>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fb21 	bl	800161c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fe fb1d 	bl	800161c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1a8      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4925      	ldr	r1, [pc, #148]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x244>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fb00 	bl	800161c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7fe fafc 	bl	800161c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e187      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCC_OscConfig+0x248>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe fae0 	bl	800161c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7fe fadc 	bl	800161c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e167      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x240>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x200>
 800307e:	e01b      	b.n	80030b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x248>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe fac9 	bl	800161c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e00e      	b.n	80030ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe fac5 	bl	800161c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d907      	bls.n	80030ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e150      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
 80030a0:	40023800 	.word	0x40023800
 80030a4:	42470000 	.word	0x42470000
 80030a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ea      	bne.n	800308e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8097 	beq.w	80031f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a7c      	ldr	r2, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	4b77      	ldr	r3, [pc, #476]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d118      	bne.n	8003134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003102:	4b74      	ldr	r3, [pc, #464]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a73      	ldr	r2, [pc, #460]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310e:	f7fe fa85 	bl	800161c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003116:	f7fe fa81 	bl	800161c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e10c      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b6a      	ldr	r3, [pc, #424]	; (80032d4 <HAL_RCC_OscConfig+0x474>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d106      	bne.n	800314a <HAL_RCC_OscConfig+0x2ea>
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a63      	ldr	r2, [pc, #396]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x324>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x30c>
 8003152:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5e      	ldr	r2, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003158:	f043 0304 	orr.w	r3, r3, #4
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	4a5b      	ldr	r2, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6713      	str	r3, [r2, #112]	; 0x70
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0x324>
 800316c:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe fa46 	bl	800161c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fa42 	bl	800161c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0cb      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0ee      	beq.n	8003194 <HAL_RCC_OscConfig+0x334>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fa30 	bl	800161c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe fa2c 	bl	800161c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0b5      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a1 	beq.w	8003340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d05c      	beq.n	80032c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d141      	bne.n	8003296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fa00 	bl	800161c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe f9fc 	bl	800161c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e087      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	3b01      	subs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	061b      	lsls	r3, r3, #24
 8003262:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe f9d5 	bl	800161c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe f9d1 	bl	800161c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e05c      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x416>
 8003294:	e054      	b.n	8003340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x478>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe f9be 	bl	800161c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe f9ba 	bl	800161c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e045      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
 80032c2:	e03d      	b.n	8003340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e038      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d028      	beq.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d121      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d11a      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	4293      	cmp	r3, r2
 8003316:	d111      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fe f8ec 	bl	800161c <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe f8e8 	bl	800161c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe f84c 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	08005e0c 	.word	0x08005e0c
 8003514:	20000068 	.word	0x20000068
 8003518:	2000006c 	.word	0x2000006c

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b090      	sub	sp, #64	; 0x40
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
 8003528:	2300      	movs	r3, #0
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003534:	4b59      	ldr	r3, [pc, #356]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d00d      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x40>
 8003540:	2b08      	cmp	r3, #8
 8003542:	f200 80a1 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x16c>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x34>
 800354a:	2b04      	cmp	r3, #4
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x3a>
 800354e:	e09b      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003554:	e09b      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003556:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800355a:	e098      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003566:	4b4d      	ldr	r3, [pc, #308]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d028      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	2200      	movs	r2, #0
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	627a      	str	r2, [r7, #36]	; 0x24
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003584:	2100      	movs	r1, #0
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003588:	fb03 f201 	mul.w	r2, r3, r1
 800358c:	2300      	movs	r3, #0
 800358e:	fb00 f303 	mul.w	r3, r0, r3
 8003592:	4413      	add	r3, r2
 8003594:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003596:	fba0 1202 	umull	r1, r2, r0, r2
 800359a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800359c:	460a      	mov	r2, r1
 800359e:	62ba      	str	r2, [r7, #40]	; 0x28
 80035a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a2:	4413      	add	r3, r2
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2200      	movs	r2, #0
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035b6:	f7fc fe6b 	bl	8000290 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4613      	mov	r3, r2
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c2:	e053      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	2200      	movs	r2, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	617a      	str	r2, [r7, #20]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035d6:	f04f 0b00 	mov.w	fp, #0
 80035da:	4652      	mov	r2, sl
 80035dc:	465b      	mov	r3, fp
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ec:	0150      	lsls	r0, r2, #5
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	ebb2 080a 	subs.w	r8, r2, sl
 80035f6:	eb63 090b 	sbc.w	r9, r3, fp
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003606:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800360a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800360e:	ebb2 0408 	subs.w	r4, r2, r8
 8003612:	eb63 0509 	sbc.w	r5, r3, r9
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	00eb      	lsls	r3, r5, #3
 8003620:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003624:	00e2      	lsls	r2, r4, #3
 8003626:	4614      	mov	r4, r2
 8003628:	461d      	mov	r5, r3
 800362a:	eb14 030a 	adds.w	r3, r4, sl
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	eb45 030b 	adc.w	r3, r5, fp
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003642:	4629      	mov	r1, r5
 8003644:	028b      	lsls	r3, r1, #10
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364c:	4621      	mov	r1, r4
 800364e:	028a      	lsls	r2, r1, #10
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	2200      	movs	r2, #0
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	60fa      	str	r2, [r7, #12]
 800365c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003660:	f7fc fe16 	bl	8000290 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <HAL_RCC_GetSysClockFreq+0x180>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800367c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003690:	4618      	mov	r0, r3
 8003692:	3740      	adds	r7, #64	; 0x40
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	017d7840 	.word	0x017d7840

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000068 	.word	0x20000068

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	08005e1c 	.word	0x08005e1c

080036e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ec:	f7ff ffdc 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	0b5b      	lsrs	r3, r3, #13
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	4903      	ldr	r1, [pc, #12]	; (800370c <HAL_RCC_GetPCLK2Freq+0x24>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	08005e1c 	.word	0x08005e1c

08003710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e041      	b.n	80037a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fdf8 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	4619      	mov	r1, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f000 fad8 	bl	8003d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e041      	b.n	8003844 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f839 	bl	800384c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 fa89 	bl	8003d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start+0x24>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e022      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d109      	bne.n	800389e <HAL_TIM_PWM_Start+0x3e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e015      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d109      	bne.n	80038b8 <HAL_TIM_PWM_Start+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_TIM_PWM_Start+0x6a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07c      	b.n	80039cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x82>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e0:	e013      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x92>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f0:	e00b      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	e003      	b.n	800390a <HAL_TIM_PWM_Start+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2201      	movs	r2, #1
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fce0 	bl	80042d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_TIM_PWM_Start+0x174>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_PWM_Start+0xcc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <HAL_TIM_PWM_Start+0x178>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_TIM_PWM_Start+0xd0>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_TIM_PWM_Start+0xd2>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <HAL_TIM_PWM_Start+0x174>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d01d      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_TIM_PWM_Start+0x17c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <HAL_TIM_PWM_Start+0x180>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_TIM_PWM_Start+0x184>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_PWM_Start+0x178>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d009      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <HAL_TIM_PWM_Start+0x188>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIM_PWM_Start+0x136>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a16      	ldr	r2, [pc, #88]	; (80039ec <HAL_TIM_PWM_Start+0x18c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d010      	beq.n	80039ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b8:	e007      	b.n	80039ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40001800 	.word	0x40001800

080039f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0ae      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b0c      	cmp	r3, #12
 8003a1a:	f200 809f 	bhi.w	8003b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003b5d 	.word	0x08003b5d
 8003a2c:	08003b5d 	.word	0x08003b5d
 8003a30:	08003b5d 	.word	0x08003b5d
 8003a34:	08003a99 	.word	0x08003a99
 8003a38:	08003b5d 	.word	0x08003b5d
 8003a3c:	08003b5d 	.word	0x08003b5d
 8003a40:	08003b5d 	.word	0x08003b5d
 8003a44:	08003adb 	.word	0x08003adb
 8003a48:	08003b5d 	.word	0x08003b5d
 8003a4c:	08003b5d 	.word	0x08003b5d
 8003a50:	08003b5d 	.word	0x08003b5d
 8003a54:	08003b1b 	.word	0x08003b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f9f0 	bl	8003e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	619a      	str	r2, [r3, #24]
      break;
 8003a96:	e064      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fa40 	bl	8003f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6999      	ldr	r1, [r3, #24]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	619a      	str	r2, [r3, #24]
      break;
 8003ad8:	e043      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fa95 	bl	8004010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0204 	bic.w	r2, r2, #4
 8003b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69d9      	ldr	r1, [r3, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	61da      	str	r2, [r3, #28]
      break;
 8003b18:	e023      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fae9 	bl	80040f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69d9      	ldr	r1, [r3, #28]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	021a      	lsls	r2, r3, #8
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	61da      	str	r2, [r3, #28]
      break;
 8003b5a:	e002      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_ConfigClockSource+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0b4      	b.n	8003cfa <HAL_TIM_ConfigClockSource+0x186>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d03e      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0xd4>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	f200 8087 	bhi.w	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_TIM_ConfigClockSource+0x172>
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bde:	d87f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d01a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0xa6>
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d87b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b60      	cmp	r3, #96	; 0x60
 8003bea:	d050      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x11a>
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d877      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b50      	cmp	r3, #80	; 0x50
 8003bf2:	d03c      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0xfa>
 8003bf4:	2b50      	cmp	r3, #80	; 0x50
 8003bf6:	d873      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b40      	cmp	r3, #64	; 0x40
 8003bfa:	d058      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x13a>
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d86f      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b30      	cmp	r3, #48	; 0x30
 8003c02:	d064      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d86b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d060      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d867      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d05c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d05a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x15a>
 8003c18:	e062      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6899      	ldr	r1, [r3, #8]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f000 fb35 	bl	8004298 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	609a      	str	r2, [r3, #8]
      break;
 8003c46:	e04f      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f000 fb1e 	bl	8004298 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6a:	609a      	str	r2, [r3, #8]
      break;
 8003c6c:	e03c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 fa92 	bl	80041a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2150      	movs	r1, #80	; 0x50
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 faeb 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e02c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 fab1 	bl	8004202 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2160      	movs	r1, #96	; 0x60
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fadb 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e01c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 fa72 	bl	80041a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 facb 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e00c      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f000 fac2 	bl	8004262 <TIM_ITRx_SetConfig>
      break;
 8003cde:	e003      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce4:	e000      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d00f      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <TIM_Base_SetConfig+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00b      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3c      	ldr	r2, [pc, #240]	; (8003e20 <TIM_Base_SetConfig+0x11c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d007      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <TIM_Base_SetConfig+0x120>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d003      	beq.n	8003d44 <TIM_Base_SetConfig+0x40>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2f      	ldr	r2, [pc, #188]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02b      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d027      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <TIM_Base_SetConfig+0x118>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d023      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <TIM_Base_SetConfig+0x11c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01f      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <TIM_Base_SetConfig+0x120>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01b      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d017      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <TIM_Base_SetConfig+0x128>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <TIM_Base_SetConfig+0x12c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00f      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <TIM_Base_SetConfig+0x130>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <TIM_Base_SetConfig+0x134>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d007      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <TIM_Base_SetConfig+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a23      	ldr	r2, [pc, #140]	; (8003e40 <TIM_Base_SetConfig+0x13c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d108      	bne.n	8003dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <TIM_Base_SetConfig+0x114>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_Base_SetConfig+0xf8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <TIM_Base_SetConfig+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d103      	bne.n	8003e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	615a      	str	r2, [r3, #20]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40010400 	.word	0x40010400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40001800 	.word	0x40001800
 8003e3c:	40001c00 	.word	0x40001c00
 8003e40:	40002000 	.word	0x40002000

08003e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f023 0302 	bic.w	r3, r3, #2
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <TIM_OC1_SetConfig+0xd8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC1_SetConfig+0x64>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <TIM_OC1_SetConfig+0xdc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10c      	bne.n	8003ec2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0308 	bic.w	r3, r3, #8
 8003eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <TIM_OC1_SetConfig+0xd8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x8e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <TIM_OC1_SetConfig+0xdc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d111      	bne.n	8003ef6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400

08003f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0320 	bic.w	r3, r3, #32
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <TIM_OC2_SetConfig+0xe4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC2_SetConfig+0x68>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a21      	ldr	r2, [pc, #132]	; (800400c <TIM_OC2_SetConfig+0xe8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10d      	bne.n	8003fa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <TIM_OC2_SetConfig+0xe4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_OC2_SetConfig+0x94>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <TIM_OC2_SetConfig+0xe8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d113      	bne.n	8003fe0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	621a      	str	r2, [r3, #32]
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000
 800400c:	40010400 	.word	0x40010400

08004010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <TIM_OC3_SetConfig+0xe0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_OC3_SetConfig+0x66>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <TIM_OC3_SetConfig+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10d      	bne.n	8004092 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800407c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <TIM_OC3_SetConfig+0xe0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_OC3_SetConfig+0x92>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <TIM_OC3_SetConfig+0xe4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d113      	bne.n	80040ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	621a      	str	r2, [r3, #32]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <TIM_OC4_SetConfig+0xa4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC4_SetConfig+0x68>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <TIM_OC4_SetConfig+0xa8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d109      	bne.n	8004174 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	019b      	lsls	r3, r3, #6
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40010400 	.word	0x40010400

080041a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 030a 	bic.w	r3, r3, #10
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004202:	b480      	push	{r7}
 8004204:	b087      	sub	sp, #28
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f023 0210 	bic.w	r2, r3, #16
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800422c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	f043 0307 	orr.w	r3, r3, #7
 8004284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2201      	movs	r2, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004338:	2302      	movs	r3, #2
 800433a:	e05a      	b.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a21      	ldr	r2, [pc, #132]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d022      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d01d      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1a      	ldr	r2, [pc, #104]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10c      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40001800 	.word	0x40001800

0800441c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03f      	b.n	80044ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc fff8 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fc7b 	bl	8004d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b0ba      	sub	sp, #232	; 0xe8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_UART_IRQHandler+0x66>
 800450a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fb65 	bl	8004be6 <UART_Receive_IT>
      return;
 800451c:	e256      	b.n	80049cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800451e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80de 	beq.w	80046e4 <HAL_UART_IRQHandler+0x22c>
 8004528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80d1 	beq.w	80046e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_UART_IRQHandler+0xae>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0201 	orr.w	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_UART_IRQHandler+0xd2>
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
 8004596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d011      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
 80045ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80045c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 81ed 	beq.w	80049c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_UART_IRQHandler+0x14e>
 80045f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 faf0 	bl	8004be6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <HAL_UART_IRQHandler+0x17a>
 800462a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04f      	beq.n	80046d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9f8 	bl	8004a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d141      	bne.n	80046ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3314      	adds	r3, #20
 800464c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800465c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3314      	adds	r3, #20
 800466e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800467e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800468a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1d9      	bne.n	8004646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	4a7d      	ldr	r2, [pc, #500]	; (8004894 <HAL_UART_IRQHandler+0x3dc>)
 80046a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd f969 	bl	800197e <HAL_DMA_Abort_IT>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046bc:	4610      	mov	r0, r2
 80046be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c0:	e00e      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f99a 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	e00a      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f996 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	e006      	b.n	80046e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f992 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046de:	e170      	b.n	80049c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	bf00      	nop
    return;
 80046e2:	e16e      	b.n	80049c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	f040 814a 	bne.w	8004982 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8143 	beq.w	8004982 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f003 0310 	and.w	r3, r3, #16
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 813c 	beq.w	8004982 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	f040 80b4 	bne.w	8004898 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800473c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8140 	beq.w	80049c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800474a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800474e:	429a      	cmp	r2, r3
 8004750:	f080 8139 	bcs.w	80049c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800475a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004766:	f000 8088 	beq.w	800487a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	330c      	adds	r3, #12
 8004792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800479a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1d9      	bne.n	800476a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e1      	bne.n	80047b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3314      	adds	r3, #20
 8004812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004816:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004818:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800481c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e3      	bne.n	80047f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	f023 0310 	bic.w	r3, r3, #16
 800484e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800485c:	65ba      	str	r2, [r7, #88]	; 0x58
 800485e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e3      	bne.n	8004838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd f812 	bl	800189e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004882:	b29b      	uxth	r3, r3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	b29b      	uxth	r3, r3
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8c0 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004890:	e099      	b.n	80049c6 <HAL_UART_IRQHandler+0x50e>
 8004892:	bf00      	nop
 8004894:	08004aef 	.word	0x08004aef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 808b 	beq.w	80049ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80048b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8086 	beq.w	80049ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048e2:	647a      	str	r2, [r7, #68]	; 0x44
 80048e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e3      	bne.n	80048be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	623b      	str	r3, [r7, #32]
   return(result);
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800491a:	633a      	str	r2, [r7, #48]	; 0x30
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e3      	bne.n	80048f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60fb      	str	r3, [r7, #12]
   return(result);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004960:	61fa      	str	r2, [r7, #28]
 8004962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	617b      	str	r3, [r7, #20]
   return(result);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e3      	bne.n	800493c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f848 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004980:	e023      	b.n	80049ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_UART_IRQHandler+0x4ea>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8bb 	bl	8004b16 <UART_Transmit_IT>
    return;
 80049a0:	e014      	b.n	80049cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <HAL_UART_IRQHandler+0x514>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8fb 	bl	8004bb6 <UART_EndTransmit_IT>
    return;
 80049c0:	e004      	b.n	80049cc <HAL_UART_IRQHandler+0x514>
    return;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <HAL_UART_IRQHandler+0x514>
      return;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_UART_IRQHandler+0x514>
      return;
 80049ca:	bf00      	nop
  }
}
 80049cc:	37e8      	adds	r7, #232	; 0xe8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop

080049d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b095      	sub	sp, #84	; 0x54
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a50:	643a      	str	r2, [r7, #64]	; 0x40
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d119      	bne.n	8004ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac0:	61ba      	str	r2, [r7, #24]
 8004ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ae2:	bf00      	nop
 8004ae4:	3754      	adds	r7, #84	; 0x54
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff ff77 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0e:	bf00      	nop
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b21      	cmp	r3, #33	; 0x21
 8004b28:	d13e      	bne.n	8004ba8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	d114      	bne.n	8004b5e <UART_Transmit_IT+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]
 8004b5c:	e008      	b.n	8004b70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6211      	str	r1, [r2, #32]
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fefc 	bl	80049d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b08c      	sub	sp, #48	; 0x30
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b22      	cmp	r3, #34	; 0x22
 8004bf8:	f040 80ab 	bne.w	8004d52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d117      	bne.n	8004c36 <UART_Receive_IT+0x50>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d113      	bne.n	8004c36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
 8004c34:	e026      	b.n	8004c84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d007      	beq.n	8004c5a <UART_Receive_IT+0x74>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <UART_Receive_IT+0x82>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e008      	b.n	8004c7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	4619      	mov	r1, r3
 8004c92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15a      	bne.n	8004d4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0220 	bic.w	r2, r2, #32
 8004ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d135      	bne.n	8004d44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	613b      	str	r3, [r7, #16]
   return(result);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f023 0310 	bic.w	r3, r3, #16
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	623a      	str	r2, [r7, #32]
 8004d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	6a3a      	ldr	r2, [r7, #32]
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e5      	bne.n	8004cde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d10a      	bne.n	8004d36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fe67 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
 8004d42:	e002      	b.n	8004d4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff fe4f 	bl	80049e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e002      	b.n	8004d54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	; 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b0c0      	sub	sp, #256	; 0x100
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	68d9      	ldr	r1, [r3, #12]
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	ea40 0301 	orr.w	r3, r0, r1
 8004d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004db4:	f021 010c 	bic.w	r1, r1, #12
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd6:	6999      	ldr	r1, [r3, #24]
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	ea40 0301 	orr.w	r3, r0, r1
 8004de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b8f      	ldr	r3, [pc, #572]	; (8005028 <UART_SetConfig+0x2cc>)
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d005      	beq.n	8004dfc <UART_SetConfig+0xa0>
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b8d      	ldr	r3, [pc, #564]	; (800502c <UART_SetConfig+0x2d0>)
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d104      	bne.n	8004e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dfc:	f7fe fc74 	bl	80036e8 <HAL_RCC_GetPCLK2Freq>
 8004e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e04:	e003      	b.n	8004e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e06:	f7fe fc5b 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8004e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	f040 810c 	bne.w	8005034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e20:	2200      	movs	r2, #0
 8004e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e2e:	4622      	mov	r2, r4
 8004e30:	462b      	mov	r3, r5
 8004e32:	1891      	adds	r1, r2, r2
 8004e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e36:	415b      	adcs	r3, r3
 8004e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e3e:	4621      	mov	r1, r4
 8004e40:	eb12 0801 	adds.w	r8, r2, r1
 8004e44:	4629      	mov	r1, r5
 8004e46:	eb43 0901 	adc.w	r9, r3, r1
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5e:	4690      	mov	r8, r2
 8004e60:	4699      	mov	r9, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	eb18 0303 	adds.w	r3, r8, r3
 8004e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	eb49 0303 	adc.w	r3, r9, r3
 8004e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	18db      	adds	r3, r3, r3
 8004e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e90:	4613      	mov	r3, r2
 8004e92:	eb42 0303 	adc.w	r3, r2, r3
 8004e96:	657b      	str	r3, [r7, #84]	; 0x54
 8004e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ea0:	f7fb f9f6 	bl	8000290 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4b61      	ldr	r3, [pc, #388]	; (8005030 <UART_SetConfig+0x2d4>)
 8004eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	011c      	lsls	r4, r3, #4
 8004eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8004eda:	4649      	mov	r1, r9
 8004edc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef4:	4692      	mov	sl, r2
 8004ef6:	469b      	mov	fp, r3
 8004ef8:	4643      	mov	r3, r8
 8004efa:	eb1a 0303 	adds.w	r3, sl, r3
 8004efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f02:	464b      	mov	r3, r9
 8004f04:	eb4b 0303 	adc.w	r3, fp, r3
 8004f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f20:	460b      	mov	r3, r1
 8004f22:	18db      	adds	r3, r3, r3
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
 8004f26:	4613      	mov	r3, r2
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f36:	f7fb f9ab 	bl	8000290 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <UART_SetConfig+0x2d4>)
 8004f42:	fba3 2301 	umull	r2, r3, r3, r1
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2264      	movs	r2, #100	; 0x64
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	1acb      	subs	r3, r1, r3
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f56:	4b36      	ldr	r3, [pc, #216]	; (8005030 <UART_SetConfig+0x2d4>)
 8004f58:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f64:	441c      	add	r4, r3
 8004f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	1891      	adds	r1, r2, r2
 8004f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f80:	415b      	adcs	r3, r3
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f88:	4641      	mov	r1, r8
 8004f8a:	1851      	adds	r1, r2, r1
 8004f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f8e:	4649      	mov	r1, r9
 8004f90:	414b      	adcs	r3, r1
 8004f92:	637b      	str	r3, [r7, #52]	; 0x34
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	00cb      	lsls	r3, r1, #3
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004faa:	4651      	mov	r1, sl
 8004fac:	00ca      	lsls	r2, r1, #3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	460a      	mov	r2, r1
 8004fc0:	eb42 0303 	adc.w	r3, r2, r3
 8004fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fdc:	460b      	mov	r3, r1
 8004fde:	18db      	adds	r3, r3, r3
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ff2:	f7fb f94d 	bl	8000290 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <UART_SetConfig+0x2d4>)
 8004ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2164      	movs	r1, #100	; 0x64
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	3332      	adds	r3, #50	; 0x32
 800500e:	4a08      	ldr	r2, [pc, #32]	; (8005030 <UART_SetConfig+0x2d4>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 0207 	and.w	r2, r3, #7
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4422      	add	r2, r4
 8005022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005024:	e105      	b.n	8005232 <UART_SetConfig+0x4d6>
 8005026:	bf00      	nop
 8005028:	40011000 	.word	0x40011000
 800502c:	40011400 	.word	0x40011400
 8005030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005038:	2200      	movs	r2, #0
 800503a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800503e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005046:	4642      	mov	r2, r8
 8005048:	464b      	mov	r3, r9
 800504a:	1891      	adds	r1, r2, r2
 800504c:	6239      	str	r1, [r7, #32]
 800504e:	415b      	adcs	r3, r3
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005056:	4641      	mov	r1, r8
 8005058:	1854      	adds	r4, r2, r1
 800505a:	4649      	mov	r1, r9
 800505c:	eb43 0501 	adc.w	r5, r3, r1
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	00eb      	lsls	r3, r5, #3
 800506a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506e:	00e2      	lsls	r2, r4, #3
 8005070:	4614      	mov	r4, r2
 8005072:	461d      	mov	r5, r3
 8005074:	4643      	mov	r3, r8
 8005076:	18e3      	adds	r3, r4, r3
 8005078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800507c:	464b      	mov	r3, r9
 800507e:	eb45 0303 	adc.w	r3, r5, r3
 8005082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050a2:	4629      	mov	r1, r5
 80050a4:	008b      	lsls	r3, r1, #2
 80050a6:	4621      	mov	r1, r4
 80050a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ac:	4621      	mov	r1, r4
 80050ae:	008a      	lsls	r2, r1, #2
 80050b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050b4:	f7fb f8ec 	bl	8000290 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b60      	ldr	r3, [pc, #384]	; (8005240 <UART_SetConfig+0x4e4>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	011c      	lsls	r4, r3, #4
 80050c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	61b9      	str	r1, [r7, #24]
 80050e0:	415b      	adcs	r3, r3
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e8:	4641      	mov	r1, r8
 80050ea:	1851      	adds	r1, r2, r1
 80050ec:	6139      	str	r1, [r7, #16]
 80050ee:	4649      	mov	r1, r9
 80050f0:	414b      	adcs	r3, r1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005100:	4659      	mov	r1, fp
 8005102:	00cb      	lsls	r3, r1, #3
 8005104:	4651      	mov	r1, sl
 8005106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510a:	4651      	mov	r1, sl
 800510c:	00ca      	lsls	r2, r1, #3
 800510e:	4610      	mov	r0, r2
 8005110:	4619      	mov	r1, r3
 8005112:	4603      	mov	r3, r0
 8005114:	4642      	mov	r2, r8
 8005116:	189b      	adds	r3, r3, r2
 8005118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800511c:	464b      	mov	r3, r9
 800511e:	460a      	mov	r2, r1
 8005120:	eb42 0303 	adc.w	r3, r2, r3
 8005124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	67bb      	str	r3, [r7, #120]	; 0x78
 8005132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005140:	4649      	mov	r1, r9
 8005142:	008b      	lsls	r3, r1, #2
 8005144:	4641      	mov	r1, r8
 8005146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514a:	4641      	mov	r1, r8
 800514c:	008a      	lsls	r2, r1, #2
 800514e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005152:	f7fb f89d 	bl	8000290 <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4b39      	ldr	r3, [pc, #228]	; (8005240 <UART_SetConfig+0x4e4>)
 800515c:	fba3 1302 	umull	r1, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	2164      	movs	r1, #100	; 0x64
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	3332      	adds	r3, #50	; 0x32
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <UART_SetConfig+0x4e4>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517a:	441c      	add	r4, r3
 800517c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005180:	2200      	movs	r2, #0
 8005182:	673b      	str	r3, [r7, #112]	; 0x70
 8005184:	677a      	str	r2, [r7, #116]	; 0x74
 8005186:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800518a:	4642      	mov	r2, r8
 800518c:	464b      	mov	r3, r9
 800518e:	1891      	adds	r1, r2, r2
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	415b      	adcs	r3, r3
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800519a:	4641      	mov	r1, r8
 800519c:	1851      	adds	r1, r2, r1
 800519e:	6039      	str	r1, [r7, #0]
 80051a0:	4649      	mov	r1, r9
 80051a2:	414b      	adcs	r3, r1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b2:	4659      	mov	r1, fp
 80051b4:	00cb      	lsls	r3, r1, #3
 80051b6:	4651      	mov	r1, sl
 80051b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051bc:	4651      	mov	r1, sl
 80051be:	00ca      	lsls	r2, r1, #3
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	4603      	mov	r3, r0
 80051c6:	4642      	mov	r2, r8
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80051cc:	464b      	mov	r3, r9
 80051ce:	460a      	mov	r2, r1
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	663b      	str	r3, [r7, #96]	; 0x60
 80051e0:	667a      	str	r2, [r7, #100]	; 0x64
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051ee:	4649      	mov	r1, r9
 80051f0:	008b      	lsls	r3, r1, #2
 80051f2:	4641      	mov	r1, r8
 80051f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f8:	4641      	mov	r1, r8
 80051fa:	008a      	lsls	r2, r1, #2
 80051fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005200:	f7fb f846 	bl	8000290 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <UART_SetConfig+0x4e4>)
 800520a:	fba3 1302 	umull	r1, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2164      	movs	r1, #100	; 0x64
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	3332      	adds	r3, #50	; 0x32
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <UART_SetConfig+0x4e4>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f003 020f 	and.w	r2, r3, #15
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4422      	add	r2, r4
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005238:	46bd      	mov	sp, r7
 800523a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523e:	bf00      	nop
 8005240:	51eb851f 	.word	0x51eb851f

08005244 <atoi>:
 8005244:	220a      	movs	r2, #10
 8005246:	2100      	movs	r1, #0
 8005248:	f000 b9c4 	b.w	80055d4 <strtol>

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000074 	.word	0x20000074

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	; (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	; (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	; (800529c <__libc_init_array+0x44>)
 800526c:	f000 fd1a 	bl	8005ca4 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08005f60 	.word	0x08005f60
 8005294:	08005f60 	.word	0x08005f60
 8005298:	08005f60 	.word	0x08005f60
 800529c:	08005f64 	.word	0x08005f64

080052a0 <memset>:
 80052a0:	4402      	add	r2, r0
 80052a2:	4603      	mov	r3, r0
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d100      	bne.n	80052aa <memset+0xa>
 80052a8:	4770      	bx	lr
 80052aa:	f803 1b01 	strb.w	r1, [r3], #1
 80052ae:	e7f9      	b.n	80052a4 <memset+0x4>

080052b0 <_free_r>:
 80052b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d044      	beq.n	8005340 <_free_r+0x90>
 80052b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ba:	9001      	str	r0, [sp, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f1a1 0404 	sub.w	r4, r1, #4
 80052c2:	bfb8      	it	lt
 80052c4:	18e4      	addlt	r4, r4, r3
 80052c6:	f000 f98f 	bl	80055e8 <__malloc_lock>
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <_free_r+0x94>)
 80052cc:	9801      	ldr	r0, [sp, #4]
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	b933      	cbnz	r3, 80052e0 <_free_r+0x30>
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	6014      	str	r4, [r2, #0]
 80052d6:	b003      	add	sp, #12
 80052d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052dc:	f000 b98a 	b.w	80055f4 <__malloc_unlock>
 80052e0:	42a3      	cmp	r3, r4
 80052e2:	d908      	bls.n	80052f6 <_free_r+0x46>
 80052e4:	6825      	ldr	r5, [r4, #0]
 80052e6:	1961      	adds	r1, r4, r5
 80052e8:	428b      	cmp	r3, r1
 80052ea:	bf01      	itttt	eq
 80052ec:	6819      	ldreq	r1, [r3, #0]
 80052ee:	685b      	ldreq	r3, [r3, #4]
 80052f0:	1949      	addeq	r1, r1, r5
 80052f2:	6021      	streq	r1, [r4, #0]
 80052f4:	e7ed      	b.n	80052d2 <_free_r+0x22>
 80052f6:	461a      	mov	r2, r3
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	b10b      	cbz	r3, 8005300 <_free_r+0x50>
 80052fc:	42a3      	cmp	r3, r4
 80052fe:	d9fa      	bls.n	80052f6 <_free_r+0x46>
 8005300:	6811      	ldr	r1, [r2, #0]
 8005302:	1855      	adds	r5, r2, r1
 8005304:	42a5      	cmp	r5, r4
 8005306:	d10b      	bne.n	8005320 <_free_r+0x70>
 8005308:	6824      	ldr	r4, [r4, #0]
 800530a:	4421      	add	r1, r4
 800530c:	1854      	adds	r4, r2, r1
 800530e:	42a3      	cmp	r3, r4
 8005310:	6011      	str	r1, [r2, #0]
 8005312:	d1e0      	bne.n	80052d6 <_free_r+0x26>
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	4421      	add	r1, r4
 800531c:	6011      	str	r1, [r2, #0]
 800531e:	e7da      	b.n	80052d6 <_free_r+0x26>
 8005320:	d902      	bls.n	8005328 <_free_r+0x78>
 8005322:	230c      	movs	r3, #12
 8005324:	6003      	str	r3, [r0, #0]
 8005326:	e7d6      	b.n	80052d6 <_free_r+0x26>
 8005328:	6825      	ldr	r5, [r4, #0]
 800532a:	1961      	adds	r1, r4, r5
 800532c:	428b      	cmp	r3, r1
 800532e:	bf04      	itt	eq
 8005330:	6819      	ldreq	r1, [r3, #0]
 8005332:	685b      	ldreq	r3, [r3, #4]
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	bf04      	itt	eq
 8005338:	1949      	addeq	r1, r1, r5
 800533a:	6021      	streq	r1, [r4, #0]
 800533c:	6054      	str	r4, [r2, #4]
 800533e:	e7ca      	b.n	80052d6 <_free_r+0x26>
 8005340:	b003      	add	sp, #12
 8005342:	bd30      	pop	{r4, r5, pc}
 8005344:	20000290 	.word	0x20000290

08005348 <sbrk_aligned>:
 8005348:	b570      	push	{r4, r5, r6, lr}
 800534a:	4e0e      	ldr	r6, [pc, #56]	; (8005384 <sbrk_aligned+0x3c>)
 800534c:	460c      	mov	r4, r1
 800534e:	6831      	ldr	r1, [r6, #0]
 8005350:	4605      	mov	r5, r0
 8005352:	b911      	cbnz	r1, 800535a <sbrk_aligned+0x12>
 8005354:	f000 f88c 	bl	8005470 <_sbrk_r>
 8005358:	6030      	str	r0, [r6, #0]
 800535a:	4621      	mov	r1, r4
 800535c:	4628      	mov	r0, r5
 800535e:	f000 f887 	bl	8005470 <_sbrk_r>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d00a      	beq.n	800537c <sbrk_aligned+0x34>
 8005366:	1cc4      	adds	r4, r0, #3
 8005368:	f024 0403 	bic.w	r4, r4, #3
 800536c:	42a0      	cmp	r0, r4
 800536e:	d007      	beq.n	8005380 <sbrk_aligned+0x38>
 8005370:	1a21      	subs	r1, r4, r0
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f87c 	bl	8005470 <_sbrk_r>
 8005378:	3001      	adds	r0, #1
 800537a:	d101      	bne.n	8005380 <sbrk_aligned+0x38>
 800537c:	f04f 34ff 	mov.w	r4, #4294967295
 8005380:	4620      	mov	r0, r4
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	20000294 	.word	0x20000294

08005388 <_malloc_r>:
 8005388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538c:	1ccd      	adds	r5, r1, #3
 800538e:	f025 0503 	bic.w	r5, r5, #3
 8005392:	3508      	adds	r5, #8
 8005394:	2d0c      	cmp	r5, #12
 8005396:	bf38      	it	cc
 8005398:	250c      	movcc	r5, #12
 800539a:	2d00      	cmp	r5, #0
 800539c:	4607      	mov	r7, r0
 800539e:	db01      	blt.n	80053a4 <_malloc_r+0x1c>
 80053a0:	42a9      	cmp	r1, r5
 80053a2:	d905      	bls.n	80053b0 <_malloc_r+0x28>
 80053a4:	230c      	movs	r3, #12
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	2600      	movs	r6, #0
 80053aa:	4630      	mov	r0, r6
 80053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b0:	4e2e      	ldr	r6, [pc, #184]	; (800546c <_malloc_r+0xe4>)
 80053b2:	f000 f919 	bl	80055e8 <__malloc_lock>
 80053b6:	6833      	ldr	r3, [r6, #0]
 80053b8:	461c      	mov	r4, r3
 80053ba:	bb34      	cbnz	r4, 800540a <_malloc_r+0x82>
 80053bc:	4629      	mov	r1, r5
 80053be:	4638      	mov	r0, r7
 80053c0:	f7ff ffc2 	bl	8005348 <sbrk_aligned>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	4604      	mov	r4, r0
 80053c8:	d14d      	bne.n	8005466 <_malloc_r+0xde>
 80053ca:	6834      	ldr	r4, [r6, #0]
 80053cc:	4626      	mov	r6, r4
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d140      	bne.n	8005454 <_malloc_r+0xcc>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	4631      	mov	r1, r6
 80053d6:	4638      	mov	r0, r7
 80053d8:	eb04 0803 	add.w	r8, r4, r3
 80053dc:	f000 f848 	bl	8005470 <_sbrk_r>
 80053e0:	4580      	cmp	r8, r0
 80053e2:	d13a      	bne.n	800545a <_malloc_r+0xd2>
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	3503      	adds	r5, #3
 80053e8:	1a6d      	subs	r5, r5, r1
 80053ea:	f025 0503 	bic.w	r5, r5, #3
 80053ee:	3508      	adds	r5, #8
 80053f0:	2d0c      	cmp	r5, #12
 80053f2:	bf38      	it	cc
 80053f4:	250c      	movcc	r5, #12
 80053f6:	4629      	mov	r1, r5
 80053f8:	4638      	mov	r0, r7
 80053fa:	f7ff ffa5 	bl	8005348 <sbrk_aligned>
 80053fe:	3001      	adds	r0, #1
 8005400:	d02b      	beq.n	800545a <_malloc_r+0xd2>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	442b      	add	r3, r5
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	e00e      	b.n	8005428 <_malloc_r+0xa0>
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	1b52      	subs	r2, r2, r5
 800540e:	d41e      	bmi.n	800544e <_malloc_r+0xc6>
 8005410:	2a0b      	cmp	r2, #11
 8005412:	d916      	bls.n	8005442 <_malloc_r+0xba>
 8005414:	1961      	adds	r1, r4, r5
 8005416:	42a3      	cmp	r3, r4
 8005418:	6025      	str	r5, [r4, #0]
 800541a:	bf18      	it	ne
 800541c:	6059      	strne	r1, [r3, #4]
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	bf08      	it	eq
 8005422:	6031      	streq	r1, [r6, #0]
 8005424:	5162      	str	r2, [r4, r5]
 8005426:	604b      	str	r3, [r1, #4]
 8005428:	4638      	mov	r0, r7
 800542a:	f104 060b 	add.w	r6, r4, #11
 800542e:	f000 f8e1 	bl	80055f4 <__malloc_unlock>
 8005432:	f026 0607 	bic.w	r6, r6, #7
 8005436:	1d23      	adds	r3, r4, #4
 8005438:	1af2      	subs	r2, r6, r3
 800543a:	d0b6      	beq.n	80053aa <_malloc_r+0x22>
 800543c:	1b9b      	subs	r3, r3, r6
 800543e:	50a3      	str	r3, [r4, r2]
 8005440:	e7b3      	b.n	80053aa <_malloc_r+0x22>
 8005442:	6862      	ldr	r2, [r4, #4]
 8005444:	42a3      	cmp	r3, r4
 8005446:	bf0c      	ite	eq
 8005448:	6032      	streq	r2, [r6, #0]
 800544a:	605a      	strne	r2, [r3, #4]
 800544c:	e7ec      	b.n	8005428 <_malloc_r+0xa0>
 800544e:	4623      	mov	r3, r4
 8005450:	6864      	ldr	r4, [r4, #4]
 8005452:	e7b2      	b.n	80053ba <_malloc_r+0x32>
 8005454:	4634      	mov	r4, r6
 8005456:	6876      	ldr	r6, [r6, #4]
 8005458:	e7b9      	b.n	80053ce <_malloc_r+0x46>
 800545a:	230c      	movs	r3, #12
 800545c:	603b      	str	r3, [r7, #0]
 800545e:	4638      	mov	r0, r7
 8005460:	f000 f8c8 	bl	80055f4 <__malloc_unlock>
 8005464:	e7a1      	b.n	80053aa <_malloc_r+0x22>
 8005466:	6025      	str	r5, [r4, #0]
 8005468:	e7de      	b.n	8005428 <_malloc_r+0xa0>
 800546a:	bf00      	nop
 800546c:	20000290 	.word	0x20000290

08005470 <_sbrk_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_sbrk_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fe7e 	bl	800117c <_sbrk>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_sbrk_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_sbrk_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000298 	.word	0x20000298

08005490 <siprintf>:
 8005490:	b40e      	push	{r1, r2, r3}
 8005492:	b500      	push	{lr}
 8005494:	b09c      	sub	sp, #112	; 0x70
 8005496:	ab1d      	add	r3, sp, #116	; 0x74
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	9006      	str	r0, [sp, #24]
 800549c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054a0:	4809      	ldr	r0, [pc, #36]	; (80054c8 <siprintf+0x38>)
 80054a2:	9107      	str	r1, [sp, #28]
 80054a4:	9104      	str	r1, [sp, #16]
 80054a6:	4909      	ldr	r1, [pc, #36]	; (80054cc <siprintf+0x3c>)
 80054a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ac:	9105      	str	r1, [sp, #20]
 80054ae:	6800      	ldr	r0, [r0, #0]
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	a902      	add	r1, sp, #8
 80054b4:	f000 f900 	bl	80056b8 <_svfiprintf_r>
 80054b8:	9b02      	ldr	r3, [sp, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	b01c      	add	sp, #112	; 0x70
 80054c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054c4:	b003      	add	sp, #12
 80054c6:	4770      	bx	lr
 80054c8:	20000074 	.word	0x20000074
 80054cc:	ffff0208 	.word	0xffff0208

080054d0 <_strtol_l.constprop.0>:
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d6:	d001      	beq.n	80054dc <_strtol_l.constprop.0+0xc>
 80054d8:	2b24      	cmp	r3, #36	; 0x24
 80054da:	d906      	bls.n	80054ea <_strtol_l.constprop.0+0x1a>
 80054dc:	f7ff feb6 	bl	800524c <__errno>
 80054e0:	2316      	movs	r3, #22
 80054e2:	6003      	str	r3, [r0, #0]
 80054e4:	2000      	movs	r0, #0
 80054e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80055d0 <_strtol_l.constprop.0+0x100>
 80054ee:	460d      	mov	r5, r1
 80054f0:	462e      	mov	r6, r5
 80054f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80054fa:	f017 0708 	ands.w	r7, r7, #8
 80054fe:	d1f7      	bne.n	80054f0 <_strtol_l.constprop.0+0x20>
 8005500:	2c2d      	cmp	r4, #45	; 0x2d
 8005502:	d132      	bne.n	800556a <_strtol_l.constprop.0+0x9a>
 8005504:	782c      	ldrb	r4, [r5, #0]
 8005506:	2701      	movs	r7, #1
 8005508:	1cb5      	adds	r5, r6, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d05b      	beq.n	80055c6 <_strtol_l.constprop.0+0xf6>
 800550e:	2b10      	cmp	r3, #16
 8005510:	d109      	bne.n	8005526 <_strtol_l.constprop.0+0x56>
 8005512:	2c30      	cmp	r4, #48	; 0x30
 8005514:	d107      	bne.n	8005526 <_strtol_l.constprop.0+0x56>
 8005516:	782c      	ldrb	r4, [r5, #0]
 8005518:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800551c:	2c58      	cmp	r4, #88	; 0x58
 800551e:	d14d      	bne.n	80055bc <_strtol_l.constprop.0+0xec>
 8005520:	786c      	ldrb	r4, [r5, #1]
 8005522:	2310      	movs	r3, #16
 8005524:	3502      	adds	r5, #2
 8005526:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800552a:	f108 38ff 	add.w	r8, r8, #4294967295
 800552e:	f04f 0c00 	mov.w	ip, #0
 8005532:	fbb8 f9f3 	udiv	r9, r8, r3
 8005536:	4666      	mov	r6, ip
 8005538:	fb03 8a19 	mls	sl, r3, r9, r8
 800553c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005540:	f1be 0f09 	cmp.w	lr, #9
 8005544:	d816      	bhi.n	8005574 <_strtol_l.constprop.0+0xa4>
 8005546:	4674      	mov	r4, lr
 8005548:	42a3      	cmp	r3, r4
 800554a:	dd24      	ble.n	8005596 <_strtol_l.constprop.0+0xc6>
 800554c:	f1bc 0f00 	cmp.w	ip, #0
 8005550:	db1e      	blt.n	8005590 <_strtol_l.constprop.0+0xc0>
 8005552:	45b1      	cmp	r9, r6
 8005554:	d31c      	bcc.n	8005590 <_strtol_l.constprop.0+0xc0>
 8005556:	d101      	bne.n	800555c <_strtol_l.constprop.0+0x8c>
 8005558:	45a2      	cmp	sl, r4
 800555a:	db19      	blt.n	8005590 <_strtol_l.constprop.0+0xc0>
 800555c:	fb06 4603 	mla	r6, r6, r3, r4
 8005560:	f04f 0c01 	mov.w	ip, #1
 8005564:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005568:	e7e8      	b.n	800553c <_strtol_l.constprop.0+0x6c>
 800556a:	2c2b      	cmp	r4, #43	; 0x2b
 800556c:	bf04      	itt	eq
 800556e:	782c      	ldrbeq	r4, [r5, #0]
 8005570:	1cb5      	addeq	r5, r6, #2
 8005572:	e7ca      	b.n	800550a <_strtol_l.constprop.0+0x3a>
 8005574:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005578:	f1be 0f19 	cmp.w	lr, #25
 800557c:	d801      	bhi.n	8005582 <_strtol_l.constprop.0+0xb2>
 800557e:	3c37      	subs	r4, #55	; 0x37
 8005580:	e7e2      	b.n	8005548 <_strtol_l.constprop.0+0x78>
 8005582:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005586:	f1be 0f19 	cmp.w	lr, #25
 800558a:	d804      	bhi.n	8005596 <_strtol_l.constprop.0+0xc6>
 800558c:	3c57      	subs	r4, #87	; 0x57
 800558e:	e7db      	b.n	8005548 <_strtol_l.constprop.0+0x78>
 8005590:	f04f 3cff 	mov.w	ip, #4294967295
 8005594:	e7e6      	b.n	8005564 <_strtol_l.constprop.0+0x94>
 8005596:	f1bc 0f00 	cmp.w	ip, #0
 800559a:	da05      	bge.n	80055a8 <_strtol_l.constprop.0+0xd8>
 800559c:	2322      	movs	r3, #34	; 0x22
 800559e:	6003      	str	r3, [r0, #0]
 80055a0:	4646      	mov	r6, r8
 80055a2:	b942      	cbnz	r2, 80055b6 <_strtol_l.constprop.0+0xe6>
 80055a4:	4630      	mov	r0, r6
 80055a6:	e79e      	b.n	80054e6 <_strtol_l.constprop.0+0x16>
 80055a8:	b107      	cbz	r7, 80055ac <_strtol_l.constprop.0+0xdc>
 80055aa:	4276      	negs	r6, r6
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	d0f9      	beq.n	80055a4 <_strtol_l.constprop.0+0xd4>
 80055b0:	f1bc 0f00 	cmp.w	ip, #0
 80055b4:	d000      	beq.n	80055b8 <_strtol_l.constprop.0+0xe8>
 80055b6:	1e69      	subs	r1, r5, #1
 80055b8:	6011      	str	r1, [r2, #0]
 80055ba:	e7f3      	b.n	80055a4 <_strtol_l.constprop.0+0xd4>
 80055bc:	2430      	movs	r4, #48	; 0x30
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1b1      	bne.n	8005526 <_strtol_l.constprop.0+0x56>
 80055c2:	2308      	movs	r3, #8
 80055c4:	e7af      	b.n	8005526 <_strtol_l.constprop.0+0x56>
 80055c6:	2c30      	cmp	r4, #48	; 0x30
 80055c8:	d0a5      	beq.n	8005516 <_strtol_l.constprop.0+0x46>
 80055ca:	230a      	movs	r3, #10
 80055cc:	e7ab      	b.n	8005526 <_strtol_l.constprop.0+0x56>
 80055ce:	bf00      	nop
 80055d0:	08005e25 	.word	0x08005e25

080055d4 <strtol>:
 80055d4:	4613      	mov	r3, r2
 80055d6:	460a      	mov	r2, r1
 80055d8:	4601      	mov	r1, r0
 80055da:	4802      	ldr	r0, [pc, #8]	; (80055e4 <strtol+0x10>)
 80055dc:	6800      	ldr	r0, [r0, #0]
 80055de:	f7ff bf77 	b.w	80054d0 <_strtol_l.constprop.0>
 80055e2:	bf00      	nop
 80055e4:	20000074 	.word	0x20000074

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f000 baf9 	b.w	8005be0 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	2000029c 	.word	0x2000029c

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f000 baf4 	b.w	8005be2 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	2000029c 	.word	0x2000029c

08005600 <__ssputs_r>:
 8005600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	688e      	ldr	r6, [r1, #8]
 8005606:	429e      	cmp	r6, r3
 8005608:	4682      	mov	sl, r0
 800560a:	460c      	mov	r4, r1
 800560c:	4690      	mov	r8, r2
 800560e:	461f      	mov	r7, r3
 8005610:	d838      	bhi.n	8005684 <__ssputs_r+0x84>
 8005612:	898a      	ldrh	r2, [r1, #12]
 8005614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005618:	d032      	beq.n	8005680 <__ssputs_r+0x80>
 800561a:	6825      	ldr	r5, [r4, #0]
 800561c:	6909      	ldr	r1, [r1, #16]
 800561e:	eba5 0901 	sub.w	r9, r5, r1
 8005622:	6965      	ldr	r5, [r4, #20]
 8005624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800562c:	3301      	adds	r3, #1
 800562e:	444b      	add	r3, r9
 8005630:	106d      	asrs	r5, r5, #1
 8005632:	429d      	cmp	r5, r3
 8005634:	bf38      	it	cc
 8005636:	461d      	movcc	r5, r3
 8005638:	0553      	lsls	r3, r2, #21
 800563a:	d531      	bpl.n	80056a0 <__ssputs_r+0xa0>
 800563c:	4629      	mov	r1, r5
 800563e:	f7ff fea3 	bl	8005388 <_malloc_r>
 8005642:	4606      	mov	r6, r0
 8005644:	b950      	cbnz	r0, 800565c <__ssputs_r+0x5c>
 8005646:	230c      	movs	r3, #12
 8005648:	f8ca 3000 	str.w	r3, [sl]
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	f04f 30ff 	mov.w	r0, #4294967295
 8005658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565c:	6921      	ldr	r1, [r4, #16]
 800565e:	464a      	mov	r2, r9
 8005660:	f000 fac0 	bl	8005be4 <memcpy>
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	6126      	str	r6, [r4, #16]
 8005672:	6165      	str	r5, [r4, #20]
 8005674:	444e      	add	r6, r9
 8005676:	eba5 0509 	sub.w	r5, r5, r9
 800567a:	6026      	str	r6, [r4, #0]
 800567c:	60a5      	str	r5, [r4, #8]
 800567e:	463e      	mov	r6, r7
 8005680:	42be      	cmp	r6, r7
 8005682:	d900      	bls.n	8005686 <__ssputs_r+0x86>
 8005684:	463e      	mov	r6, r7
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	4632      	mov	r2, r6
 800568a:	4641      	mov	r1, r8
 800568c:	f000 fab8 	bl	8005c00 <memmove>
 8005690:	68a3      	ldr	r3, [r4, #8]
 8005692:	1b9b      	subs	r3, r3, r6
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	4433      	add	r3, r6
 800569a:	6023      	str	r3, [r4, #0]
 800569c:	2000      	movs	r0, #0
 800569e:	e7db      	b.n	8005658 <__ssputs_r+0x58>
 80056a0:	462a      	mov	r2, r5
 80056a2:	f000 fac7 	bl	8005c34 <_realloc_r>
 80056a6:	4606      	mov	r6, r0
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d1e1      	bne.n	8005670 <__ssputs_r+0x70>
 80056ac:	6921      	ldr	r1, [r4, #16]
 80056ae:	4650      	mov	r0, sl
 80056b0:	f7ff fdfe 	bl	80052b0 <_free_r>
 80056b4:	e7c7      	b.n	8005646 <__ssputs_r+0x46>
	...

080056b8 <_svfiprintf_r>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	4698      	mov	r8, r3
 80056be:	898b      	ldrh	r3, [r1, #12]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	b09d      	sub	sp, #116	; 0x74
 80056c4:	4607      	mov	r7, r0
 80056c6:	460d      	mov	r5, r1
 80056c8:	4614      	mov	r4, r2
 80056ca:	d50e      	bpl.n	80056ea <_svfiprintf_r+0x32>
 80056cc:	690b      	ldr	r3, [r1, #16]
 80056ce:	b963      	cbnz	r3, 80056ea <_svfiprintf_r+0x32>
 80056d0:	2140      	movs	r1, #64	; 0x40
 80056d2:	f7ff fe59 	bl	8005388 <_malloc_r>
 80056d6:	6028      	str	r0, [r5, #0]
 80056d8:	6128      	str	r0, [r5, #16]
 80056da:	b920      	cbnz	r0, 80056e6 <_svfiprintf_r+0x2e>
 80056dc:	230c      	movs	r3, #12
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295
 80056e4:	e0d1      	b.n	800588a <_svfiprintf_r+0x1d2>
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	616b      	str	r3, [r5, #20]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
 80056ee:	2320      	movs	r3, #32
 80056f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f8:	2330      	movs	r3, #48	; 0x30
 80056fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058a4 <_svfiprintf_r+0x1ec>
 80056fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005702:	f04f 0901 	mov.w	r9, #1
 8005706:	4623      	mov	r3, r4
 8005708:	469a      	mov	sl, r3
 800570a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570e:	b10a      	cbz	r2, 8005714 <_svfiprintf_r+0x5c>
 8005710:	2a25      	cmp	r2, #37	; 0x25
 8005712:	d1f9      	bne.n	8005708 <_svfiprintf_r+0x50>
 8005714:	ebba 0b04 	subs.w	fp, sl, r4
 8005718:	d00b      	beq.n	8005732 <_svfiprintf_r+0x7a>
 800571a:	465b      	mov	r3, fp
 800571c:	4622      	mov	r2, r4
 800571e:	4629      	mov	r1, r5
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ff6d 	bl	8005600 <__ssputs_r>
 8005726:	3001      	adds	r0, #1
 8005728:	f000 80aa 	beq.w	8005880 <_svfiprintf_r+0x1c8>
 800572c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572e:	445a      	add	r2, fp
 8005730:	9209      	str	r2, [sp, #36]	; 0x24
 8005732:	f89a 3000 	ldrb.w	r3, [sl]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80a2 	beq.w	8005880 <_svfiprintf_r+0x1c8>
 800573c:	2300      	movs	r3, #0
 800573e:	f04f 32ff 	mov.w	r2, #4294967295
 8005742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005746:	f10a 0a01 	add.w	sl, sl, #1
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	9307      	str	r3, [sp, #28]
 800574e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005752:	931a      	str	r3, [sp, #104]	; 0x68
 8005754:	4654      	mov	r4, sl
 8005756:	2205      	movs	r2, #5
 8005758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575c:	4851      	ldr	r0, [pc, #324]	; (80058a4 <_svfiprintf_r+0x1ec>)
 800575e:	f7fa fd47 	bl	80001f0 <memchr>
 8005762:	9a04      	ldr	r2, [sp, #16]
 8005764:	b9d8      	cbnz	r0, 800579e <_svfiprintf_r+0xe6>
 8005766:	06d0      	lsls	r0, r2, #27
 8005768:	bf44      	itt	mi
 800576a:	2320      	movmi	r3, #32
 800576c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005770:	0711      	lsls	r1, r2, #28
 8005772:	bf44      	itt	mi
 8005774:	232b      	movmi	r3, #43	; 0x2b
 8005776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800577a:	f89a 3000 	ldrb.w	r3, [sl]
 800577e:	2b2a      	cmp	r3, #42	; 0x2a
 8005780:	d015      	beq.n	80057ae <_svfiprintf_r+0xf6>
 8005782:	9a07      	ldr	r2, [sp, #28]
 8005784:	4654      	mov	r4, sl
 8005786:	2000      	movs	r0, #0
 8005788:	f04f 0c0a 	mov.w	ip, #10
 800578c:	4621      	mov	r1, r4
 800578e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005792:	3b30      	subs	r3, #48	; 0x30
 8005794:	2b09      	cmp	r3, #9
 8005796:	d94e      	bls.n	8005836 <_svfiprintf_r+0x17e>
 8005798:	b1b0      	cbz	r0, 80057c8 <_svfiprintf_r+0x110>
 800579a:	9207      	str	r2, [sp, #28]
 800579c:	e014      	b.n	80057c8 <_svfiprintf_r+0x110>
 800579e:	eba0 0308 	sub.w	r3, r0, r8
 80057a2:	fa09 f303 	lsl.w	r3, r9, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	46a2      	mov	sl, r4
 80057ac:	e7d2      	b.n	8005754 <_svfiprintf_r+0x9c>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	1d19      	adds	r1, r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	9103      	str	r1, [sp, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bfbb      	ittet	lt
 80057ba:	425b      	neglt	r3, r3
 80057bc:	f042 0202 	orrlt.w	r2, r2, #2
 80057c0:	9307      	strge	r3, [sp, #28]
 80057c2:	9307      	strlt	r3, [sp, #28]
 80057c4:	bfb8      	it	lt
 80057c6:	9204      	strlt	r2, [sp, #16]
 80057c8:	7823      	ldrb	r3, [r4, #0]
 80057ca:	2b2e      	cmp	r3, #46	; 0x2e
 80057cc:	d10c      	bne.n	80057e8 <_svfiprintf_r+0x130>
 80057ce:	7863      	ldrb	r3, [r4, #1]
 80057d0:	2b2a      	cmp	r3, #42	; 0x2a
 80057d2:	d135      	bne.n	8005840 <_svfiprintf_r+0x188>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	9203      	str	r2, [sp, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfb8      	it	lt
 80057e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e4:	3402      	adds	r4, #2
 80057e6:	9305      	str	r3, [sp, #20]
 80057e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058b4 <_svfiprintf_r+0x1fc>
 80057ec:	7821      	ldrb	r1, [r4, #0]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4650      	mov	r0, sl
 80057f2:	f7fa fcfd 	bl	80001f0 <memchr>
 80057f6:	b140      	cbz	r0, 800580a <_svfiprintf_r+0x152>
 80057f8:	2340      	movs	r3, #64	; 0x40
 80057fa:	eba0 000a 	sub.w	r0, r0, sl
 80057fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005802:	9b04      	ldr	r3, [sp, #16]
 8005804:	4303      	orrs	r3, r0
 8005806:	3401      	adds	r4, #1
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800580e:	4826      	ldr	r0, [pc, #152]	; (80058a8 <_svfiprintf_r+0x1f0>)
 8005810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005814:	2206      	movs	r2, #6
 8005816:	f7fa fceb 	bl	80001f0 <memchr>
 800581a:	2800      	cmp	r0, #0
 800581c:	d038      	beq.n	8005890 <_svfiprintf_r+0x1d8>
 800581e:	4b23      	ldr	r3, [pc, #140]	; (80058ac <_svfiprintf_r+0x1f4>)
 8005820:	bb1b      	cbnz	r3, 800586a <_svfiprintf_r+0x1b2>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	3307      	adds	r3, #7
 8005826:	f023 0307 	bic.w	r3, r3, #7
 800582a:	3308      	adds	r3, #8
 800582c:	9303      	str	r3, [sp, #12]
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	4433      	add	r3, r6
 8005832:	9309      	str	r3, [sp, #36]	; 0x24
 8005834:	e767      	b.n	8005706 <_svfiprintf_r+0x4e>
 8005836:	fb0c 3202 	mla	r2, ip, r2, r3
 800583a:	460c      	mov	r4, r1
 800583c:	2001      	movs	r0, #1
 800583e:	e7a5      	b.n	800578c <_svfiprintf_r+0xd4>
 8005840:	2300      	movs	r3, #0
 8005842:	3401      	adds	r4, #1
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	4619      	mov	r1, r3
 8005848:	f04f 0c0a 	mov.w	ip, #10
 800584c:	4620      	mov	r0, r4
 800584e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005852:	3a30      	subs	r2, #48	; 0x30
 8005854:	2a09      	cmp	r2, #9
 8005856:	d903      	bls.n	8005860 <_svfiprintf_r+0x1a8>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0c5      	beq.n	80057e8 <_svfiprintf_r+0x130>
 800585c:	9105      	str	r1, [sp, #20]
 800585e:	e7c3      	b.n	80057e8 <_svfiprintf_r+0x130>
 8005860:	fb0c 2101 	mla	r1, ip, r1, r2
 8005864:	4604      	mov	r4, r0
 8005866:	2301      	movs	r3, #1
 8005868:	e7f0      	b.n	800584c <_svfiprintf_r+0x194>
 800586a:	ab03      	add	r3, sp, #12
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462a      	mov	r2, r5
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <_svfiprintf_r+0x1f8>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	4638      	mov	r0, r7
 8005876:	f3af 8000 	nop.w
 800587a:	1c42      	adds	r2, r0, #1
 800587c:	4606      	mov	r6, r0
 800587e:	d1d6      	bne.n	800582e <_svfiprintf_r+0x176>
 8005880:	89ab      	ldrh	r3, [r5, #12]
 8005882:	065b      	lsls	r3, r3, #25
 8005884:	f53f af2c 	bmi.w	80056e0 <_svfiprintf_r+0x28>
 8005888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800588a:	b01d      	add	sp, #116	; 0x74
 800588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005890:	ab03      	add	r3, sp, #12
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	462a      	mov	r2, r5
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <_svfiprintf_r+0x1f8>)
 8005898:	a904      	add	r1, sp, #16
 800589a:	4638      	mov	r0, r7
 800589c:	f000 f87a 	bl	8005994 <_printf_i>
 80058a0:	e7eb      	b.n	800587a <_svfiprintf_r+0x1c2>
 80058a2:	bf00      	nop
 80058a4:	08005f25 	.word	0x08005f25
 80058a8:	08005f2f 	.word	0x08005f2f
 80058ac:	00000000 	.word	0x00000000
 80058b0:	08005601 	.word	0x08005601
 80058b4:	08005f2b 	.word	0x08005f2b

080058b8 <_printf_common>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	4616      	mov	r6, r2
 80058be:	4699      	mov	r9, r3
 80058c0:	688a      	ldr	r2, [r1, #8]
 80058c2:	690b      	ldr	r3, [r1, #16]
 80058c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	bfb8      	it	lt
 80058cc:	4613      	movlt	r3, r2
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058d4:	4607      	mov	r7, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	b10a      	cbz	r2, 80058de <_printf_common+0x26>
 80058da:	3301      	adds	r3, #1
 80058dc:	6033      	str	r3, [r6, #0]
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	0699      	lsls	r1, r3, #26
 80058e2:	bf42      	ittt	mi
 80058e4:	6833      	ldrmi	r3, [r6, #0]
 80058e6:	3302      	addmi	r3, #2
 80058e8:	6033      	strmi	r3, [r6, #0]
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	f015 0506 	ands.w	r5, r5, #6
 80058f0:	d106      	bne.n	8005900 <_printf_common+0x48>
 80058f2:	f104 0a19 	add.w	sl, r4, #25
 80058f6:	68e3      	ldr	r3, [r4, #12]
 80058f8:	6832      	ldr	r2, [r6, #0]
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	dc26      	bgt.n	800594e <_printf_common+0x96>
 8005900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005904:	1e13      	subs	r3, r2, #0
 8005906:	6822      	ldr	r2, [r4, #0]
 8005908:	bf18      	it	ne
 800590a:	2301      	movne	r3, #1
 800590c:	0692      	lsls	r2, r2, #26
 800590e:	d42b      	bmi.n	8005968 <_printf_common+0xb0>
 8005910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005914:	4649      	mov	r1, r9
 8005916:	4638      	mov	r0, r7
 8005918:	47c0      	blx	r8
 800591a:	3001      	adds	r0, #1
 800591c:	d01e      	beq.n	800595c <_printf_common+0xa4>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	68e5      	ldr	r5, [r4, #12]
 8005922:	6832      	ldr	r2, [r6, #0]
 8005924:	f003 0306 	and.w	r3, r3, #6
 8005928:	2b04      	cmp	r3, #4
 800592a:	bf08      	it	eq
 800592c:	1aad      	subeq	r5, r5, r2
 800592e:	68a3      	ldr	r3, [r4, #8]
 8005930:	6922      	ldr	r2, [r4, #16]
 8005932:	bf0c      	ite	eq
 8005934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005938:	2500      	movne	r5, #0
 800593a:	4293      	cmp	r3, r2
 800593c:	bfc4      	itt	gt
 800593e:	1a9b      	subgt	r3, r3, r2
 8005940:	18ed      	addgt	r5, r5, r3
 8005942:	2600      	movs	r6, #0
 8005944:	341a      	adds	r4, #26
 8005946:	42b5      	cmp	r5, r6
 8005948:	d11a      	bne.n	8005980 <_printf_common+0xc8>
 800594a:	2000      	movs	r0, #0
 800594c:	e008      	b.n	8005960 <_printf_common+0xa8>
 800594e:	2301      	movs	r3, #1
 8005950:	4652      	mov	r2, sl
 8005952:	4649      	mov	r1, r9
 8005954:	4638      	mov	r0, r7
 8005956:	47c0      	blx	r8
 8005958:	3001      	adds	r0, #1
 800595a:	d103      	bne.n	8005964 <_printf_common+0xac>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	3501      	adds	r5, #1
 8005966:	e7c6      	b.n	80058f6 <_printf_common+0x3e>
 8005968:	18e1      	adds	r1, r4, r3
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	2030      	movs	r0, #48	; 0x30
 800596e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005972:	4422      	add	r2, r4
 8005974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800597c:	3302      	adds	r3, #2
 800597e:	e7c7      	b.n	8005910 <_printf_common+0x58>
 8005980:	2301      	movs	r3, #1
 8005982:	4622      	mov	r2, r4
 8005984:	4649      	mov	r1, r9
 8005986:	4638      	mov	r0, r7
 8005988:	47c0      	blx	r8
 800598a:	3001      	adds	r0, #1
 800598c:	d0e6      	beq.n	800595c <_printf_common+0xa4>
 800598e:	3601      	adds	r6, #1
 8005990:	e7d9      	b.n	8005946 <_printf_common+0x8e>
	...

08005994 <_printf_i>:
 8005994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005998:	7e0f      	ldrb	r7, [r1, #24]
 800599a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800599c:	2f78      	cmp	r7, #120	; 0x78
 800599e:	4691      	mov	r9, r2
 80059a0:	4680      	mov	r8, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	469a      	mov	sl, r3
 80059a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059aa:	d807      	bhi.n	80059bc <_printf_i+0x28>
 80059ac:	2f62      	cmp	r7, #98	; 0x62
 80059ae:	d80a      	bhi.n	80059c6 <_printf_i+0x32>
 80059b0:	2f00      	cmp	r7, #0
 80059b2:	f000 80d8 	beq.w	8005b66 <_printf_i+0x1d2>
 80059b6:	2f58      	cmp	r7, #88	; 0x58
 80059b8:	f000 80a3 	beq.w	8005b02 <_printf_i+0x16e>
 80059bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c4:	e03a      	b.n	8005a3c <_printf_i+0xa8>
 80059c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ca:	2b15      	cmp	r3, #21
 80059cc:	d8f6      	bhi.n	80059bc <_printf_i+0x28>
 80059ce:	a101      	add	r1, pc, #4	; (adr r1, 80059d4 <_printf_i+0x40>)
 80059d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d4:	08005a2d 	.word	0x08005a2d
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	080059bd 	.word	0x080059bd
 80059e0:	080059bd 	.word	0x080059bd
 80059e4:	080059bd 	.word	0x080059bd
 80059e8:	080059bd 	.word	0x080059bd
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	080059bd 	.word	0x080059bd
 80059f4:	080059bd 	.word	0x080059bd
 80059f8:	080059bd 	.word	0x080059bd
 80059fc:	080059bd 	.word	0x080059bd
 8005a00:	08005b4d 	.word	0x08005b4d
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005b2f 	.word	0x08005b2f
 8005a0c:	080059bd 	.word	0x080059bd
 8005a10:	080059bd 	.word	0x080059bd
 8005a14:	08005b6f 	.word	0x08005b6f
 8005a18:	080059bd 	.word	0x080059bd
 8005a1c:	08005a71 	.word	0x08005a71
 8005a20:	080059bd 	.word	0x080059bd
 8005a24:	080059bd 	.word	0x080059bd
 8005a28:	08005b37 	.word	0x08005b37
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	602a      	str	r2, [r5, #0]
 8005a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0a3      	b.n	8005b88 <_printf_i+0x1f4>
 8005a40:	6820      	ldr	r0, [r4, #0]
 8005a42:	6829      	ldr	r1, [r5, #0]
 8005a44:	0606      	lsls	r6, r0, #24
 8005a46:	f101 0304 	add.w	r3, r1, #4
 8005a4a:	d50a      	bpl.n	8005a62 <_printf_i+0xce>
 8005a4c:	680e      	ldr	r6, [r1, #0]
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	da03      	bge.n	8005a5c <_printf_i+0xc8>
 8005a54:	232d      	movs	r3, #45	; 0x2d
 8005a56:	4276      	negs	r6, r6
 8005a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a5c:	485e      	ldr	r0, [pc, #376]	; (8005bd8 <_printf_i+0x244>)
 8005a5e:	230a      	movs	r3, #10
 8005a60:	e019      	b.n	8005a96 <_printf_i+0x102>
 8005a62:	680e      	ldr	r6, [r1, #0]
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a6a:	bf18      	it	ne
 8005a6c:	b236      	sxthne	r6, r6
 8005a6e:	e7ef      	b.n	8005a50 <_printf_i+0xbc>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	1d19      	adds	r1, r3, #4
 8005a76:	6029      	str	r1, [r5, #0]
 8005a78:	0601      	lsls	r1, r0, #24
 8005a7a:	d501      	bpl.n	8005a80 <_printf_i+0xec>
 8005a7c:	681e      	ldr	r6, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <_printf_i+0xf2>
 8005a80:	0646      	lsls	r6, r0, #25
 8005a82:	d5fb      	bpl.n	8005a7c <_printf_i+0xe8>
 8005a84:	881e      	ldrh	r6, [r3, #0]
 8005a86:	4854      	ldr	r0, [pc, #336]	; (8005bd8 <_printf_i+0x244>)
 8005a88:	2f6f      	cmp	r7, #111	; 0x6f
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2308      	moveq	r3, #8
 8005a8e:	230a      	movne	r3, #10
 8005a90:	2100      	movs	r1, #0
 8005a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a96:	6865      	ldr	r5, [r4, #4]
 8005a98:	60a5      	str	r5, [r4, #8]
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	bfa2      	ittt	ge
 8005a9e:	6821      	ldrge	r1, [r4, #0]
 8005aa0:	f021 0104 	bicge.w	r1, r1, #4
 8005aa4:	6021      	strge	r1, [r4, #0]
 8005aa6:	b90e      	cbnz	r6, 8005aac <_printf_i+0x118>
 8005aa8:	2d00      	cmp	r5, #0
 8005aaa:	d04d      	beq.n	8005b48 <_printf_i+0x1b4>
 8005aac:	4615      	mov	r5, r2
 8005aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8005ab6:	5dc7      	ldrb	r7, [r0, r7]
 8005ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005abc:	4637      	mov	r7, r6
 8005abe:	42bb      	cmp	r3, r7
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	d9f4      	bls.n	8005aae <_printf_i+0x11a>
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d10b      	bne.n	8005ae0 <_printf_i+0x14c>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07de      	lsls	r6, r3, #31
 8005acc:	d508      	bpl.n	8005ae0 <_printf_i+0x14c>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	6861      	ldr	r1, [r4, #4]
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	bfde      	ittt	le
 8005ad6:	2330      	movle	r3, #48	; 0x30
 8005ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ae0:	1b52      	subs	r2, r2, r5
 8005ae2:	6122      	str	r2, [r4, #16]
 8005ae4:	f8cd a000 	str.w	sl, [sp]
 8005ae8:	464b      	mov	r3, r9
 8005aea:	aa03      	add	r2, sp, #12
 8005aec:	4621      	mov	r1, r4
 8005aee:	4640      	mov	r0, r8
 8005af0:	f7ff fee2 	bl	80058b8 <_printf_common>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d14c      	bne.n	8005b92 <_printf_i+0x1fe>
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295
 8005afc:	b004      	add	sp, #16
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b02:	4835      	ldr	r0, [pc, #212]	; (8005bd8 <_printf_i+0x244>)
 8005b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b08:	6829      	ldr	r1, [r5, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b10:	6029      	str	r1, [r5, #0]
 8005b12:	061d      	lsls	r5, r3, #24
 8005b14:	d514      	bpl.n	8005b40 <_printf_i+0x1ac>
 8005b16:	07df      	lsls	r7, r3, #31
 8005b18:	bf44      	itt	mi
 8005b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b1e:	6023      	strmi	r3, [r4, #0]
 8005b20:	b91e      	cbnz	r6, 8005b2a <_printf_i+0x196>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	f023 0320 	bic.w	r3, r3, #32
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	e7b0      	b.n	8005a90 <_printf_i+0xfc>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f043 0320 	orr.w	r3, r3, #32
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	2378      	movs	r3, #120	; 0x78
 8005b38:	4828      	ldr	r0, [pc, #160]	; (8005bdc <_printf_i+0x248>)
 8005b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b3e:	e7e3      	b.n	8005b08 <_printf_i+0x174>
 8005b40:	0659      	lsls	r1, r3, #25
 8005b42:	bf48      	it	mi
 8005b44:	b2b6      	uxthmi	r6, r6
 8005b46:	e7e6      	b.n	8005b16 <_printf_i+0x182>
 8005b48:	4615      	mov	r5, r2
 8005b4a:	e7bb      	b.n	8005ac4 <_printf_i+0x130>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6826      	ldr	r6, [r4, #0]
 8005b50:	6961      	ldr	r1, [r4, #20]
 8005b52:	1d18      	adds	r0, r3, #4
 8005b54:	6028      	str	r0, [r5, #0]
 8005b56:	0635      	lsls	r5, r6, #24
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0x1cc>
 8005b5c:	6019      	str	r1, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <_printf_i+0x1d2>
 8005b60:	0670      	lsls	r0, r6, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0x1c8>
 8005b64:	8019      	strh	r1, [r3, #0]
 8005b66:	2300      	movs	r3, #0
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	4615      	mov	r5, r2
 8005b6c:	e7ba      	b.n	8005ae4 <_printf_i+0x150>
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	602a      	str	r2, [r5, #0]
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7fa fb38 	bl	80001f0 <memchr>
 8005b80:	b108      	cbz	r0, 8005b86 <_printf_i+0x1f2>
 8005b82:	1b40      	subs	r0, r0, r5
 8005b84:	6060      	str	r0, [r4, #4]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b90:	e7a8      	b.n	8005ae4 <_printf_i+0x150>
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	462a      	mov	r2, r5
 8005b96:	4649      	mov	r1, r9
 8005b98:	4640      	mov	r0, r8
 8005b9a:	47d0      	blx	sl
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d0ab      	beq.n	8005af8 <_printf_i+0x164>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	079b      	lsls	r3, r3, #30
 8005ba4:	d413      	bmi.n	8005bce <_printf_i+0x23a>
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	4298      	cmp	r0, r3
 8005bac:	bfb8      	it	lt
 8005bae:	4618      	movlt	r0, r3
 8005bb0:	e7a4      	b.n	8005afc <_printf_i+0x168>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	4640      	mov	r0, r8
 8005bba:	47d0      	blx	sl
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d09b      	beq.n	8005af8 <_printf_i+0x164>
 8005bc0:	3501      	adds	r5, #1
 8005bc2:	68e3      	ldr	r3, [r4, #12]
 8005bc4:	9903      	ldr	r1, [sp, #12]
 8005bc6:	1a5b      	subs	r3, r3, r1
 8005bc8:	42ab      	cmp	r3, r5
 8005bca:	dcf2      	bgt.n	8005bb2 <_printf_i+0x21e>
 8005bcc:	e7eb      	b.n	8005ba6 <_printf_i+0x212>
 8005bce:	2500      	movs	r5, #0
 8005bd0:	f104 0619 	add.w	r6, r4, #25
 8005bd4:	e7f5      	b.n	8005bc2 <_printf_i+0x22e>
 8005bd6:	bf00      	nop
 8005bd8:	08005f36 	.word	0x08005f36
 8005bdc:	08005f47 	.word	0x08005f47

08005be0 <__retarget_lock_acquire_recursive>:
 8005be0:	4770      	bx	lr

08005be2 <__retarget_lock_release_recursive>:
 8005be2:	4770      	bx	lr

08005be4 <memcpy>:
 8005be4:	440a      	add	r2, r1
 8005be6:	4291      	cmp	r1, r2
 8005be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bec:	d100      	bne.n	8005bf0 <memcpy+0xc>
 8005bee:	4770      	bx	lr
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	d1f9      	bne.n	8005bf2 <memcpy+0xe>
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <memmove>:
 8005c00:	4288      	cmp	r0, r1
 8005c02:	b510      	push	{r4, lr}
 8005c04:	eb01 0402 	add.w	r4, r1, r2
 8005c08:	d902      	bls.n	8005c10 <memmove+0x10>
 8005c0a:	4284      	cmp	r4, r0
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	d807      	bhi.n	8005c20 <memmove+0x20>
 8005c10:	1e43      	subs	r3, r0, #1
 8005c12:	42a1      	cmp	r1, r4
 8005c14:	d008      	beq.n	8005c28 <memmove+0x28>
 8005c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c1e:	e7f8      	b.n	8005c12 <memmove+0x12>
 8005c20:	4402      	add	r2, r0
 8005c22:	4601      	mov	r1, r0
 8005c24:	428a      	cmp	r2, r1
 8005c26:	d100      	bne.n	8005c2a <memmove+0x2a>
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c32:	e7f7      	b.n	8005c24 <memmove+0x24>

08005c34 <_realloc_r>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	b921      	cbnz	r1, 8005c4a <_realloc_r+0x16>
 8005c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4611      	mov	r1, r2
 8005c46:	f7ff bb9f 	b.w	8005388 <_malloc_r>
 8005c4a:	b92a      	cbnz	r2, 8005c58 <_realloc_r+0x24>
 8005c4c:	f7ff fb30 	bl	80052b0 <_free_r>
 8005c50:	4625      	mov	r5, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	f000 f81b 	bl	8005c92 <_malloc_usable_size_r>
 8005c5c:	4284      	cmp	r4, r0
 8005c5e:	4607      	mov	r7, r0
 8005c60:	d802      	bhi.n	8005c68 <_realloc_r+0x34>
 8005c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c66:	d812      	bhi.n	8005c8e <_realloc_r+0x5a>
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff fb8c 	bl	8005388 <_malloc_r>
 8005c70:	4605      	mov	r5, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0ed      	beq.n	8005c52 <_realloc_r+0x1e>
 8005c76:	42bc      	cmp	r4, r7
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	bf28      	it	cs
 8005c7e:	463a      	movcs	r2, r7
 8005c80:	f7ff ffb0 	bl	8005be4 <memcpy>
 8005c84:	4631      	mov	r1, r6
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fb12 	bl	80052b0 <_free_r>
 8005c8c:	e7e1      	b.n	8005c52 <_realloc_r+0x1e>
 8005c8e:	4635      	mov	r5, r6
 8005c90:	e7df      	b.n	8005c52 <_realloc_r+0x1e>

08005c92 <_malloc_usable_size_r>:
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	1f18      	subs	r0, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfbc      	itt	lt
 8005c9c:	580b      	ldrlt	r3, [r1, r0]
 8005c9e:	18c0      	addlt	r0, r0, r3
 8005ca0:	4770      	bx	lr
	...

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
