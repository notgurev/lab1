
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005294  08005294  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020184  2**0
                  CONTENTS
 10 .bss          000005ac  20000184  20000184  00020184  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000730  20000730  00020184  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e50  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfe  00000000  00000000  0002a004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dc0  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acb6  00000000  00000000  0004fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0404  00000000  00000000  0005a736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ab3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002850  00000000  00000000  0012ab8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000184 	.word	0x20000184
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f64 	.word	0x08004f64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000188 	.word	0x20000188
 80001ec:	08004f64 	.word	0x08004f64

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_GPIO_Init+0xd4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <MX_GPIO_Init+0xd4>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_GPIO_Init+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <MX_GPIO_Init+0xd8>)
 8000652:	f001 fb15 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_GPIO_Init+0xdc>)
 800066c:	f001 f944 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000670:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0xd8>)
 800068a:	f001 f935 	bl	80018f8 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020c00 	.word	0x40020c00
 80006a0:	40020800 	.word	0x40020800

080006a4 <transmit_async>:
struct LastState last_state = {
    .state = { 0 },
    .elapsed_state_time = { 0 },
};

void transmit_async(const char * content) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	content_all = content;
 80006ac:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <transmit_async+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_IT(&huart6, (uint8_t *) content, strlen(content));
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fda6 	bl	8000204 <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <transmit_async+0x30>)
 80006c2:	f002 f8d0 	bl	8002866 <HAL_UART_Transmit_IT>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001e8 	.word	0x200001e8
 80006d4:	200006d8 	.word	0x200006d8

080006d8 <transmit>:

void transmit(const char * content) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *) content, strlen(content), UART_TIMEOUT);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fd8f 	bl	8000204 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	230a      	movs	r3, #10
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <transmit+0x24>)
 80006f0:	f001 ff85 	bl	80025fe <HAL_UART_Transmit>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200006d8 	.word	0x200006d8

08000700 <print>:

void print(const char * content) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if (is_interrupt_mode) {
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <print+0x28>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d003      	beq.n	8000718 <print+0x18>
		transmit_async(content);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ffc7 	bl	80006a4 <transmit_async>
	} else {
		transmit(content);
	}
}
 8000716:	e002      	b.n	800071e <print+0x1e>
		transmit(content);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffdd 	bl	80006d8 <transmit>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001e5 	.word	0x200001e5

0800072c <println>:

void println(const char * message) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	print(message);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ffe3 	bl	8000700 <print>
	print("\r\n");
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <println+0x1c>)
 800073c:	f7ff ffe0 	bl	8000700 <print>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08004f7c 	.word	0x08004f7c

0800074c <print_format>:

void print_format(const char * format, ...) {
 800074c:	b40f      	push	{r0, r1, r2, r3}
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
	static char buffer[1024];
	va_list ap;
	va_start(ap, format);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), format, ap);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <print_format+0x30>)
 8000764:	f003 fb22 	bl	8003dac <vsniprintf>
	va_end(ap);
	println(buffer);
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <print_format+0x30>)
 800076a:	f7ff ffdf 	bl	800072c <println>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr
 800077c:	2000023c 	.word	0x2000023c

08000780 <set_active_mode>:

void set_active_mode(uint8_t mode_number) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	led_functions[modes[cur_mode_code].states[last_state.state[cur_mode_code]].color](false);
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <set_active_mode+0x90>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <set_active_mode+0x90>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <set_active_mode+0x94>)
 8000798:	5c9b      	ldrb	r3, [r3, r2]
 800079a:	491f      	ldr	r1, [pc, #124]	; (8000818 <set_active_mode+0x98>)
 800079c:	009a      	lsls	r2, r3, #2
 800079e:	4603      	mov	r3, r0
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	4403      	add	r3, r0
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <set_active_mode+0x9c>)
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	2000      	movs	r0, #0
 80007b8:	4798      	blx	r3

	cur_mode_code = mode_number;
 80007ba:	4a15      	ldr	r2, [pc, #84]	; (8000810 <set_active_mode+0x90>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	7013      	strb	r3, [r2, #0]

	if (modes[cur_mode_code].len > 0) {
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <set_active_mode+0x90>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <set_active_mode+0x98>)
 80007c8:	460b      	mov	r3, r1
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	440b      	add	r3, r1
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d017      	beq.n	8000808 <set_active_mode+0x88>
		led_functions[modes[cur_mode_code].states[last_state.state[cur_mode_code]].color](true);
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <set_active_mode+0x90>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <set_active_mode+0x90>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <set_active_mode+0x94>)
 80007e6:	5c9b      	ldrb	r3, [r3, r2]
 80007e8:	490b      	ldr	r1, [pc, #44]	; (8000818 <set_active_mode+0x98>)
 80007ea:	009a      	lsls	r2, r3, #2
 80007ec:	4603      	mov	r3, r0
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	4403      	add	r3, r0
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	3302      	adds	r3, #2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <set_active_mode+0x9c>)
 8000800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000804:	2001      	movs	r0, #1
 8000806:	4798      	blx	r3
	}
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001e4 	.word	0x200001e4
 8000814:	20000214 	.word	0x20000214
 8000818:	20000004 	.word	0x20000004
 800081c:	080050b4 	.word	0x080050b4

08000820 <handle_set_command>:

bool handle_set_command() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	const char * const mode_idx_str = cmd + 4; // set pointer after 'new '
 8000826:	4b13      	ldr	r3, [pc, #76]	; (8000874 <handle_set_command+0x54>)
 8000828:	607b      	str	r3, [r7, #4]

	uint32_t mode_idx;
	if ((sscanf(mode_idx_str, "%lu", &mode_idx) != 1) || ((mode_idx < 1 || mode_idx > current_max_mode + 1) && mode_idx < MAX_MODES_COUNT)) {
 800082a:	463b      	mov	r3, r7
 800082c:	461a      	mov	r2, r3
 800082e:	4912      	ldr	r1, [pc, #72]	; (8000878 <handle_set_command+0x58>)
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f003 fa4d 	bl	8003cd0 <siscanf>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10c      	bne.n	8000856 <handle_set_command+0x36>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <handle_set_command+0x30>
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <handle_set_command+0x5c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	429a      	cmp	r2, r3
 800084e:	d204      	bcs.n	800085a <handle_set_command+0x3a>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d801      	bhi.n	800085a <handle_set_command+0x3a>
		return false;
 8000856:	2300      	movs	r3, #0
 8000858:	e007      	b.n	800086a <handle_set_command+0x4a>
	}

	set_active_mode(mode_idx - 1);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3b01      	subs	r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff8c 	bl	8000780 <set_active_mode>
	return true;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a4 	.word	0x200001a4
 8000878:	08004f80 	.word	0x08004f80
 800087c:	20000002 	.word	0x20000002

08000880 <handle_new_command>:

bool handle_new_command() {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
    char* pattern = cmd + 4; // set pointer after 'new '; example: rngyn
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <handle_new_command+0xf4>)
 8000888:	60bb      	str	r3, [r7, #8]
	uint32_t pattern_length = strlen(pattern);
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f7ff fcba 	bl	8000204 <strlen>
 8000890:	6078      	str	r0, [r7, #4]

	if (pattern_length < 2 || pattern_length > 8) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d902      	bls.n	800089e <handle_new_command+0x1e>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b08      	cmp	r3, #8
 800089c:	d901      	bls.n	80008a2 <handle_new_command+0x22>
		return false;
 800089e:	2300      	movs	r3, #0
 80008a0:	e064      	b.n	800096c <handle_new_command+0xec>
	}

	new_mode.len = pattern_length;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <handle_new_command+0xf8>)
 80008a8:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < pattern_length; ++i)
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e050      	b.n	8000952 <handle_new_command+0xd2>
		switch (pattern[i]) {
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3b67      	subs	r3, #103	; 0x67
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d844      	bhi.n	8000948 <handle_new_command+0xc8>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <handle_new_command+0x44>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	0800092d 	.word	0x0800092d
 80008c8:	08000949 	.word	0x08000949
 80008cc:	08000949 	.word	0x08000949
 80008d0:	08000949 	.word	0x08000949
 80008d4:	08000949 	.word	0x08000949
 80008d8:	08000949 	.word	0x08000949
 80008dc:	08000949 	.word	0x08000949
 80008e0:	08000911 	.word	0x08000911
 80008e4:	08000949 	.word	0x08000949
 80008e8:	08000949 	.word	0x08000949
 80008ec:	08000949 	.word	0x08000949
 80008f0:	0800091f 	.word	0x0800091f
 80008f4:	08000949 	.word	0x08000949
 80008f8:	08000949 	.word	0x08000949
 80008fc:	08000949 	.word	0x08000949
 8000900:	08000949 	.word	0x08000949
 8000904:	08000949 	.word	0x08000949
 8000908:	08000949 	.word	0x08000949
 800090c:	0800093b 	.word	0x0800093b
			case 'n':
				new_mode.states[i].color = LED_NO_ONE;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <handle_new_command+0xf8>)
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
				break;
 800091c:	e016      	b.n	800094c <handle_new_command+0xcc>
			case 'r':
				new_mode.states[i].color = LED_RED;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <handle_new_command+0xf8>)
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4413      	add	r3, r2
 8000926:	2201      	movs	r2, #1
 8000928:	709a      	strb	r2, [r3, #2]
				break;
 800092a:	e00f      	b.n	800094c <handle_new_command+0xcc>
			case 'g':
				new_mode.states[i].color = LED_GREEN;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <handle_new_command+0xf8>)
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	2202      	movs	r2, #2
 8000936:	709a      	strb	r2, [r3, #2]
				break;
 8000938:	e008      	b.n	800094c <handle_new_command+0xcc>
			case 'y':
				new_mode.states[i].color = LED_YELLOW;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <handle_new_command+0xf8>)
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	2203      	movs	r2, #3
 8000944:	709a      	strb	r2, [r3, #2]
				break;
 8000946:	e001      	b.n	800094c <handle_new_command+0xcc>
			default:
				return false;
 8000948:	2300      	movs	r3, #0
 800094a:	e00f      	b.n	800096c <handle_new_command+0xec>
	for (uint8_t i = 0; i < pattern_length; ++i)
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	3301      	adds	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	429a      	cmp	r2, r3
 8000958:	d8aa      	bhi.n	80008b0 <handle_new_command+0x30>
		}

	remaining_timeouts_input = pattern_length;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <handle_new_command+0xfc>)
 8000960:	701a      	strb	r2, [r3, #0]

	print_format("Creating new mode with length of %d. Please specify timeouts for each state (slow, medium, fast):\r\n", pattern_length);
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <handle_new_command+0x100>)
 8000966:	f7ff fef1 	bl	800074c <print_format>

	return true;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200001a4 	.word	0x200001a4
 8000978:	200001f0 	.word	0x200001f0
 800097c:	200001ec 	.word	0x200001ec
 8000980:	08004f84 	.word	0x08004f84

08000984 <handle_new_command_timeout>:

bool handle_new_command_timeout() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	const uint8_t state_idx = new_mode.len - remaining_timeouts_input;
 800098a:	4b46      	ldr	r3, [pc, #280]	; (8000aa4 <handle_new_command_timeout+0x120>)
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <handle_new_command_timeout+0x124>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	71fb      	strb	r3, [r7, #7]

	if (strlen(cmd) == 0) { // no code after "new"
 8000996:	4b45      	ldr	r3, [pc, #276]	; (8000aac <handle_new_command_timeout+0x128>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <handle_new_command_timeout+0x1e>
		return false;
 800099e:	2300      	movs	r3, #0
 80009a0:	e07c      	b.n	8000a9c <handle_new_command_timeout+0x118>
	}

	if (string_equals("slow", cmd)) {
 80009a2:	4942      	ldr	r1, [pc, #264]	; (8000aac <handle_new_command_timeout+0x128>)
 80009a4:	4842      	ldr	r0, [pc, #264]	; (8000ab0 <handle_new_command_timeout+0x12c>)
 80009a6:	f000 fcf7 	bl	8001398 <string_equals>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <handle_new_command_timeout+0x3c>
		new_mode.states[state_idx].timeout = SLOW;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	4a3c      	ldr	r2, [pc, #240]	; (8000aa4 <handle_new_command_timeout+0x120>)
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009bc:	809a      	strh	r2, [r3, #4]
 80009be:	e01d      	b.n	80009fc <handle_new_command_timeout+0x78>
	}

	else if (string_equals("medium", cmd)) {
 80009c0:	493a      	ldr	r1, [pc, #232]	; (8000aac <handle_new_command_timeout+0x128>)
 80009c2:	483c      	ldr	r0, [pc, #240]	; (8000ab4 <handle_new_command_timeout+0x130>)
 80009c4:	f000 fce8 	bl	8001398 <string_equals>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d006      	beq.n	80009dc <handle_new_command_timeout+0x58>
		new_mode.states[state_idx].timeout = MEDIUM;
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <handle_new_command_timeout+0x120>)
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	22fa      	movs	r2, #250	; 0xfa
 80009d8:	809a      	strh	r2, [r3, #4]
 80009da:	e00f      	b.n	80009fc <handle_new_command_timeout+0x78>
	}

	else if (string_equals("fast", cmd)) {
 80009dc:	4933      	ldr	r1, [pc, #204]	; (8000aac <handle_new_command_timeout+0x128>)
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <handle_new_command_timeout+0x134>)
 80009e0:	f000 fcda 	bl	8001398 <string_equals>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <handle_new_command_timeout+0x74>
		new_mode.states[state_idx].timeout = FAST;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <handle_new_command_timeout+0x120>)
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	2264      	movs	r2, #100	; 0x64
 80009f4:	809a      	strh	r2, [r3, #4]
 80009f6:	e001      	b.n	80009fc <handle_new_command_timeout+0x78>
	}

	else {
		return false;
 80009f8:	2300      	movs	r3, #0
 80009fa:	e04f      	b.n	8000a9c <handle_new_command_timeout+0x118>
	}

	--remaining_timeouts_input;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <handle_new_command_timeout+0x124>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <handle_new_command_timeout+0x124>)
 8000a06:	701a      	strb	r2, [r3, #0]

	if (remaining_timeouts_input == 0) {
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <handle_new_command_timeout+0x124>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d138      	bne.n	8000a82 <handle_new_command_timeout+0xfe>
		adding_mode = CONST_MODES_COUNT + (adding_mode + 1 - CONST_MODES_COUNT) % (MAX_MODES_COUNT - CONST_MODES_COUNT + 1);
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <handle_new_command_timeout+0x138>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <handle_new_command_timeout+0x13c>)
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	1a9b      	subs	r3, r3, r2
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <handle_new_command_timeout+0x13c>)
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	f1c2 0209 	rsb	r2, r2, #9
 8000a24:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a28:	fb01 f202 	mul.w	r2, r1, r2
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <handle_new_command_timeout+0x13c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4413      	add	r3, r2
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <handle_new_command_timeout+0x138>)
 8000a3a:	701a      	strb	r2, [r3, #0]

		const uint8_t mode_idx = adding_mode;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <handle_new_command_timeout+0x138>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	71bb      	strb	r3, [r7, #6]

		memcpy(modes + mode_idx, &(new_mode), sizeof(new_mode));
 8000a42:	79ba      	ldrb	r2, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	4413      	add	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <handle_new_command_timeout+0x140>)
 8000a50:	4413      	add	r3, r2
 8000a52:	2222      	movs	r2, #34	; 0x22
 8000a54:	4913      	ldr	r1, [pc, #76]	; (8000aa4 <handle_new_command_timeout+0x120>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f924 	bl	8003ca4 <memcpy>

		print_format("The mode %d is created\r\n", mode_idx + 1);
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <handle_new_command_timeout+0x144>)
 8000a64:	f7ff fe72 	bl	800074c <print_format>

		current_max_mode = (current_max_mode < MAX_MODES_COUNT - 1) ? adding_mode : current_max_mode;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <handle_new_command_timeout+0x148>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d802      	bhi.n	8000a76 <handle_new_command_timeout+0xf2>
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <handle_new_command_timeout+0x138>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	e001      	b.n	8000a7a <handle_new_command_timeout+0xf6>
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <handle_new_command_timeout+0x148>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <handle_new_command_timeout+0x148>)
 8000a7c:	7013      	strb	r3, [r2, #0]

		return true;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00c      	b.n	8000a9c <handle_new_command_timeout+0x118>
	}

	print_format("Added mode: %d \r\n", adding_mode);
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <handle_new_command_timeout+0x138>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <handle_new_command_timeout+0x14c>)
 8000a8a:	f7ff fe5f 	bl	800074c <print_format>

	print_format("%d timeouts are remaining:\r\n", remaining_timeouts_input);
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <handle_new_command_timeout+0x124>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <handle_new_command_timeout+0x150>)
 8000a96:	f7ff fe59 	bl	800074c <print_format>

	return true;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001f0 	.word	0x200001f0
 8000aa8:	200001ec 	.word	0x200001ec
 8000aac:	200001a0 	.word	0x200001a0
 8000ab0:	08004fe8 	.word	0x08004fe8
 8000ab4:	08004ff0 	.word	0x08004ff0
 8000ab8:	08004ff8 	.word	0x08004ff8
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000001 	.word	0x20000001
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	08005000 	.word	0x08005000
 8000acc:	20000002 	.word	0x20000002
 8000ad0:	0800501c 	.word	0x0800501c
 8000ad4:	08005030 	.word	0x08005030

08000ad8 <handle_command_line>:

void handle_command_line() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	bool success = false;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]

	if (strlen(cmd) == 0) {
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <handle_command_line+0xf4>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d06c      	beq.n	8000bc4 <handle_command_line+0xec>
		return; // empty line
	}

	if (string_equals("set interrupts on", cmd)) {
 8000aea:	4938      	ldr	r1, [pc, #224]	; (8000bcc <handle_command_line+0xf4>)
 8000aec:	4838      	ldr	r0, [pc, #224]	; (8000bd0 <handle_command_line+0xf8>)
 8000aee:	f000 fc53 	bl	8001398 <string_equals>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d015      	beq.n	8000b24 <handle_command_line+0x4c>
		is_interrupt_mode = true;
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <handle_command_line+0xfc>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_TXE);
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <handle_command_line+0x100>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <handle_command_line+0x100>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b0c:	60da      	str	r2, [r3, #12]
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <handle_command_line+0x100>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <handle_command_line+0x100>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0220 	orr.w	r2, r2, #32
 8000b1c:	60da      	str	r2, [r3, #12]
		success = true;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	e045      	b.n	8000bb0 <handle_command_line+0xd8>
	}

	else if (string_equals("set interrupts off", cmd)) {
 8000b24:	4929      	ldr	r1, [pc, #164]	; (8000bcc <handle_command_line+0xf4>)
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <handle_command_line+0x104>)
 8000b28:	f000 fc36 	bl	8001398 <string_equals>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d01b      	beq.n	8000b6a <handle_command_line+0x92>
		is_interrupt_mode = false;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <handle_command_line+0xfc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
		HAL_UART_AbortReceive(&huart6);
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <handle_command_line+0x100>)
 8000b3a:	f001 ff09 	bl	8002950 <HAL_UART_AbortReceive>
		HAL_UART_Abort_IT(&huart6);
 8000b3e:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <handle_command_line+0x100>)
 8000b40:	f001 ffaa 	bl	8002a98 <HAL_UART_Abort_IT>
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_TXE);
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <handle_command_line+0x100>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <handle_command_line+0x100>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b52:	60da      	str	r2, [r3, #12]
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <handle_command_line+0x100>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <handle_command_line+0x100>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 0220 	bic.w	r2, r2, #32
 8000b62:	60da      	str	r2, [r3, #12]
		success = true;
 8000b64:	2301      	movs	r3, #1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	e022      	b.n	8000bb0 <handle_command_line+0xd8>
	}

	else if (starts_with("set ", cmd)) {
 8000b6a:	4918      	ldr	r1, [pc, #96]	; (8000bcc <handle_command_line+0xf4>)
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <handle_command_line+0x108>)
 8000b6e:	f000 fc26 	bl	80013be <starts_with>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d004      	beq.n	8000b82 <handle_command_line+0xaa>
		success = handle_set_command();
 8000b78:	f7ff fe52 	bl	8000820 <handle_set_command>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	e016      	b.n	8000bb0 <handle_command_line+0xd8>
	}

	else if (starts_with("new ", cmd)) {
 8000b82:	4912      	ldr	r1, [pc, #72]	; (8000bcc <handle_command_line+0xf4>)
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <handle_command_line+0x10c>)
 8000b86:	f000 fc1a 	bl	80013be <starts_with>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <handle_command_line+0xc2>
		success = handle_new_command();
 8000b90:	f7ff fe76 	bl	8000880 <handle_new_command>
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e00a      	b.n	8000bb0 <handle_command_line+0xd8>
	}

	else if (remaining_timeouts_input > 0) {
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <handle_command_line+0x110>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <handle_command_line+0xd4>
		success = handle_new_command_timeout();
 8000ba2:	f7ff feef 	bl	8000984 <handle_new_command_timeout>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	e001      	b.n	8000bb0 <handle_command_line+0xd8>
	}

	else {
		success = false;
 8000bac:	2300      	movs	r3, #0
 8000bae:	71fb      	strb	r3, [r7, #7]
	}

	println(success ? OK_MESSAGE : WRONG_COMMAND);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <handle_command_line+0xe2>
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <handle_command_line+0x114>)
 8000bb8:	e000      	b.n	8000bbc <handle_command_line+0xe4>
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <handle_command_line+0x118>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fdb5 	bl	800072c <println>
 8000bc2:	e000      	b.n	8000bc6 <handle_command_line+0xee>
		return; // empty line
 8000bc4:	bf00      	nop
}
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001a0 	.word	0x200001a0
 8000bd0:	08005050 	.word	0x08005050
 8000bd4:	200001e5 	.word	0x200001e5
 8000bd8:	200006d8 	.word	0x200006d8
 8000bdc:	08005064 	.word	0x08005064
 8000be0:	08005078 	.word	0x08005078
 8000be4:	08005080 	.word	0x08005080
 8000be8:	200001ec 	.word	0x200001ec
 8000bec:	080050a0 	.word	0x080050a0
 8000bf0:	080050a4 	.word	0x080050a4

08000bf4 <receive_char_async>:

void receive_char_async() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4903      	ldr	r1, [pc, #12]	; (8000c08 <receive_char_async+0x14>)
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <receive_char_async+0x18>)
 8000bfe:	f001 fe77 	bl	80028f0 <HAL_UART_Receive_IT>
		&huart6,
		(uint8_t*) &last_received_char,
		sizeof(last_received_char)
	);
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001e6 	.word	0x200001e6
 8000c0c:	200006d8 	.word	0x200006d8

08000c10 <receive_char>:

bool receive_char() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	auto result = HAL_UART_Receive(
 8000c16:	230a      	movs	r3, #10
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <receive_char+0x2c>)
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <receive_char+0x30>)
 8000c1e:	f001 fd80 	bl	8002722 <HAL_UART_Receive>
 8000c22:	4603      	mov	r3, r0
 8000c24:	607b      	str	r3, [r7, #4]
		(uint8_t*) &last_received_char,
		sizeof(last_received_char),
		UART_TIMEOUT
	);

	return result == HAL_OK;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001e6 	.word	0x200001e6
 8000c40:	200006d8 	.word	0x200006d8

08000c44 <delete_char_from_buffer>:

void delete_char_from_buffer() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	const uint8_t cmd_len = strlen(cmd);
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <delete_char_from_buffer+0x28>)
 8000c4c:	f7ff fada 	bl	8000204 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
	if (cmd_len > 0) {
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <delete_char_from_buffer+0x20>
		cmd[cmd_len - 1] = '\0';
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <delete_char_from_buffer+0x28>)
 8000c60:	2100      	movs	r1, #0
 8000c62:	54d1      	strb	r1, [r2, r3]
	}
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200001a0 	.word	0x200001a0

08000c70 <clear_buffer>:

void clear_buffer() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	memset(cmd, '\0', sizeof(cmd));
 8000c74:	2240      	movs	r2, #64	; 0x40
 8000c76:	2100      	movs	r1, #0
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <clear_buffer+0x14>)
 8000c7a:	f003 f821 	bl	8003cc0 <memset>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001a0 	.word	0x200001a0

08000c88 <readln>:

void readln() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    if (is_interrupt_mode) {
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <readln+0x98>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d009      	beq.n	8000caa <readln+0x22>
        while(data_available()) {
 8000c96:	e002      	b.n	8000c9e <readln+0x16>
            receive_char_async();
 8000c98:	f7ff ffac 	bl	8000bf4 <receive_char_async>
            return;
 8000c9c:	e03d      	b.n	8000d1a <readln+0x92>
        while(data_available()) {
 8000c9e:	f000 f9db 	bl	8001058 <data_available>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f7      	bne.n	8000c98 <readln+0x10>
 8000ca8:	e007      	b.n	8000cba <readln+0x32>
        }
    } else {
    	if (!receive_char()) { // try to receive synchronously
 8000caa:	f7ff ffb1 	bl	8000c10 <receive_char>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d12e      	bne.n	8000d18 <readln+0x90>
    		return;
    	}
    }

    // handle received char
    print(&last_received_char);
 8000cba:	481a      	ldr	r0, [pc, #104]	; (8000d24 <readln+0x9c>)
 8000cbc:	f7ff fd20 	bl	8000700 <print>

    switch (last_received_char) {
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <readln+0x9c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc6:	d006      	beq.n	8000cd6 <readln+0x4e>
 8000cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cca:	dc0f      	bgt.n	8000cec <readln+0x64>
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d002      	beq.n	8000cd6 <readln+0x4e>
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	d003      	beq.n	8000cdc <readln+0x54>
 8000cd4:	e00a      	b.n	8000cec <readln+0x64>
    	// backspace
    	case '\b':
    	case 0x7F: {
    		delete_char_from_buffer();
 8000cd6:	f7ff ffb5 	bl	8000c44 <delete_char_from_buffer>
    		return;
 8000cda:	e01e      	b.n	8000d1a <readln+0x92>
    	}
    	// enter
    	case '\r':
    	    println("\n");
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <readln+0xa0>)
 8000cde:	f7ff fd25 	bl	800072c <println>
    		handle_command_line();
 8000ce2:	f7ff fef9 	bl	8000ad8 <handle_command_line>
    		clear_buffer();
 8000ce6:	f7ff ffc3 	bl	8000c70 <clear_buffer>
    		return;
 8000cea:	e016      	b.n	8000d1a <readln+0x92>
    }
    const uint32_t command_line_length = strlen(cmd);
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <readln+0xa4>)
 8000cee:	f7ff fa89 	bl	8000204 <strlen>
 8000cf2:	6078      	str	r0, [r7, #4]

    // check buffer overflow
    if (command_line_length == sizeof(cmd) - 1) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf8:	d106      	bne.n	8000d08 <readln+0x80>
    	print_format("\r\n %s", WRONG_COMMAND);
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <readln+0xa8>)
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <readln+0xac>)
 8000cfe:	f7ff fd25 	bl	800074c <print_format>
    	clear_buffer();
 8000d02:	f7ff ffb5 	bl	8000c70 <clear_buffer>
    	return;
 8000d06:	e008      	b.n	8000d1a <readln+0x92>
    }

    cmd[command_line_length] = last_received_char;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <readln+0x9c>)
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <readln+0xa4>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	460a      	mov	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e000      	b.n	8000d1a <readln+0x92>
    		return;
 8000d18:	bf00      	nop
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001e5 	.word	0x200001e5
 8000d24:	200001e6 	.word	0x200001e6
 8000d28:	08005088 	.word	0x08005088
 8000d2c:	200001a0 	.word	0x200001a0
 8000d30:	080050a4 	.word	0x080050a4
 8000d34:	0800508c 	.word	0x0800508c

08000d38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	last_received_char = buf_read();
 8000d40:	f000 f938 	bl	8000fb4 <buf_read>
 8000d44:	4603      	mov	r3, r0
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_UART_RxCpltCallback+0x1c>)
 8000d4a:	701a      	strb	r2, [r3, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200001e6 	.word	0x200001e6

08000d58 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	buf_sendstring(content_all);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_UART_TxCpltCallback+0x1c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f98f 	bl	8001088 <buf_sendstring>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001e8 	.word	0x200001e8

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fb99 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f899 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f7ff fc1d 	bl	80005c4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000d8a:	f000 fa37 	bl	80011fc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init();
 8000d8e:	f000 f8fb 	bl	8000f88 <ring_buffer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    uint32_t current_time = HAL_GetTick();
 8000d92:	f000 fbf5 	bl	8001580 <HAL_GetTick>
 8000d96:	60f8      	str	r0, [r7, #12]
    while (1) {
        if (is_btn_pressed(&last_pressed_time)) {
 8000d98:	4841      	ldr	r0, [pc, #260]	; (8000ea0 <main+0x128>)
 8000d9a:	f000 fb29 	bl	80013f0 <is_btn_pressed>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00d      	beq.n	8000dc0 <main+0x48>
        	set_active_mode((cur_mode_code + 1) % CONST_MODES_COUNT);
 8000da4:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <main+0x12c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <main+0x130>)
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	fb93 f1f2 	sdiv	r1, r3, r2
 8000db2:	fb01 f202 	mul.w	r2, r1, r2
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fce0 	bl	8000780 <set_active_mode>
        }

        readln();
 8000dc0:	f7ff ff62 	bl	8000c88 <readln>

        last_state.elapsed_state_time[cur_mode_code] += HAL_GetTick() - current_time;
 8000dc4:	f000 fbdc 	bl	8001580 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad2      	subs	r2, r2, r3
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <main+0x12c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	4936      	ldr	r1, [pc, #216]	; (8000eac <main+0x134>)
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dda:	4932      	ldr	r1, [pc, #200]	; (8000ea4 <main+0x12c>)
 8000ddc:	7809      	ldrb	r1, [r1, #0]
 8000dde:	4608      	mov	r0, r1
 8000de0:	441a      	add	r2, r3
 8000de2:	4932      	ldr	r1, [pc, #200]	; (8000eac <main+0x134>)
 8000de4:	1c83      	adds	r3, r0, #2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        current_time = HAL_GetTick();
 8000dea:	f000 fbc9 	bl	8001580 <HAL_GetTick>
 8000dee:	60f8      	str	r0, [r7, #12]

        const struct LEDMode* current_mode = modes + cur_mode_code;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <main+0x12c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4613      	mov	r3, r2
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <main+0x138>)
 8000e02:	4413      	add	r3, r2
 8000e04:	60bb      	str	r3, [r7, #8]

        if (current_mode->len == 0) {
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d045      	beq.n	8000e9a <main+0x122>
            continue;
        }

        const struct LightState* current_state = current_mode->states + last_state.state[cur_mode_code];
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1c9a      	adds	r2, r3, #2
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <main+0x12c>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <main+0x134>)
 8000e1a:	5c5b      	ldrb	r3, [r3, r1]
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	607b      	str	r3, [r7, #4]

        if (last_state.elapsed_state_time[cur_mode_code] >= current_state->timeout) {
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <main+0x12c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <main+0x134>)
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	8852      	ldrh	r2, [r2, #2]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d3b0      	bcc.n	8000d98 <main+0x20>
            led_functions[current_state->color](false);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <main+0x13c>)
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	2000      	movs	r0, #0
 8000e44:	4798      	blx	r3

            last_state.elapsed_state_time[cur_mode_code] = 0;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <main+0x12c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <main+0x134>)
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            last_state.state[cur_mode_code] = (last_state.state[cur_mode_code] + 1) % current_mode->len;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <main+0x12c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <main+0x134>)
 8000e5c:	5c9b      	ldrb	r3, [r3, r2]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e68:	fb01 f202 	mul.w	r2, r1, r2
 8000e6c:	1a99      	subs	r1, r3, r2
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <main+0x12c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	b2c9      	uxtb	r1, r1
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <main+0x134>)
 8000e78:	5499      	strb	r1, [r3, r2]

            led_functions[current_mode->states[last_state.state[cur_mode_code]].color](true);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <main+0x12c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <main+0x134>)
 8000e82:	5c9b      	ldrb	r3, [r3, r2]
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <main+0x13c>)
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	2001      	movs	r0, #1
 8000e96:	4798      	blx	r3
 8000e98:	e77e      	b.n	8000d98 <main+0x20>
            continue;
 8000e9a:	bf00      	nop
    while (1) {
 8000e9c:	e77c      	b.n	8000d98 <main+0x20>
 8000e9e:	bf00      	nop
 8000ea0:	200001e0 	.word	0x200001e0
 8000ea4:	200001e4 	.word	0x200001e4
 8000ea8:	20000001 	.word	0x20000001
 8000eac:	20000214 	.word	0x20000214
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	080050b4 	.word	0x080050b4

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0320 	add.w	r3, r7, #32
 8000ec2:	2230      	movs	r2, #48	; 0x30
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fefa 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <SystemClock_Config+0xb8>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <SystemClock_Config+0xb8>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SystemClock_Config+0xb8>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <SystemClock_Config+0xbc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <SystemClock_Config+0xbc>)
 8000f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <SystemClock_Config+0xbc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fec1 	bl	8001cb4 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f38:	f000 f81e 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f924 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f62:	f000 f809 	bl	8000f78 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	; 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return last_state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <ring_buffer_init>:
ring_buffer *_tx_buffer;

void store_char(unsigned char c, ring_buffer *buffer);


void ring_buffer_init(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <ring_buffer_init+0x1c>)
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <ring_buffer_init+0x20>)
 8000f90:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ring_buffer_init+0x24>)
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <ring_buffer_init+0x28>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200006cc 	.word	0x200006cc
 8000fa8:	2000063c 	.word	0x2000063c
 8000fac:	200006d0 	.word	0x200006d0
 8000fb0:	20000684 	.word	0x20000684

08000fb4 <buf_read>:
    buffer->buffer[buffer->head] = c;
    buffer->head = i;
  }
}

int buf_read(void) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail) {
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <buf_read+0x4c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <buf_read+0x4c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d102      	bne.n	8000fd0 <buf_read+0x1c>
    return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e010      	b.n	8000ff2 <buf_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <buf_read+0x4c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <buf_read+0x4c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <buf_read+0x4c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <buf_read+0x4c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200006cc 	.word	0x200006cc

08001004 <buf_write>:

void buf_write(int c) {
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if (c>=0) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db19      	blt.n	8001046 <buf_write+0x42>
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <buf_write+0x50>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	3301      	adds	r3, #1
 800101a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800101e:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8001020:	bf00      	nop
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <buf_write+0x50>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d0f9      	beq.n	8001022 <buf_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <buf_write+0x50>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <buf_write+0x50>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	b2c9      	uxtb	r1, r1
 800103c:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <buf_write+0x50>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200006d0 	.word	0x200006d0

08001058 <data_available>:

int data_available(void) {
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <data_available+0x2c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <data_available+0x2c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	b29b      	uxth	r3, r3
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	3340      	adds	r3, #64	; 0x40
 8001072:	b29b      	uxth	r3, r3
 8001074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200006cc 	.word	0x200006cc

08001088 <buf_sendstring>:

void buf_sendstring (const char *s) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	while(*s) buf_write(*s++);
 8001090:	e006      	b.n	80010a0 <buf_sendstring+0x18>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffb2 	bl	8001004 <buf_write>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1f4      	bne.n	8001092 <buf_sendstring+0xa>
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_MspInit+0x4c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 fa02 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <USART6_IRQHandler+0x10>)
 800115e:	f001 fdaf 	bl	8002cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200006d8 	.word	0x200006d8

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f002 fd58 	bl	8003c50 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20030000 	.word	0x20030000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200006d4 	.word	0x200006d4
 80011d4:	20000730 	.word	0x20000730

080011d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART6_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001234:	f001 f996 	bl	8002564 <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f7ff fe9b 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200006d8 	.word	0x200006d8
 800124c:	40011400 	.word	0x40011400

08001250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_UART_MspInit+0x94>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d133      	bne.n	80012da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <HAL_UART_MspInit+0x98>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x98>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_UART_MspInit+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80012ba:	2308      	movs	r3, #8
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_UART_MspInit+0x9c>)
 80012c6:	f000 fb17 	bl	80018f8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2047      	movs	r0, #71	; 0x47
 80012d0:	f000 fa3d 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012d4:	2047      	movs	r0, #71	; 0x47
 80012d6:	f000 fa56 	bl	8001786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011400 	.word	0x40011400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020800 	.word	0x40020800

080012f0 <set_green_led>:
// State is GPIO_PIN_SET or GPIO_PIN_RESET
void set_LED(int code, GPIO_PinState state) {
	HAL_GPIO_WritePin(GPIOD, code, state);
}

void set_green_led(bool on) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	461a      	mov	r2, r3
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4803      	ldr	r0, [pc, #12]	; (8001310 <set_green_led+0x20>)
 8001304:	f000 fcbc 	bl	8001c80 <HAL_GPIO_WritePin>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40020c00 	.word	0x40020c00

08001314 <set_yellow_led>:

void set_yellow_led(bool on) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	461a      	mov	r2, r3
 8001322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <set_yellow_led+0x20>)
 8001328:	f000 fcaa 	bl	8001c80 <HAL_GPIO_WritePin>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40020c00 	.word	0x40020c00

08001338 <set_red_led>:

void set_red_led(bool on) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <set_red_led+0x20>)
 800134c:	f000 fc98 	bl	8001c80 <HAL_GPIO_WritePin>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40020c00 	.word	0x40020c00

0800135c <set_no_one_led>:

void set_no_one_led(bool on) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	4809      	ldr	r0, [pc, #36]	; (8001394 <set_no_one_led+0x38>)
 800136e:	f000 fc87 	bl	8001c80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <set_no_one_led+0x38>)
 800137a:	f000 fc81 	bl	8001c80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <set_no_one_led+0x38>)
 8001386:	f000 fc7b 	bl	8001c80 <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020c00 	.word	0x40020c00

08001398 <string_equals>:

bool string_equals(const char * a, const char * b) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	return strcmp(a, b) == 0;
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7fe ff23 	bl	80001f0 <strcmp>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <starts_with>:

bool starts_with(const char * prefix, const char * str) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	return strncmp(prefix, str, strlen(prefix)) == 0;
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7fe ff1b 	bl	8000204 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f002 fca9 	bl	8003d2c <strncmp>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <is_btn_pressed>:
}

// Checks if button is pressed.
// Also checks value of HAL_GetTick to avoid rattle.
// Sets last_pressed_time if button is considered pressed.
bool is_btn_pressed(uint32_t* last_pressed_time) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	// GPIO_PIN_RESET means pressed
	int pressed = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET;
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <is_btn_pressed+0x6c>)
 80013fe:	f000 fc27 	bl	8001c50 <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	617b      	str	r3, [r7, #20]

	if (!pressed) {
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <is_btn_pressed+0x2a>
		return false;
 8001416:	2300      	movs	r3, #0
 8001418:	e01c      	b.n	8001454 <is_btn_pressed+0x64>
	}

	// If set too low, might trigger twice per click
	// If too high, might not register the second click
	const int RATTLE_TIME_MS = 500;
 800141a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800141e:	613b      	str	r3, [r7, #16]

	int time_passed = HAL_GetTick() - *last_pressed_time;
 8001420:	f000 f8ae 	bl	8001580 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	60fb      	str	r3, [r7, #12]
	int rattle = time_passed < RATTLE_TIME_MS;
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	429a      	cmp	r2, r3
 8001434:	bfb4      	ite	lt
 8001436:	2301      	movlt	r3, #1
 8001438:	2300      	movge	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	60bb      	str	r3, [r7, #8]

	if (rattle) {
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <is_btn_pressed+0x58>
		return false;
 8001444:	2300      	movs	r3, #0
 8001446:	e005      	b.n	8001454 <is_btn_pressed+0x64>
	}

	// Register press
	*last_pressed_time = HAL_GetTick();
 8001448:	f000 f89a 	bl	8001580 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]

	return true;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020800 	.word	0x40020800

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001498 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001466:	490e      	ldr	r1, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800147c:	4c0b      	ldr	r4, [pc, #44]	; (80014ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148a:	f7ff fea5 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 fbe5 	bl	8003c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fc71 	bl	8000d78 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001498:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80014a4:	0800529c 	.word	0x0800529c
  ldr r2, =_sbss
 80014a8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80014ac:	20000730 	.word	0x20000730

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <HAL_Init+0x40>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_Init+0x40>)
 80014ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x40>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f92b 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	200f      	movs	r0, #15
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fde4 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f943 	bl	80017a2 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f90b 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000114 	.word	0x20000114
 8001550:	2000011c 	.word	0x2000011c
 8001554:	20000118 	.word	0x20000118

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000011c 	.word	0x2000011c
 800157c:	2000071c 	.word	0x2000071c

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000071c 	.word	0x2000071c

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff8e 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff29 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff3e 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff8e 	bl	800168c <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5d 	bl	8001638 <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff31 	bl	80015fc <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff feda 	bl	8001580 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d008      	beq.n	80017ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e052      	b.n	8001892 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0216 	bic.w	r2, r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800180a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <HAL_DMA_Abort+0x62>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0208 	bic.w	r2, r2, #8
 800182a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800183c:	e013      	b.n	8001866 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183e:	f7ff fe9f 	bl	8001580 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b05      	cmp	r3, #5
 800184a:	d90c      	bls.n	8001866 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2220      	movs	r2, #32
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2203      	movs	r2, #3
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e015      	b.n	8001892 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e4      	bne.n	800183e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	223f      	movs	r2, #63	; 0x3f
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00c      	b.n	80018d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2205      	movs	r2, #5
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e177      	b.n	8001c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8166 	bne.w	8001bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80c0 	beq.w	8001bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b66      	ldr	r3, [pc, #408]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a65      	ldr	r2, [pc, #404]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a58      	ldr	r2, [pc, #352]	; (8001c24 <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d037      	beq.n	8001b36 <HAL_GPIO_Init+0x23e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a57      	ldr	r2, [pc, #348]	; (8001c28 <HAL_GPIO_Init+0x330>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_GPIO_Init+0x23a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <HAL_GPIO_Init+0x334>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d02b      	beq.n	8001b2e <HAL_GPIO_Init+0x236>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a55      	ldr	r2, [pc, #340]	; (8001c30 <HAL_GPIO_Init+0x338>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d025      	beq.n	8001b2a <HAL_GPIO_Init+0x232>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a54      	ldr	r2, [pc, #336]	; (8001c34 <HAL_GPIO_Init+0x33c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d01f      	beq.n	8001b26 <HAL_GPIO_Init+0x22e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_GPIO_Init+0x340>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d019      	beq.n	8001b22 <HAL_GPIO_Init+0x22a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_GPIO_Init+0x344>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a51      	ldr	r2, [pc, #324]	; (8001c40 <HAL_GPIO_Init+0x348>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00d      	beq.n	8001b1a <HAL_GPIO_Init+0x222>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a50      	ldr	r2, [pc, #320]	; (8001c44 <HAL_GPIO_Init+0x34c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x21e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4f      	ldr	r2, [pc, #316]	; (8001c48 <HAL_GPIO_Init+0x350>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	e012      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b12:	230a      	movs	r3, #10
 8001b14:	e010      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b16:	2308      	movs	r3, #8
 8001b18:	e00e      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	e00c      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e00a      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b22:	2305      	movs	r3, #5
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x240>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x328>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_GPIO_Init+0x354>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f ae84 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40021c00 	.word	0x40021c00
 8001c44:	40022000 	.word	0x40022000
 8001c48:	40022400 	.word	0x40022400
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e267      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d075      	beq.n	8001dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce6:	2b08      	cmp	r3, #8
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf6:	d10b      	bne.n	8001d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d05b      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d157      	bne.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e242      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_OscConfig+0x74>
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a75      	ldr	r2, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xb0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x98>
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6f      	ldr	r2, [pc, #444]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6c      	ldr	r2, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a68      	ldr	r2, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fc08 	bl	8001580 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc04 	bl	8001580 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e207      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fbf4 	bl	8001580 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fbf0 	bl	8001580 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1f3      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d063      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dca:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d11c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d116      	bne.n	8001e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x152>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e1c7      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	e03a      	b.n	8001e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fba9 	bl	8001580 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fba5 	bl	8001580 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e1a8      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4925      	ldr	r1, [pc, #148]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <HAL_RCC_OscConfig+0x244>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fb88 	bl	8001580 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fb84 	bl	8001580 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e187      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d036      	beq.n	8001f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_RCC_OscConfig+0x248>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fb68 	bl	8001580 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fb64 	bl	8001580 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e167      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x200>
 8001ed2:	e01b      	b.n	8001f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_OscConfig+0x248>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb51 	bl	8001580 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	e00e      	b.n	8001f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fb4d 	bl	8001580 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d907      	bls.n	8001f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e150      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f00:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8097 	beq.w	8002048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1e:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	4b7d      	ldr	r3, [pc, #500]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a7c      	ldr	r2, [pc, #496]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b77      	ldr	r3, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b74      	ldr	r3, [pc, #464]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a73      	ldr	r2, [pc, #460]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb0d 	bl	8001580 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fb09 	bl	8001580 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e10c      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x474>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2ea>
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a63      	ldr	r2, [pc, #396]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	e01c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x324>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x30c>
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a5b      	ldr	r2, [pc, #364]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x324>
 8001fc0:	4b58      	ldr	r3, [pc, #352]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a54      	ldr	r2, [pc, #336]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d015      	beq.n	800200c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff face 	bl	8001580 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff faca 	bl	8001580 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0cb      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ee      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x334>
 800200a:	e014      	b.n	8002036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7ff fab8 	bl	8001580 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002014:	f7ff fab4 	bl	8001580 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e0b5      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ee      	bne.n	8002014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203c:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	4a38      	ldr	r2, [pc, #224]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80a1 	beq.w	8002194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002052:	4b34      	ldr	r3, [pc, #208]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d05c      	beq.n	8002118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d141      	bne.n	80020ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_OscConfig+0x478>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff fa88 	bl	8001580 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff fa84 	bl	8001580 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e087      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002086:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x478>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa5d 	bl	8001580 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ca:	f7ff fa59 	bl	8001580 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e05c      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x416>
 80020e8:	e054      	b.n	8002194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_OscConfig+0x478>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fa46 	bl	8001580 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff fa42 	bl	8001580 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e045      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_OscConfig+0x470>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x444>
 8002116:	e03d      	b.n	8002194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e038      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000
 800212c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x4ec>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d028      	beq.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d121      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d11a      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002168:	4293      	cmp	r3, r2
 800216a:	d111      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0cc      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d90c      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b65      	ldr	r3, [pc, #404]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800221a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d044      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d119      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	2b03      	cmp	r3, #3
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e067      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4934      	ldr	r1, [pc, #208]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7ff f974 	bl	8001580 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff f970 	bl	8001580 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d20c      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f8d4 	bl	80014f8 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00
 8002360:	40023800 	.word	0x40023800
 8002364:	080050c4 	.word	0x080050c4
 8002368:	20000114 	.word	0x20000114
 800236c:	20000118 	.word	0x20000118

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b090      	sub	sp, #64	; 0x40
 8002376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	2300      	movs	r3, #0
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d00d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002394:	2b08      	cmp	r3, #8
 8002396:	f200 80a1 	bhi.w	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x3a>
 80023a2:	e09b      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023a8:	e09b      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ae:	e098      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	2200      	movs	r2, #0
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	627a      	str	r2, [r7, #36]	; 0x24
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d8:	2100      	movs	r1, #0
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023dc:	fb03 f201 	mul.w	r2, r3, r1
 80023e0:	2300      	movs	r3, #0
 80023e2:	fb00 f303 	mul.w	r3, r0, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ea:	fba0 1202 	umull	r1, r2, r0, r2
 80023ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f0:	460a      	mov	r2, r1
 80023f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	4413      	add	r3, r2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	2200      	movs	r2, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	61fa      	str	r2, [r7, #28]
 8002402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800240a:	f7fd ff59 	bl	80002c0 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4613      	mov	r3, r2
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	e053      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	2200      	movs	r2, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	617a      	str	r2, [r7, #20]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800242a:	f04f 0b00 	mov.w	fp, #0
 800242e:	4652      	mov	r2, sl
 8002430:	465b      	mov	r3, fp
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	ebb2 080a 	subs.w	r8, r2, sl
 800244a:	eb63 090b 	sbc.w	r9, r3, fp
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800245a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800245e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002462:	ebb2 0408 	subs.w	r4, r2, r8
 8002466:	eb63 0509 	sbc.w	r5, r3, r9
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	00eb      	lsls	r3, r5, #3
 8002474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002478:	00e2      	lsls	r2, r4, #3
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	eb14 030a 	adds.w	r3, r4, sl
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	eb45 030b 	adc.w	r3, r5, fp
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	2200      	movs	r2, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b4:	f7fd ff04 	bl	80002c0 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3740      	adds	r7, #64	; 0x40
 80024e8:	46bd      	mov	sp, r7
 80024ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	017d7840 	.word	0x017d7840

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_GetHCLKFreq+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000114 	.word	0x20000114

08002514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002518:	f7ff fff0 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0a9b      	lsrs	r3, r3, #10
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40023800 	.word	0x40023800
 8002538:	080050d4 	.word	0x080050d4

0800253c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002540:	f7ff ffdc 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0b5b      	lsrs	r3, r3, #13
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	080050d4 	.word	0x080050d4

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03f      	b.n	80025f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fe60 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 f8dd 	bl	8003768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af02      	add	r7, sp, #8
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	d17c      	bne.n	8002718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_UART_Transmit+0x2c>
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e075      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x3e>
 8002638:	2302      	movs	r3, #2
 800263a:	e06e      	b.n	800271a <HAL_UART_Transmit+0x11c>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe ff95 	bl	8001580 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Transmit+0x82>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002690:	e02a      	b.n	80026e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fdbd 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e036      	b.n	800271a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cf      	bne.n	8002692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fd8d 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08a      	sub	sp, #40	; 0x28
 8002726:	af02      	add	r7, sp, #8
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	f040 808c 	bne.w	800285c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Receive+0x2e>
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e084      	b.n	800285e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_UART_Receive+0x40>
 800275e:	2302      	movs	r3, #2
 8002760:	e07d      	b.n	800285e <HAL_UART_Receive+0x13c>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2222      	movs	r2, #34	; 0x22
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800277e:	f7fe feff 	bl	8001580 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d108      	bne.n	80027ac <HAL_UART_Receive+0x8a>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e003      	b.n	80027b4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027bc:	e043      	b.n	8002846 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fd27 	bl	800321c <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e042      	b.n	800285e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	3302      	adds	r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e01f      	b.n	8002838 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002800:	d007      	beq.n	8002812 <HAL_UART_Receive+0xf0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_UART_Receive+0xfe>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e008      	b.n	8002832 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282c:	b2da      	uxtb	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3301      	adds	r3, #1
 8002836:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1b6      	bne.n	80027be <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	4613      	mov	r3, r2
 8002872:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d130      	bne.n	80028e2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <HAL_UART_Transmit_IT+0x26>
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e029      	b.n	80028e4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Transmit_IT+0x38>
 800289a:	2302      	movs	r3, #2
 800289c:	e022      	b.n	80028e4 <HAL_UART_Transmit_IT+0x7e>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b20      	cmp	r3, #32
 8002908:	d11d      	bne.n	8002946 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_UART_Receive_IT+0x26>
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e016      	b.n	8002948 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_UART_Receive_IT+0x38>
 8002924:	2302      	movs	r3, #2
 8002926:	e00f      	b.n	8002948 <HAL_UART_Receive_IT+0x58>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	461a      	mov	r2, r3
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fcdb 	bl	80032f8 <UART_Start_Receive_IT>
 8002942:	4603      	mov	r3, r0
 8002944:	e000      	b.n	8002948 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b09a      	sub	sp, #104	; 0x68
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800296a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800296e:	667b      	str	r3, [r7, #100]	; 0x64
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002978:	657a      	str	r2, [r7, #84]	; 0x54
 800297a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800297e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ac:	643a      	str	r2, [r7, #64]	; 0x40
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d119      	bne.n	80029fc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	330c      	adds	r3, #12
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0310 	bic.w	r3, r3, #16
 80029de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d136      	bne.n	8002a78 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3314      	adds	r3, #20
 8002a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3314      	adds	r3, #20
 8002a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a2a:	61ba      	str	r2, [r7, #24]
 8002a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	613b      	str	r3, [r7, #16]
   return(result);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e5      	bne.n	8002a0a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d018      	beq.n	8002a78 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe feb1 	bl	80017ba <HAL_DMA_Abort>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe ff3b 	bl	80018de <HAL_DMA_GetError>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d104      	bne.n	8002a78 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2210      	movs	r2, #16
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e00a      	b.n	8002a8e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3768      	adds	r7, #104	; 0x68
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0a2      	sub	sp, #136	; 0x88
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ab8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002abc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e3      	bne.n	8002aa6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002afe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b06:	e841 2300 	strex	r3, r2, [r1]
 8002b0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1e5      	bne.n	8002ade <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d119      	bne.n	8002b4e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2c:	f023 0310 	bic.w	r3, r3, #16
 8002b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b80      	cmp	r3, #128	; 0x80
 8002b62:	d104      	bne.n	8002b6e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_UART_Abort_IT+0x220>)
 8002b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b6c:	e003      	b.n	8002b76 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2200      	movs	r2, #0
 8002b74:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00f      	beq.n	8002b9e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d104      	bne.n	8002b96 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <HAL_UART_Abort_IT+0x224>)
 8002b92:	651a      	str	r2, [r3, #80]	; 0x50
 8002b94:	e003      	b.n	8002b9e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d12d      	bne.n	8002c08 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	623b      	str	r3, [r7, #32]
   return(result);
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	e841 2300 	strex	r3, r2, [r1]
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1e5      	bne.n	8002bac <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00f      	beq.n	8002c08 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fe54 	bl	800189a <HAL_DMA_Abort_IT>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50
 8002c00:	e002      	b.n	8002c08 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d130      	bne.n	8002c78 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c36:	61fa      	str	r2, [r7, #28]
 8002c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	617b      	str	r3, [r7, #20]
   return(result);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d012      	beq.n	8002c78 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fe1f 	bl	800189a <HAL_DMA_Abort_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	2200      	movs	r2, #0
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c70:	e002      	b.n	8002c78 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8002c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d116      	bne.n	8002cae <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 faa1 	bl	80031f0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3788      	adds	r7, #136	; 0x88
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08003463 	.word	0x08003463
 8002cbc:	080034c3 	.word	0x080034c3

08002cc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b0ba      	sub	sp, #232	; 0xe8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10f      	bne.n	8002d26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_UART_IRQHandler+0x66>
 8002d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fc67 	bl	80035f2 <UART_Receive_IT>
      return;
 8002d24:	e256      	b.n	80031d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80de 	beq.w	8002eec <HAL_UART_IRQHandler+0x22c>
 8002d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80d1 	beq.w	8002eec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_UART_IRQHandler+0xae>
 8002d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0xd2>
 8002d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_UART_IRQHandler+0xf6>
 8002d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d011      	beq.n	8002de6 <HAL_UART_IRQHandler+0x126>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f043 0208 	orr.w	r2, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 81ed 	beq.w	80031ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_UART_IRQHandler+0x14e>
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fbf2 	bl	80035f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_UART_IRQHandler+0x17a>
 8002e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04f      	beq.n	8002eda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa9a 	bl	8003374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d141      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1d9      	bne.n	8002e4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a7d      	ldr	r2, [pc, #500]	; (800309c <HAL_UART_IRQHandler+0x3dc>)
 8002ea8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fcf3 	bl	800189a <HAL_DMA_Abort_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	e00e      	b.n	8002ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f986 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed0:	e00a      	b.n	8002ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f982 	bl	80031dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e006      	b.n	8002ee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f97e 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ee6:	e170      	b.n	80031ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	bf00      	nop
    return;
 8002eea:	e16e      	b.n	80031ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 814a 	bne.w	800318a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8143 	beq.w	800318a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 813c 	beq.w	800318a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	f040 80b4 	bne.w	80030a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8140 	beq.w	80031ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f080 8139 	bcs.w	80031ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f62:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	f000 8088 	beq.w	8003082 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002faa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1d9      	bne.n	8002f72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
 8002fcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e1      	bne.n	8002fbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3314      	adds	r3, #20
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800300a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800300c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3314      	adds	r3, #20
 800301a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800301e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003020:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003024:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800302c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e3      	bne.n	8002ffa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003052:	f023 0310 	bic.w	r3, r3, #16
 8003056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003064:	65ba      	str	r2, [r7, #88]	; 0x58
 8003066:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800306a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e3      	bne.n	8003040 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fb9c 	bl	80017ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308a:	b29b      	uxth	r3, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8b6 	bl	8003204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003098:	e099      	b.n	80031ce <HAL_UART_IRQHandler+0x50e>
 800309a:	bf00      	nop
 800309c:	0800343b 	.word	0x0800343b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 808b 	beq.w	80031d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8086 	beq.w	80031d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	330c      	adds	r3, #12
 80030e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030ea:	647a      	str	r2, [r7, #68]	; 0x44
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e3      	bne.n	80030c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	623b      	str	r3, [r7, #32]
   return(result);
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003122:	633a      	str	r2, [r7, #48]	; 0x30
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	330c      	adds	r3, #12
 800314a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	60fb      	str	r3, [r7, #12]
   return(result);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0310 	bic.w	r3, r3, #16
 800315a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003168:	61fa      	str	r2, [r7, #28]
 800316a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316c:	69b9      	ldr	r1, [r7, #24]
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	e841 2300 	strex	r3, r2, [r1]
 8003174:	617b      	str	r3, [r7, #20]
   return(result);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1e3      	bne.n	8003144 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800317c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f83e 	bl	8003204 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003188:	e023      	b.n	80031d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_UART_IRQHandler+0x4ea>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9bd 	bl	8003522 <UART_Transmit_IT>
    return;
 80031a8:	e014      	b.n	80031d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <HAL_UART_IRQHandler+0x514>
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9fd 	bl	80035c2 <UART_EndTransmit_IT>
    return;
 80031c8:	e004      	b.n	80031d4 <HAL_UART_IRQHandler+0x514>
    return;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <HAL_UART_IRQHandler+0x514>
      return;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <HAL_UART_IRQHandler+0x514>
      return;
 80031d2:	bf00      	nop
  }
}
 80031d4:	37e8      	adds	r7, #232	; 0xe8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop

080031dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b090      	sub	sp, #64	; 0x40
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	e050      	b.n	80032d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d04c      	beq.n	80032d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <UART_WaitOnFlagUntilTimeout+0x30>
 800323c:	f7fe f9a0 	bl	8001580 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003248:	429a      	cmp	r2, r3
 800324a:	d241      	bcs.n	80032d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	330c      	adds	r3, #12
 800326a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800326c:	637a      	str	r2, [r7, #52]	; 0x34
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	613b      	str	r3, [r7, #16]
   return(result);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032a0:	623a      	str	r2, [r7, #32]
 80032a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	69f9      	ldr	r1, [r7, #28]
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e00f      	b.n	80032f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d09f      	beq.n	800322e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3740      	adds	r7, #64	; 0x40
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	88fa      	ldrh	r2, [r7, #6]
 8003310:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2222      	movs	r2, #34	; 0x22
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003344:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0220 	orr.w	r2, r2, #32
 8003364:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003374:	b480      	push	{r7}
 8003376:	b095      	sub	sp, #84	; 0x54
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800339c:	643a      	str	r2, [r7, #64]	; 0x40
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033a4:	e841 2300 	strex	r3, r2, [r1]
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e5      	bne.n	800337c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3314      	adds	r3, #20
 80033b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3314      	adds	r3, #20
 80033ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e5      	bne.n	80033b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d119      	bne.n	8003420 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 0310 	bic.w	r3, r3, #16
 8003402:	647b      	str	r3, [r7, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	330c      	adds	r3, #12
 800340a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340c:	61ba      	str	r2, [r7, #24]
 800340e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6979      	ldr	r1, [r7, #20]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	613b      	str	r3, [r7, #16]
   return(result);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800342e:	bf00      	nop
 8003430:	3754      	adds	r7, #84	; 0x54
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff fec1 	bl	80031dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	2200      	movs	r2, #0
 8003476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	2b00      	cmp	r3, #0
 8003488:	d117      	bne.n	80034ba <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fe9c 	bl	80031f0 <HAL_UART_AbortCpltCallback>
 80034b8:	e000      	b.n	80034bc <UART_DMATxAbortCallback+0x5a>
      return;
 80034ba:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2200      	movs	r2, #0
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d004      	beq.n	80034ea <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d117      	bne.n	800351a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fe6c 	bl	80031f0 <HAL_UART_AbortCpltCallback>
 8003518:	e000      	b.n	800351c <UART_DMARxAbortCallback+0x5a>
      return;
 800351a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b21      	cmp	r3, #33	; 0x21
 8003534:	d13e      	bne.n	80035b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d114      	bne.n	800356a <UART_Transmit_IT+0x48>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d110      	bne.n	800356a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	1c9a      	adds	r2, r3, #2
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	621a      	str	r2, [r3, #32]
 8003568:	e008      	b.n	800357c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6211      	str	r1, [r2, #32]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29b      	uxth	r3, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4619      	mov	r1, r3
 800358a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fbb8 	bl	8000d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b08c      	sub	sp, #48	; 0x30
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	f040 80ab 	bne.w	800375e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d117      	bne.n	8003642 <UART_Receive_IT+0x50>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d113      	bne.n	8003642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003630:	b29a      	uxth	r2, r3
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	1c9a      	adds	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
 8003640:	e026      	b.n	8003690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d007      	beq.n	8003666 <UART_Receive_IT+0x74>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <UART_Receive_IT+0x82>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e008      	b.n	8003686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003680:	b2da      	uxtb	r2, r3
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d15a      	bne.n	800375a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0220 	bic.w	r2, r2, #32
 80036b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d135      	bne.n	8003750 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	613b      	str	r3, [r7, #16]
   return(result);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f023 0310 	bic.w	r3, r3, #16
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370a:	623a      	str	r2, [r7, #32]
 800370c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	69f9      	ldr	r1, [r7, #28]
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	61bb      	str	r3, [r7, #24]
   return(result);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d10a      	bne.n	8003742 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fd5b 	bl	8003204 <HAL_UARTEx_RxEventCallback>
 800374e:	e002      	b.n	8003756 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd faf1 	bl	8000d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e002      	b.n	8003760 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3730      	adds	r7, #48	; 0x30
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b0c0      	sub	sp, #256	; 0x100
 800376e:	af00      	add	r7, sp, #0
 8003770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	ea40 0301 	orr.w	r3, r0, r1
 8003790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c0:	f021 010c 	bic.w	r1, r1, #12
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ce:	430b      	orrs	r3, r1
 80037d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	6999      	ldr	r1, [r3, #24]
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	ea40 0301 	orr.w	r3, r0, r1
 80037ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <UART_SetConfig+0x2cc>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d005      	beq.n	8003808 <UART_SetConfig+0xa0>
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <UART_SetConfig+0x2d0>)
 8003804:	429a      	cmp	r2, r3
 8003806:	d104      	bne.n	8003812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe fe98 	bl	800253c <HAL_RCC_GetPCLK2Freq>
 800380c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003810:	e003      	b.n	800381a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003812:	f7fe fe7f 	bl	8002514 <HAL_RCC_GetPCLK1Freq>
 8003816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	f040 810c 	bne.w	8003a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	1891      	adds	r1, r2, r2
 8003840:	65b9      	str	r1, [r7, #88]	; 0x58
 8003842:	415b      	adcs	r3, r3
 8003844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800384a:	4621      	mov	r1, r4
 800384c:	eb12 0801 	adds.w	r8, r2, r1
 8003850:	4629      	mov	r1, r5
 8003852:	eb43 0901 	adc.w	r9, r3, r1
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386a:	4690      	mov	r8, r2
 800386c:	4699      	mov	r9, r3
 800386e:	4623      	mov	r3, r4
 8003870:	eb18 0303 	adds.w	r3, r8, r3
 8003874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003878:	462b      	mov	r3, r5
 800387a:	eb49 0303 	adc.w	r3, r9, r3
 800387e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800388e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003896:	460b      	mov	r3, r1
 8003898:	18db      	adds	r3, r3, r3
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	4613      	mov	r3, r2
 800389e:	eb42 0303 	adc.w	r3, r2, r3
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54
 80038a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038ac:	f7fc fd08 	bl	80002c0 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <UART_SetConfig+0x2d4>)
 80038b6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	011c      	lsls	r4, r3, #4
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038d8:	415b      	adcs	r3, r3
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e0:	4641      	mov	r1, r8
 80038e2:	eb12 0a01 	adds.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003900:	4692      	mov	sl, r2
 8003902:	469b      	mov	fp, r3
 8003904:	4643      	mov	r3, r8
 8003906:	eb1a 0303 	adds.w	r3, sl, r3
 800390a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800390e:	464b      	mov	r3, r9
 8003910:	eb4b 0303 	adc.w	r3, fp, r3
 8003914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800392c:	460b      	mov	r3, r1
 800392e:	18db      	adds	r3, r3, r3
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
 8003932:	4613      	mov	r3, r2
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
 800393a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800393e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003942:	f7fc fcbd 	bl	80002c0 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4611      	mov	r1, r2
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <UART_SetConfig+0x2d4>)
 800394e:	fba3 2301 	umull	r2, r3, r3, r1
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	1acb      	subs	r3, r1, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003964:	fba3 2302 	umull	r2, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003970:	441c      	add	r4, r3
 8003972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003976:	2200      	movs	r2, #0
 8003978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800397c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003984:	4642      	mov	r2, r8
 8003986:	464b      	mov	r3, r9
 8003988:	1891      	adds	r1, r2, r2
 800398a:	63b9      	str	r1, [r7, #56]	; 0x38
 800398c:	415b      	adcs	r3, r3
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003994:	4641      	mov	r1, r8
 8003996:	1851      	adds	r1, r2, r1
 8003998:	6339      	str	r1, [r7, #48]	; 0x30
 800399a:	4649      	mov	r1, r9
 800399c:	414b      	adcs	r3, r1
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039ac:	4659      	mov	r1, fp
 80039ae:	00cb      	lsls	r3, r1, #3
 80039b0:	4651      	mov	r1, sl
 80039b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b6:	4651      	mov	r1, sl
 80039b8:	00ca      	lsls	r2, r1, #3
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	4642      	mov	r2, r8
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c8:	464b      	mov	r3, r9
 80039ca:	460a      	mov	r2, r1
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039e8:	460b      	mov	r3, r1
 80039ea:	18db      	adds	r3, r3, r3
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	4613      	mov	r3, r2
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039fe:	f7fc fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 0207 	and.w	r2, r3, #7
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4422      	add	r2, r4
 8003a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a30:	e105      	b.n	8003c3e <UART_SetConfig+0x4d6>
 8003a32:	bf00      	nop
 8003a34:	40011000 	.word	0x40011000
 8003a38:	40011400 	.word	0x40011400
 8003a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a52:	4642      	mov	r2, r8
 8003a54:	464b      	mov	r3, r9
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	6239      	str	r1, [r7, #32]
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a62:	4641      	mov	r1, r8
 8003a64:	1854      	adds	r4, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0501 	adc.w	r5, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	00eb      	lsls	r3, r5, #3
 8003a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7a:	00e2      	lsls	r2, r4, #3
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4643      	mov	r3, r8
 8003a82:	18e3      	adds	r3, r4, r3
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a88:	464b      	mov	r3, r9
 8003a8a:	eb45 0303 	adc.w	r3, r5, r3
 8003a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aae:	4629      	mov	r1, r5
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab8:	4621      	mov	r1, r4
 8003aba:	008a      	lsls	r2, r1, #2
 8003abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ac0:	f7fc fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	011c      	lsls	r4, r3, #4
 8003ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	61b9      	str	r1, [r7, #24]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6139      	str	r1, [r7, #16]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	008b      	lsls	r3, r1, #2
 8003b50:	4641      	mov	r1, r8
 8003b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b56:	4641      	mov	r1, r8
 8003b58:	008a      	lsls	r2, r1, #2
 8003b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b5e:	f7fc fbaf 	bl	80002c0 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b86:	441c      	add	r4, r3
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b90:	677a      	str	r2, [r7, #116]	; 0x74
 8003b92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b96:	4642      	mov	r2, r8
 8003b98:	464b      	mov	r3, r9
 8003b9a:	1891      	adds	r1, r2, r2
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	415b      	adcs	r3, r3
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	1851      	adds	r1, r2, r1
 8003baa:	6039      	str	r1, [r7, #0]
 8003bac:	4649      	mov	r1, r9
 8003bae:	414b      	adcs	r3, r1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	00cb      	lsls	r3, r1, #3
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc8:	4651      	mov	r1, sl
 8003bca:	00ca      	lsls	r2, r1, #3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
 8003bec:	667a      	str	r2, [r7, #100]	; 0x64
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	008b      	lsls	r3, r1, #2
 8003bfe:	4641      	mov	r1, r8
 8003c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c04:	4641      	mov	r1, r8
 8003c06:	008a      	lsls	r2, r1, #2
 8003c08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c0c:	f7fc fb58 	bl	80002c0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c16:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2164      	movs	r1, #100	; 0x64
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4422      	add	r2, r4
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	bf00      	nop
 8003c40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4a:	bf00      	nop
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <__errno>:
 8003c50:	4b01      	ldr	r3, [pc, #4]	; (8003c58 <__errno+0x8>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000120 	.word	0x20000120

08003c5c <__libc_init_array>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	; (8003c94 <__libc_init_array+0x38>)
 8003c60:	4c0d      	ldr	r4, [pc, #52]	; (8003c98 <__libc_init_array+0x3c>)
 8003c62:	1b64      	subs	r4, r4, r5
 8003c64:	10a4      	asrs	r4, r4, #2
 8003c66:	2600      	movs	r6, #0
 8003c68:	42a6      	cmp	r6, r4
 8003c6a:	d109      	bne.n	8003c80 <__libc_init_array+0x24>
 8003c6c:	4d0b      	ldr	r5, [pc, #44]	; (8003c9c <__libc_init_array+0x40>)
 8003c6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ca0 <__libc_init_array+0x44>)
 8003c70:	f001 f978 	bl	8004f64 <_init>
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	2600      	movs	r6, #0
 8003c7a:	42a6      	cmp	r6, r4
 8003c7c:	d105      	bne.n	8003c8a <__libc_init_array+0x2e>
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c84:	4798      	blx	r3
 8003c86:	3601      	adds	r6, #1
 8003c88:	e7ee      	b.n	8003c68 <__libc_init_array+0xc>
 8003c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8e:	4798      	blx	r3
 8003c90:	3601      	adds	r6, #1
 8003c92:	e7f2      	b.n	8003c7a <__libc_init_array+0x1e>
 8003c94:	08005294 	.word	0x08005294
 8003c98:	08005294 	.word	0x08005294
 8003c9c:	08005294 	.word	0x08005294
 8003ca0:	08005298 	.word	0x08005298

08003ca4 <memcpy>:
 8003ca4:	440a      	add	r2, r1
 8003ca6:	4291      	cmp	r1, r2
 8003ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cac:	d100      	bne.n	8003cb0 <memcpy+0xc>
 8003cae:	4770      	bx	lr
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cba:	4291      	cmp	r1, r2
 8003cbc:	d1f9      	bne.n	8003cb2 <memcpy+0xe>
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <memset>:
 8003cc0:	4402      	add	r2, r0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <siscanf>:
 8003cd0:	b40e      	push	{r1, r2, r3}
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	b09f      	sub	sp, #124	; 0x7c
 8003cd6:	ac21      	add	r4, sp, #132	; 0x84
 8003cd8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003cdc:	f854 2b04 	ldr.w	r2, [r4], #4
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003ce6:	9004      	str	r0, [sp, #16]
 8003ce8:	9008      	str	r0, [sp, #32]
 8003cea:	f7fc fa8b 	bl	8000204 <strlen>
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <siscanf+0x50>)
 8003cf0:	9005      	str	r0, [sp, #20]
 8003cf2:	9009      	str	r0, [sp, #36]	; 0x24
 8003cf4:	930d      	str	r3, [sp, #52]	; 0x34
 8003cf6:	480b      	ldr	r0, [pc, #44]	; (8003d24 <siscanf+0x54>)
 8003cf8:	9a01      	ldr	r2, [sp, #4]
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	9403      	str	r4, [sp, #12]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9311      	str	r3, [sp, #68]	; 0x44
 8003d02:	9316      	str	r3, [sp, #88]	; 0x58
 8003d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d08:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003d0c:	a904      	add	r1, sp, #16
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f000 fa10 	bl	8004134 <__ssvfiscanf_r>
 8003d14:	b01f      	add	sp, #124	; 0x7c
 8003d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d1a:	b003      	add	sp, #12
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	08003d29 	.word	0x08003d29
 8003d24:	20000120 	.word	0x20000120

08003d28 <__seofread>:
 8003d28:	2000      	movs	r0, #0
 8003d2a:	4770      	bx	lr

08003d2c <strncmp>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	b17a      	cbz	r2, 8003d50 <strncmp+0x24>
 8003d30:	4603      	mov	r3, r0
 8003d32:	3901      	subs	r1, #1
 8003d34:	1884      	adds	r4, r0, r2
 8003d36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003d3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003d3e:	4290      	cmp	r0, r2
 8003d40:	d101      	bne.n	8003d46 <strncmp+0x1a>
 8003d42:	42a3      	cmp	r3, r4
 8003d44:	d101      	bne.n	8003d4a <strncmp+0x1e>
 8003d46:	1a80      	subs	r0, r0, r2
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d1f3      	bne.n	8003d36 <strncmp+0xa>
 8003d4e:	e7fa      	b.n	8003d46 <strncmp+0x1a>
 8003d50:	4610      	mov	r0, r2
 8003d52:	e7f9      	b.n	8003d48 <strncmp+0x1c>

08003d54 <_vsniprintf_r>:
 8003d54:	b530      	push	{r4, r5, lr}
 8003d56:	4614      	mov	r4, r2
 8003d58:	2c00      	cmp	r4, #0
 8003d5a:	b09b      	sub	sp, #108	; 0x6c
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	da05      	bge.n	8003d6e <_vsniprintf_r+0x1a>
 8003d62:	238b      	movs	r3, #139	; 0x8b
 8003d64:	6003      	str	r3, [r0, #0]
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6a:	b01b      	add	sp, #108	; 0x6c
 8003d6c:	bd30      	pop	{r4, r5, pc}
 8003d6e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d72:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003d76:	bf14      	ite	ne
 8003d78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d7c:	4623      	moveq	r3, r4
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	9305      	str	r3, [sp, #20]
 8003d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d86:	9100      	str	r1, [sp, #0]
 8003d88:	9104      	str	r1, [sp, #16]
 8003d8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003d8e:	4669      	mov	r1, sp
 8003d90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d92:	f000 f875 	bl	8003e80 <_svfiprintf_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	bfbc      	itt	lt
 8003d9a:	238b      	movlt	r3, #139	; 0x8b
 8003d9c:	602b      	strlt	r3, [r5, #0]
 8003d9e:	2c00      	cmp	r4, #0
 8003da0:	d0e3      	beq.n	8003d6a <_vsniprintf_r+0x16>
 8003da2:	9b00      	ldr	r3, [sp, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e7df      	b.n	8003d6a <_vsniprintf_r+0x16>
	...

08003dac <vsniprintf>:
 8003dac:	b507      	push	{r0, r1, r2, lr}
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	460a      	mov	r2, r1
 8003db4:	4601      	mov	r1, r0
 8003db6:	4803      	ldr	r0, [pc, #12]	; (8003dc4 <vsniprintf+0x18>)
 8003db8:	6800      	ldr	r0, [r0, #0]
 8003dba:	f7ff ffcb 	bl	8003d54 <_vsniprintf_r>
 8003dbe:	b003      	add	sp, #12
 8003dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc4:	20000120 	.word	0x20000120

08003dc8 <__ssputs_r>:
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	688e      	ldr	r6, [r1, #8]
 8003dce:	429e      	cmp	r6, r3
 8003dd0:	4682      	mov	sl, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4690      	mov	r8, r2
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	d838      	bhi.n	8003e4c <__ssputs_r+0x84>
 8003dda:	898a      	ldrh	r2, [r1, #12]
 8003ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003de0:	d032      	beq.n	8003e48 <__ssputs_r+0x80>
 8003de2:	6825      	ldr	r5, [r4, #0]
 8003de4:	6909      	ldr	r1, [r1, #16]
 8003de6:	eba5 0901 	sub.w	r9, r5, r1
 8003dea:	6965      	ldr	r5, [r4, #20]
 8003dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df4:	3301      	adds	r3, #1
 8003df6:	444b      	add	r3, r9
 8003df8:	106d      	asrs	r5, r5, #1
 8003dfa:	429d      	cmp	r5, r3
 8003dfc:	bf38      	it	cc
 8003dfe:	461d      	movcc	r5, r3
 8003e00:	0553      	lsls	r3, r2, #21
 8003e02:	d531      	bpl.n	8003e68 <__ssputs_r+0xa0>
 8003e04:	4629      	mov	r1, r5
 8003e06:	f000 ffe5 	bl	8004dd4 <_malloc_r>
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	b950      	cbnz	r0, 8003e24 <__ssputs_r+0x5c>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	f8ca 3000 	str.w	r3, [sl]
 8003e14:	89a3      	ldrh	r3, [r4, #12]
 8003e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e1a:	81a3      	strh	r3, [r4, #12]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e24:	6921      	ldr	r1, [r4, #16]
 8003e26:	464a      	mov	r2, r9
 8003e28:	f7ff ff3c 	bl	8003ca4 <memcpy>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	6126      	str	r6, [r4, #16]
 8003e3a:	6165      	str	r5, [r4, #20]
 8003e3c:	444e      	add	r6, r9
 8003e3e:	eba5 0509 	sub.w	r5, r5, r9
 8003e42:	6026      	str	r6, [r4, #0]
 8003e44:	60a5      	str	r5, [r4, #8]
 8003e46:	463e      	mov	r6, r7
 8003e48:	42be      	cmp	r6, r7
 8003e4a:	d900      	bls.n	8003e4e <__ssputs_r+0x86>
 8003e4c:	463e      	mov	r6, r7
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	4632      	mov	r2, r6
 8003e52:	4641      	mov	r1, r8
 8003e54:	f000 ff38 	bl	8004cc8 <memmove>
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	1b9b      	subs	r3, r3, r6
 8003e5c:	60a3      	str	r3, [r4, #8]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	4433      	add	r3, r6
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	2000      	movs	r0, #0
 8003e66:	e7db      	b.n	8003e20 <__ssputs_r+0x58>
 8003e68:	462a      	mov	r2, r5
 8003e6a:	f001 f827 	bl	8004ebc <_realloc_r>
 8003e6e:	4606      	mov	r6, r0
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d1e1      	bne.n	8003e38 <__ssputs_r+0x70>
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	4650      	mov	r0, sl
 8003e78:	f000 ff40 	bl	8004cfc <_free_r>
 8003e7c:	e7c7      	b.n	8003e0e <__ssputs_r+0x46>
	...

08003e80 <_svfiprintf_r>:
 8003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	4698      	mov	r8, r3
 8003e86:	898b      	ldrh	r3, [r1, #12]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	b09d      	sub	sp, #116	; 0x74
 8003e8c:	4607      	mov	r7, r0
 8003e8e:	460d      	mov	r5, r1
 8003e90:	4614      	mov	r4, r2
 8003e92:	d50e      	bpl.n	8003eb2 <_svfiprintf_r+0x32>
 8003e94:	690b      	ldr	r3, [r1, #16]
 8003e96:	b963      	cbnz	r3, 8003eb2 <_svfiprintf_r+0x32>
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	f000 ff9b 	bl	8004dd4 <_malloc_r>
 8003e9e:	6028      	str	r0, [r5, #0]
 8003ea0:	6128      	str	r0, [r5, #16]
 8003ea2:	b920      	cbnz	r0, 8003eae <_svfiprintf_r+0x2e>
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	e0d1      	b.n	8004052 <_svfiprintf_r+0x1d2>
 8003eae:	2340      	movs	r3, #64	; 0x40
 8003eb0:	616b      	str	r3, [r5, #20]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec0:	2330      	movs	r3, #48	; 0x30
 8003ec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800406c <_svfiprintf_r+0x1ec>
 8003ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eca:	f04f 0901 	mov.w	r9, #1
 8003ece:	4623      	mov	r3, r4
 8003ed0:	469a      	mov	sl, r3
 8003ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed6:	b10a      	cbz	r2, 8003edc <_svfiprintf_r+0x5c>
 8003ed8:	2a25      	cmp	r2, #37	; 0x25
 8003eda:	d1f9      	bne.n	8003ed0 <_svfiprintf_r+0x50>
 8003edc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee0:	d00b      	beq.n	8003efa <_svfiprintf_r+0x7a>
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	4638      	mov	r0, r7
 8003eea:	f7ff ff6d 	bl	8003dc8 <__ssputs_r>
 8003eee:	3001      	adds	r0, #1
 8003ef0:	f000 80aa 	beq.w	8004048 <_svfiprintf_r+0x1c8>
 8003ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef6:	445a      	add	r2, fp
 8003ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8003efa:	f89a 3000 	ldrb.w	r3, [sl]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80a2 	beq.w	8004048 <_svfiprintf_r+0x1c8>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0e:	f10a 0a01 	add.w	sl, sl, #1
 8003f12:	9304      	str	r3, [sp, #16]
 8003f14:	9307      	str	r3, [sp, #28]
 8003f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f1c:	4654      	mov	r4, sl
 8003f1e:	2205      	movs	r2, #5
 8003f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f24:	4851      	ldr	r0, [pc, #324]	; (800406c <_svfiprintf_r+0x1ec>)
 8003f26:	f7fc f97b 	bl	8000220 <memchr>
 8003f2a:	9a04      	ldr	r2, [sp, #16]
 8003f2c:	b9d8      	cbnz	r0, 8003f66 <_svfiprintf_r+0xe6>
 8003f2e:	06d0      	lsls	r0, r2, #27
 8003f30:	bf44      	itt	mi
 8003f32:	2320      	movmi	r3, #32
 8003f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f38:	0711      	lsls	r1, r2, #28
 8003f3a:	bf44      	itt	mi
 8003f3c:	232b      	movmi	r3, #43	; 0x2b
 8003f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f42:	f89a 3000 	ldrb.w	r3, [sl]
 8003f46:	2b2a      	cmp	r3, #42	; 0x2a
 8003f48:	d015      	beq.n	8003f76 <_svfiprintf_r+0xf6>
 8003f4a:	9a07      	ldr	r2, [sp, #28]
 8003f4c:	4654      	mov	r4, sl
 8003f4e:	2000      	movs	r0, #0
 8003f50:	f04f 0c0a 	mov.w	ip, #10
 8003f54:	4621      	mov	r1, r4
 8003f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5a:	3b30      	subs	r3, #48	; 0x30
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d94e      	bls.n	8003ffe <_svfiprintf_r+0x17e>
 8003f60:	b1b0      	cbz	r0, 8003f90 <_svfiprintf_r+0x110>
 8003f62:	9207      	str	r2, [sp, #28]
 8003f64:	e014      	b.n	8003f90 <_svfiprintf_r+0x110>
 8003f66:	eba0 0308 	sub.w	r3, r0, r8
 8003f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	46a2      	mov	sl, r4
 8003f74:	e7d2      	b.n	8003f1c <_svfiprintf_r+0x9c>
 8003f76:	9b03      	ldr	r3, [sp, #12]
 8003f78:	1d19      	adds	r1, r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	9103      	str	r1, [sp, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfbb      	ittet	lt
 8003f82:	425b      	neglt	r3, r3
 8003f84:	f042 0202 	orrlt.w	r2, r2, #2
 8003f88:	9307      	strge	r3, [sp, #28]
 8003f8a:	9307      	strlt	r3, [sp, #28]
 8003f8c:	bfb8      	it	lt
 8003f8e:	9204      	strlt	r2, [sp, #16]
 8003f90:	7823      	ldrb	r3, [r4, #0]
 8003f92:	2b2e      	cmp	r3, #46	; 0x2e
 8003f94:	d10c      	bne.n	8003fb0 <_svfiprintf_r+0x130>
 8003f96:	7863      	ldrb	r3, [r4, #1]
 8003f98:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9a:	d135      	bne.n	8004008 <_svfiprintf_r+0x188>
 8003f9c:	9b03      	ldr	r3, [sp, #12]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	9203      	str	r2, [sp, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bfb8      	it	lt
 8003fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fac:	3402      	adds	r4, #2
 8003fae:	9305      	str	r3, [sp, #20]
 8003fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800407c <_svfiprintf_r+0x1fc>
 8003fb4:	7821      	ldrb	r1, [r4, #0]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	4650      	mov	r0, sl
 8003fba:	f7fc f931 	bl	8000220 <memchr>
 8003fbe:	b140      	cbz	r0, 8003fd2 <_svfiprintf_r+0x152>
 8003fc0:	2340      	movs	r3, #64	; 0x40
 8003fc2:	eba0 000a 	sub.w	r0, r0, sl
 8003fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8003fca:	9b04      	ldr	r3, [sp, #16]
 8003fcc:	4303      	orrs	r3, r0
 8003fce:	3401      	adds	r4, #1
 8003fd0:	9304      	str	r3, [sp, #16]
 8003fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd6:	4826      	ldr	r0, [pc, #152]	; (8004070 <_svfiprintf_r+0x1f0>)
 8003fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fdc:	2206      	movs	r2, #6
 8003fde:	f7fc f91f 	bl	8000220 <memchr>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d038      	beq.n	8004058 <_svfiprintf_r+0x1d8>
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <_svfiprintf_r+0x1f4>)
 8003fe8:	bb1b      	cbnz	r3, 8004032 <_svfiprintf_r+0x1b2>
 8003fea:	9b03      	ldr	r3, [sp, #12]
 8003fec:	3307      	adds	r3, #7
 8003fee:	f023 0307 	bic.w	r3, r3, #7
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	9303      	str	r3, [sp, #12]
 8003ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff8:	4433      	add	r3, r6
 8003ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffc:	e767      	b.n	8003ece <_svfiprintf_r+0x4e>
 8003ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004002:	460c      	mov	r4, r1
 8004004:	2001      	movs	r0, #1
 8004006:	e7a5      	b.n	8003f54 <_svfiprintf_r+0xd4>
 8004008:	2300      	movs	r3, #0
 800400a:	3401      	adds	r4, #1
 800400c:	9305      	str	r3, [sp, #20]
 800400e:	4619      	mov	r1, r3
 8004010:	f04f 0c0a 	mov.w	ip, #10
 8004014:	4620      	mov	r0, r4
 8004016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401a:	3a30      	subs	r2, #48	; 0x30
 800401c:	2a09      	cmp	r2, #9
 800401e:	d903      	bls.n	8004028 <_svfiprintf_r+0x1a8>
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0c5      	beq.n	8003fb0 <_svfiprintf_r+0x130>
 8004024:	9105      	str	r1, [sp, #20]
 8004026:	e7c3      	b.n	8003fb0 <_svfiprintf_r+0x130>
 8004028:	fb0c 2101 	mla	r1, ip, r1, r2
 800402c:	4604      	mov	r4, r0
 800402e:	2301      	movs	r3, #1
 8004030:	e7f0      	b.n	8004014 <_svfiprintf_r+0x194>
 8004032:	ab03      	add	r3, sp, #12
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	462a      	mov	r2, r5
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <_svfiprintf_r+0x1f8>)
 800403a:	a904      	add	r1, sp, #16
 800403c:	4638      	mov	r0, r7
 800403e:	f3af 8000 	nop.w
 8004042:	1c42      	adds	r2, r0, #1
 8004044:	4606      	mov	r6, r0
 8004046:	d1d6      	bne.n	8003ff6 <_svfiprintf_r+0x176>
 8004048:	89ab      	ldrh	r3, [r5, #12]
 800404a:	065b      	lsls	r3, r3, #25
 800404c:	f53f af2c 	bmi.w	8003ea8 <_svfiprintf_r+0x28>
 8004050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004052:	b01d      	add	sp, #116	; 0x74
 8004054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004058:	ab03      	add	r3, sp, #12
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	462a      	mov	r2, r5
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <_svfiprintf_r+0x1f8>)
 8004060:	a904      	add	r1, sp, #16
 8004062:	4638      	mov	r0, r7
 8004064:	f000 fa4c 	bl	8004500 <_printf_i>
 8004068:	e7eb      	b.n	8004042 <_svfiprintf_r+0x1c2>
 800406a:	bf00      	nop
 800406c:	080050dc 	.word	0x080050dc
 8004070:	080050e6 	.word	0x080050e6
 8004074:	00000000 	.word	0x00000000
 8004078:	08003dc9 	.word	0x08003dc9
 800407c:	080050e2 	.word	0x080050e2

08004080 <_sungetc_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	1c4b      	adds	r3, r1, #1
 8004084:	4614      	mov	r4, r2
 8004086:	d103      	bne.n	8004090 <_sungetc_r+0x10>
 8004088:	f04f 35ff 	mov.w	r5, #4294967295
 800408c:	4628      	mov	r0, r5
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	8993      	ldrh	r3, [r2, #12]
 8004092:	f023 0320 	bic.w	r3, r3, #32
 8004096:	8193      	strh	r3, [r2, #12]
 8004098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409a:	6852      	ldr	r2, [r2, #4]
 800409c:	b2cd      	uxtb	r5, r1
 800409e:	b18b      	cbz	r3, 80040c4 <_sungetc_r+0x44>
 80040a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040a2:	4293      	cmp	r3, r2
 80040a4:	dd08      	ble.n	80040b8 <_sungetc_r+0x38>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	6022      	str	r2, [r4, #0]
 80040ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	3301      	adds	r3, #1
 80040b4:	6063      	str	r3, [r4, #4]
 80040b6:	e7e9      	b.n	800408c <_sungetc_r+0xc>
 80040b8:	4621      	mov	r1, r4
 80040ba:	f000 fdc9 	bl	8004c50 <__submore>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0f1      	beq.n	80040a6 <_sungetc_r+0x26>
 80040c2:	e7e1      	b.n	8004088 <_sungetc_r+0x8>
 80040c4:	6921      	ldr	r1, [r4, #16]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	b151      	cbz	r1, 80040e0 <_sungetc_r+0x60>
 80040ca:	4299      	cmp	r1, r3
 80040cc:	d208      	bcs.n	80040e0 <_sungetc_r+0x60>
 80040ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80040d2:	42a9      	cmp	r1, r5
 80040d4:	d104      	bne.n	80040e0 <_sungetc_r+0x60>
 80040d6:	3b01      	subs	r3, #1
 80040d8:	3201      	adds	r2, #1
 80040da:	6023      	str	r3, [r4, #0]
 80040dc:	6062      	str	r2, [r4, #4]
 80040de:	e7d5      	b.n	800408c <_sungetc_r+0xc>
 80040e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80040e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e8:	6363      	str	r3, [r4, #52]	; 0x34
 80040ea:	2303      	movs	r3, #3
 80040ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80040ee:	4623      	mov	r3, r4
 80040f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	2301      	movs	r3, #1
 80040f8:	e7dc      	b.n	80040b4 <_sungetc_r+0x34>

080040fa <__ssrefill_r>:
 80040fa:	b510      	push	{r4, lr}
 80040fc:	460c      	mov	r4, r1
 80040fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004100:	b169      	cbz	r1, 800411e <__ssrefill_r+0x24>
 8004102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004106:	4299      	cmp	r1, r3
 8004108:	d001      	beq.n	800410e <__ssrefill_r+0x14>
 800410a:	f000 fdf7 	bl	8004cfc <_free_r>
 800410e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	2000      	movs	r0, #0
 8004114:	6360      	str	r0, [r4, #52]	; 0x34
 8004116:	b113      	cbz	r3, 800411e <__ssrefill_r+0x24>
 8004118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	bd10      	pop	{r4, pc}
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	2300      	movs	r3, #0
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f043 0320 	orr.w	r3, r3, #32
 800412c:	81a3      	strh	r3, [r4, #12]
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	e7f3      	b.n	800411c <__ssrefill_r+0x22>

08004134 <__ssvfiscanf_r>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	460c      	mov	r4, r1
 800413a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800413e:	2100      	movs	r1, #0
 8004140:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004144:	49a6      	ldr	r1, [pc, #664]	; (80043e0 <__ssvfiscanf_r+0x2ac>)
 8004146:	91a0      	str	r1, [sp, #640]	; 0x280
 8004148:	f10d 0804 	add.w	r8, sp, #4
 800414c:	49a5      	ldr	r1, [pc, #660]	; (80043e4 <__ssvfiscanf_r+0x2b0>)
 800414e:	4fa6      	ldr	r7, [pc, #664]	; (80043e8 <__ssvfiscanf_r+0x2b4>)
 8004150:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80043ec <__ssvfiscanf_r+0x2b8>
 8004154:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004158:	4606      	mov	r6, r0
 800415a:	91a1      	str	r1, [sp, #644]	; 0x284
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	7813      	ldrb	r3, [r2, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 815a 	beq.w	800441a <__ssvfiscanf_r+0x2e6>
 8004166:	5dd9      	ldrb	r1, [r3, r7]
 8004168:	f011 0108 	ands.w	r1, r1, #8
 800416c:	f102 0501 	add.w	r5, r2, #1
 8004170:	d019      	beq.n	80041a6 <__ssvfiscanf_r+0x72>
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	dd0f      	ble.n	8004198 <__ssvfiscanf_r+0x64>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	781a      	ldrb	r2, [r3, #0]
 800417c:	5cba      	ldrb	r2, [r7, r2]
 800417e:	0712      	lsls	r2, r2, #28
 8004180:	d401      	bmi.n	8004186 <__ssvfiscanf_r+0x52>
 8004182:	462a      	mov	r2, r5
 8004184:	e7eb      	b.n	800415e <__ssvfiscanf_r+0x2a>
 8004186:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004188:	3201      	adds	r2, #1
 800418a:	9245      	str	r2, [sp, #276]	; 0x114
 800418c:	6862      	ldr	r2, [r4, #4]
 800418e:	3301      	adds	r3, #1
 8004190:	3a01      	subs	r2, #1
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	e7ec      	b.n	8004172 <__ssvfiscanf_r+0x3e>
 8004198:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800419a:	4621      	mov	r1, r4
 800419c:	4630      	mov	r0, r6
 800419e:	4798      	blx	r3
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d0e9      	beq.n	8004178 <__ssvfiscanf_r+0x44>
 80041a4:	e7ed      	b.n	8004182 <__ssvfiscanf_r+0x4e>
 80041a6:	2b25      	cmp	r3, #37	; 0x25
 80041a8:	d012      	beq.n	80041d0 <__ssvfiscanf_r+0x9c>
 80041aa:	469a      	mov	sl, r3
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f340 8091 	ble.w	80042d6 <__ssvfiscanf_r+0x1a2>
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	7813      	ldrb	r3, [r2, #0]
 80041b8:	4553      	cmp	r3, sl
 80041ba:	f040 812e 	bne.w	800441a <__ssvfiscanf_r+0x2e6>
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80041c6:	3201      	adds	r2, #1
 80041c8:	3301      	adds	r3, #1
 80041ca:	6022      	str	r2, [r4, #0]
 80041cc:	9345      	str	r3, [sp, #276]	; 0x114
 80041ce:	e7d8      	b.n	8004182 <__ssvfiscanf_r+0x4e>
 80041d0:	9141      	str	r1, [sp, #260]	; 0x104
 80041d2:	9143      	str	r1, [sp, #268]	; 0x10c
 80041d4:	7853      	ldrb	r3, [r2, #1]
 80041d6:	2b2a      	cmp	r3, #42	; 0x2a
 80041d8:	bf02      	ittt	eq
 80041da:	2310      	moveq	r3, #16
 80041dc:	1c95      	addeq	r5, r2, #2
 80041de:	9341      	streq	r3, [sp, #260]	; 0x104
 80041e0:	220a      	movs	r2, #10
 80041e2:	46aa      	mov	sl, r5
 80041e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80041e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80041ec:	2b09      	cmp	r3, #9
 80041ee:	d91d      	bls.n	800422c <__ssvfiscanf_r+0xf8>
 80041f0:	487e      	ldr	r0, [pc, #504]	; (80043ec <__ssvfiscanf_r+0x2b8>)
 80041f2:	2203      	movs	r2, #3
 80041f4:	f7fc f814 	bl	8000220 <memchr>
 80041f8:	b140      	cbz	r0, 800420c <__ssvfiscanf_r+0xd8>
 80041fa:	2301      	movs	r3, #1
 80041fc:	eba0 0009 	sub.w	r0, r0, r9
 8004200:	fa03 f000 	lsl.w	r0, r3, r0
 8004204:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004206:	4318      	orrs	r0, r3
 8004208:	9041      	str	r0, [sp, #260]	; 0x104
 800420a:	4655      	mov	r5, sl
 800420c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004210:	2b78      	cmp	r3, #120	; 0x78
 8004212:	d806      	bhi.n	8004222 <__ssvfiscanf_r+0xee>
 8004214:	2b57      	cmp	r3, #87	; 0x57
 8004216:	d810      	bhi.n	800423a <__ssvfiscanf_r+0x106>
 8004218:	2b25      	cmp	r3, #37	; 0x25
 800421a:	d0c6      	beq.n	80041aa <__ssvfiscanf_r+0x76>
 800421c:	d856      	bhi.n	80042cc <__ssvfiscanf_r+0x198>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d064      	beq.n	80042ec <__ssvfiscanf_r+0x1b8>
 8004222:	2303      	movs	r3, #3
 8004224:	9347      	str	r3, [sp, #284]	; 0x11c
 8004226:	230a      	movs	r3, #10
 8004228:	9342      	str	r3, [sp, #264]	; 0x108
 800422a:	e071      	b.n	8004310 <__ssvfiscanf_r+0x1dc>
 800422c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800422e:	fb02 1103 	mla	r1, r2, r3, r1
 8004232:	3930      	subs	r1, #48	; 0x30
 8004234:	9143      	str	r1, [sp, #268]	; 0x10c
 8004236:	4655      	mov	r5, sl
 8004238:	e7d3      	b.n	80041e2 <__ssvfiscanf_r+0xae>
 800423a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800423e:	2a20      	cmp	r2, #32
 8004240:	d8ef      	bhi.n	8004222 <__ssvfiscanf_r+0xee>
 8004242:	a101      	add	r1, pc, #4	; (adr r1, 8004248 <__ssvfiscanf_r+0x114>)
 8004244:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004248:	080042fb 	.word	0x080042fb
 800424c:	08004223 	.word	0x08004223
 8004250:	08004223 	.word	0x08004223
 8004254:	08004359 	.word	0x08004359
 8004258:	08004223 	.word	0x08004223
 800425c:	08004223 	.word	0x08004223
 8004260:	08004223 	.word	0x08004223
 8004264:	08004223 	.word	0x08004223
 8004268:	08004223 	.word	0x08004223
 800426c:	08004223 	.word	0x08004223
 8004270:	08004223 	.word	0x08004223
 8004274:	0800436f 	.word	0x0800436f
 8004278:	08004345 	.word	0x08004345
 800427c:	080042d3 	.word	0x080042d3
 8004280:	080042d3 	.word	0x080042d3
 8004284:	080042d3 	.word	0x080042d3
 8004288:	08004223 	.word	0x08004223
 800428c:	08004349 	.word	0x08004349
 8004290:	08004223 	.word	0x08004223
 8004294:	08004223 	.word	0x08004223
 8004298:	08004223 	.word	0x08004223
 800429c:	08004223 	.word	0x08004223
 80042a0:	0800437f 	.word	0x0800437f
 80042a4:	08004351 	.word	0x08004351
 80042a8:	080042f3 	.word	0x080042f3
 80042ac:	08004223 	.word	0x08004223
 80042b0:	08004223 	.word	0x08004223
 80042b4:	0800437b 	.word	0x0800437b
 80042b8:	08004223 	.word	0x08004223
 80042bc:	08004345 	.word	0x08004345
 80042c0:	08004223 	.word	0x08004223
 80042c4:	08004223 	.word	0x08004223
 80042c8:	080042fb 	.word	0x080042fb
 80042cc:	3b45      	subs	r3, #69	; 0x45
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d8a7      	bhi.n	8004222 <__ssvfiscanf_r+0xee>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e01b      	b.n	800430e <__ssvfiscanf_r+0x1da>
 80042d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042d8:	4621      	mov	r1, r4
 80042da:	4630      	mov	r0, r6
 80042dc:	4798      	blx	r3
 80042de:	2800      	cmp	r0, #0
 80042e0:	f43f af68 	beq.w	80041b4 <__ssvfiscanf_r+0x80>
 80042e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f040 808d 	bne.w	8004406 <__ssvfiscanf_r+0x2d2>
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	e08f      	b.n	8004412 <__ssvfiscanf_r+0x2de>
 80042f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80042f4:	f042 0220 	orr.w	r2, r2, #32
 80042f8:	9241      	str	r2, [sp, #260]	; 0x104
 80042fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80042fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004300:	9241      	str	r2, [sp, #260]	; 0x104
 8004302:	2210      	movs	r2, #16
 8004304:	2b6f      	cmp	r3, #111	; 0x6f
 8004306:	9242      	str	r2, [sp, #264]	; 0x108
 8004308:	bf34      	ite	cc
 800430a:	2303      	movcc	r3, #3
 800430c:	2304      	movcs	r3, #4
 800430e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	dd42      	ble.n	800439c <__ssvfiscanf_r+0x268>
 8004316:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004318:	0659      	lsls	r1, r3, #25
 800431a:	d404      	bmi.n	8004326 <__ssvfiscanf_r+0x1f2>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	5cba      	ldrb	r2, [r7, r2]
 8004322:	0712      	lsls	r2, r2, #28
 8004324:	d441      	bmi.n	80043aa <__ssvfiscanf_r+0x276>
 8004326:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004328:	2b02      	cmp	r3, #2
 800432a:	dc50      	bgt.n	80043ce <__ssvfiscanf_r+0x29a>
 800432c:	466b      	mov	r3, sp
 800432e:	4622      	mov	r2, r4
 8004330:	a941      	add	r1, sp, #260	; 0x104
 8004332:	4630      	mov	r0, r6
 8004334:	f000 fa0a 	bl	800474c <_scanf_chars>
 8004338:	2801      	cmp	r0, #1
 800433a:	d06e      	beq.n	800441a <__ssvfiscanf_r+0x2e6>
 800433c:	2802      	cmp	r0, #2
 800433e:	f47f af20 	bne.w	8004182 <__ssvfiscanf_r+0x4e>
 8004342:	e7cf      	b.n	80042e4 <__ssvfiscanf_r+0x1b0>
 8004344:	220a      	movs	r2, #10
 8004346:	e7dd      	b.n	8004304 <__ssvfiscanf_r+0x1d0>
 8004348:	2300      	movs	r3, #0
 800434a:	9342      	str	r3, [sp, #264]	; 0x108
 800434c:	2303      	movs	r3, #3
 800434e:	e7de      	b.n	800430e <__ssvfiscanf_r+0x1da>
 8004350:	2308      	movs	r3, #8
 8004352:	9342      	str	r3, [sp, #264]	; 0x108
 8004354:	2304      	movs	r3, #4
 8004356:	e7da      	b.n	800430e <__ssvfiscanf_r+0x1da>
 8004358:	4629      	mov	r1, r5
 800435a:	4640      	mov	r0, r8
 800435c:	f000 fb48 	bl	80049f0 <__sccl>
 8004360:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004366:	9341      	str	r3, [sp, #260]	; 0x104
 8004368:	4605      	mov	r5, r0
 800436a:	2301      	movs	r3, #1
 800436c:	e7cf      	b.n	800430e <__ssvfiscanf_r+0x1da>
 800436e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004374:	9341      	str	r3, [sp, #260]	; 0x104
 8004376:	2300      	movs	r3, #0
 8004378:	e7c9      	b.n	800430e <__ssvfiscanf_r+0x1da>
 800437a:	2302      	movs	r3, #2
 800437c:	e7c7      	b.n	800430e <__ssvfiscanf_r+0x1da>
 800437e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004380:	06c3      	lsls	r3, r0, #27
 8004382:	f53f aefe 	bmi.w	8004182 <__ssvfiscanf_r+0x4e>
 8004386:	9b00      	ldr	r3, [sp, #0]
 8004388:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800438a:	1d19      	adds	r1, r3, #4
 800438c:	9100      	str	r1, [sp, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f010 0f01 	tst.w	r0, #1
 8004394:	bf14      	ite	ne
 8004396:	801a      	strhne	r2, [r3, #0]
 8004398:	601a      	streq	r2, [r3, #0]
 800439a:	e6f2      	b.n	8004182 <__ssvfiscanf_r+0x4e>
 800439c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800439e:	4621      	mov	r1, r4
 80043a0:	4630      	mov	r0, r6
 80043a2:	4798      	blx	r3
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d0b6      	beq.n	8004316 <__ssvfiscanf_r+0x1e2>
 80043a8:	e79c      	b.n	80042e4 <__ssvfiscanf_r+0x1b0>
 80043aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80043ac:	3201      	adds	r2, #1
 80043ae:	9245      	str	r2, [sp, #276]	; 0x114
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	3a01      	subs	r2, #1
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	6062      	str	r2, [r4, #4]
 80043b8:	dd02      	ble.n	80043c0 <__ssvfiscanf_r+0x28c>
 80043ba:	3301      	adds	r3, #1
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	e7ad      	b.n	800431c <__ssvfiscanf_r+0x1e8>
 80043c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043c2:	4621      	mov	r1, r4
 80043c4:	4630      	mov	r0, r6
 80043c6:	4798      	blx	r3
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d0a7      	beq.n	800431c <__ssvfiscanf_r+0x1e8>
 80043cc:	e78a      	b.n	80042e4 <__ssvfiscanf_r+0x1b0>
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	dc0e      	bgt.n	80043f0 <__ssvfiscanf_r+0x2bc>
 80043d2:	466b      	mov	r3, sp
 80043d4:	4622      	mov	r2, r4
 80043d6:	a941      	add	r1, sp, #260	; 0x104
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 fa11 	bl	8004800 <_scanf_i>
 80043de:	e7ab      	b.n	8004338 <__ssvfiscanf_r+0x204>
 80043e0:	08004081 	.word	0x08004081
 80043e4:	080040fb 	.word	0x080040fb
 80043e8:	0800512b 	.word	0x0800512b
 80043ec:	080050e2 	.word	0x080050e2
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <__ssvfiscanf_r+0x2ec>)
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f43f aec5 	beq.w	8004182 <__ssvfiscanf_r+0x4e>
 80043f8:	466b      	mov	r3, sp
 80043fa:	4622      	mov	r2, r4
 80043fc:	a941      	add	r1, sp, #260	; 0x104
 80043fe:	4630      	mov	r0, r6
 8004400:	f3af 8000 	nop.w
 8004404:	e798      	b.n	8004338 <__ssvfiscanf_r+0x204>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f013 0f40 	tst.w	r3, #64	; 0x40
 800440c:	bf18      	it	ne
 800440e:	f04f 30ff 	movne.w	r0, #4294967295
 8004412:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800441c:	e7f9      	b.n	8004412 <__ssvfiscanf_r+0x2de>
 800441e:	bf00      	nop
 8004420:	00000000 	.word	0x00000000

08004424 <_printf_common>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	4616      	mov	r6, r2
 800442a:	4699      	mov	r9, r3
 800442c:	688a      	ldr	r2, [r1, #8]
 800442e:	690b      	ldr	r3, [r1, #16]
 8004430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004434:	4293      	cmp	r3, r2
 8004436:	bfb8      	it	lt
 8004438:	4613      	movlt	r3, r2
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004440:	4607      	mov	r7, r0
 8004442:	460c      	mov	r4, r1
 8004444:	b10a      	cbz	r2, 800444a <_printf_common+0x26>
 8004446:	3301      	adds	r3, #1
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	0699      	lsls	r1, r3, #26
 800444e:	bf42      	ittt	mi
 8004450:	6833      	ldrmi	r3, [r6, #0]
 8004452:	3302      	addmi	r3, #2
 8004454:	6033      	strmi	r3, [r6, #0]
 8004456:	6825      	ldr	r5, [r4, #0]
 8004458:	f015 0506 	ands.w	r5, r5, #6
 800445c:	d106      	bne.n	800446c <_printf_common+0x48>
 800445e:	f104 0a19 	add.w	sl, r4, #25
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	6832      	ldr	r2, [r6, #0]
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	42ab      	cmp	r3, r5
 800446a:	dc26      	bgt.n	80044ba <_printf_common+0x96>
 800446c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004470:	1e13      	subs	r3, r2, #0
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	bf18      	it	ne
 8004476:	2301      	movne	r3, #1
 8004478:	0692      	lsls	r2, r2, #26
 800447a:	d42b      	bmi.n	80044d4 <_printf_common+0xb0>
 800447c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004480:	4649      	mov	r1, r9
 8004482:	4638      	mov	r0, r7
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d01e      	beq.n	80044c8 <_printf_common+0xa4>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	68e5      	ldr	r5, [r4, #12]
 800448e:	6832      	ldr	r2, [r6, #0]
 8004490:	f003 0306 	and.w	r3, r3, #6
 8004494:	2b04      	cmp	r3, #4
 8004496:	bf08      	it	eq
 8004498:	1aad      	subeq	r5, r5, r2
 800449a:	68a3      	ldr	r3, [r4, #8]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	bf0c      	ite	eq
 80044a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a4:	2500      	movne	r5, #0
 80044a6:	4293      	cmp	r3, r2
 80044a8:	bfc4      	itt	gt
 80044aa:	1a9b      	subgt	r3, r3, r2
 80044ac:	18ed      	addgt	r5, r5, r3
 80044ae:	2600      	movs	r6, #0
 80044b0:	341a      	adds	r4, #26
 80044b2:	42b5      	cmp	r5, r6
 80044b4:	d11a      	bne.n	80044ec <_printf_common+0xc8>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e008      	b.n	80044cc <_printf_common+0xa8>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4652      	mov	r2, sl
 80044be:	4649      	mov	r1, r9
 80044c0:	4638      	mov	r0, r7
 80044c2:	47c0      	blx	r8
 80044c4:	3001      	adds	r0, #1
 80044c6:	d103      	bne.n	80044d0 <_printf_common+0xac>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	3501      	adds	r5, #1
 80044d2:	e7c6      	b.n	8004462 <_printf_common+0x3e>
 80044d4:	18e1      	adds	r1, r4, r3
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	2030      	movs	r0, #48	; 0x30
 80044da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044de:	4422      	add	r2, r4
 80044e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044e8:	3302      	adds	r3, #2
 80044ea:	e7c7      	b.n	800447c <_printf_common+0x58>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4622      	mov	r2, r4
 80044f0:	4649      	mov	r1, r9
 80044f2:	4638      	mov	r0, r7
 80044f4:	47c0      	blx	r8
 80044f6:	3001      	adds	r0, #1
 80044f8:	d0e6      	beq.n	80044c8 <_printf_common+0xa4>
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7d9      	b.n	80044b2 <_printf_common+0x8e>
	...

08004500 <_printf_i>:
 8004500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	7e0f      	ldrb	r7, [r1, #24]
 8004506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004508:	2f78      	cmp	r7, #120	; 0x78
 800450a:	4691      	mov	r9, r2
 800450c:	4680      	mov	r8, r0
 800450e:	460c      	mov	r4, r1
 8004510:	469a      	mov	sl, r3
 8004512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004516:	d807      	bhi.n	8004528 <_printf_i+0x28>
 8004518:	2f62      	cmp	r7, #98	; 0x62
 800451a:	d80a      	bhi.n	8004532 <_printf_i+0x32>
 800451c:	2f00      	cmp	r7, #0
 800451e:	f000 80d8 	beq.w	80046d2 <_printf_i+0x1d2>
 8004522:	2f58      	cmp	r7, #88	; 0x58
 8004524:	f000 80a3 	beq.w	800466e <_printf_i+0x16e>
 8004528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004530:	e03a      	b.n	80045a8 <_printf_i+0xa8>
 8004532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004536:	2b15      	cmp	r3, #21
 8004538:	d8f6      	bhi.n	8004528 <_printf_i+0x28>
 800453a:	a101      	add	r1, pc, #4	; (adr r1, 8004540 <_printf_i+0x40>)
 800453c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004540:	08004599 	.word	0x08004599
 8004544:	080045ad 	.word	0x080045ad
 8004548:	08004529 	.word	0x08004529
 800454c:	08004529 	.word	0x08004529
 8004550:	08004529 	.word	0x08004529
 8004554:	08004529 	.word	0x08004529
 8004558:	080045ad 	.word	0x080045ad
 800455c:	08004529 	.word	0x08004529
 8004560:	08004529 	.word	0x08004529
 8004564:	08004529 	.word	0x08004529
 8004568:	08004529 	.word	0x08004529
 800456c:	080046b9 	.word	0x080046b9
 8004570:	080045dd 	.word	0x080045dd
 8004574:	0800469b 	.word	0x0800469b
 8004578:	08004529 	.word	0x08004529
 800457c:	08004529 	.word	0x08004529
 8004580:	080046db 	.word	0x080046db
 8004584:	08004529 	.word	0x08004529
 8004588:	080045dd 	.word	0x080045dd
 800458c:	08004529 	.word	0x08004529
 8004590:	08004529 	.word	0x08004529
 8004594:	080046a3 	.word	0x080046a3
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	602a      	str	r2, [r5, #0]
 80045a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0a3      	b.n	80046f4 <_printf_i+0x1f4>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	6829      	ldr	r1, [r5, #0]
 80045b0:	0606      	lsls	r6, r0, #24
 80045b2:	f101 0304 	add.w	r3, r1, #4
 80045b6:	d50a      	bpl.n	80045ce <_printf_i+0xce>
 80045b8:	680e      	ldr	r6, [r1, #0]
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	2e00      	cmp	r6, #0
 80045be:	da03      	bge.n	80045c8 <_printf_i+0xc8>
 80045c0:	232d      	movs	r3, #45	; 0x2d
 80045c2:	4276      	negs	r6, r6
 80045c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c8:	485e      	ldr	r0, [pc, #376]	; (8004744 <_printf_i+0x244>)
 80045ca:	230a      	movs	r3, #10
 80045cc:	e019      	b.n	8004602 <_printf_i+0x102>
 80045ce:	680e      	ldr	r6, [r1, #0]
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045d6:	bf18      	it	ne
 80045d8:	b236      	sxthne	r6, r6
 80045da:	e7ef      	b.n	80045bc <_printf_i+0xbc>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	0601      	lsls	r1, r0, #24
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0xec>
 80045e8:	681e      	ldr	r6, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0xf2>
 80045ec:	0646      	lsls	r6, r0, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0xe8>
 80045f0:	881e      	ldrh	r6, [r3, #0]
 80045f2:	4854      	ldr	r0, [pc, #336]	; (8004744 <_printf_i+0x244>)
 80045f4:	2f6f      	cmp	r7, #111	; 0x6f
 80045f6:	bf0c      	ite	eq
 80045f8:	2308      	moveq	r3, #8
 80045fa:	230a      	movne	r3, #10
 80045fc:	2100      	movs	r1, #0
 80045fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004602:	6865      	ldr	r5, [r4, #4]
 8004604:	60a5      	str	r5, [r4, #8]
 8004606:	2d00      	cmp	r5, #0
 8004608:	bfa2      	ittt	ge
 800460a:	6821      	ldrge	r1, [r4, #0]
 800460c:	f021 0104 	bicge.w	r1, r1, #4
 8004610:	6021      	strge	r1, [r4, #0]
 8004612:	b90e      	cbnz	r6, 8004618 <_printf_i+0x118>
 8004614:	2d00      	cmp	r5, #0
 8004616:	d04d      	beq.n	80046b4 <_printf_i+0x1b4>
 8004618:	4615      	mov	r5, r2
 800461a:	fbb6 f1f3 	udiv	r1, r6, r3
 800461e:	fb03 6711 	mls	r7, r3, r1, r6
 8004622:	5dc7      	ldrb	r7, [r0, r7]
 8004624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004628:	4637      	mov	r7, r6
 800462a:	42bb      	cmp	r3, r7
 800462c:	460e      	mov	r6, r1
 800462e:	d9f4      	bls.n	800461a <_printf_i+0x11a>
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10b      	bne.n	800464c <_printf_i+0x14c>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	07de      	lsls	r6, r3, #31
 8004638:	d508      	bpl.n	800464c <_printf_i+0x14c>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	6861      	ldr	r1, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	bfde      	ittt	le
 8004642:	2330      	movle	r3, #48	; 0x30
 8004644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800464c:	1b52      	subs	r2, r2, r5
 800464e:	6122      	str	r2, [r4, #16]
 8004650:	f8cd a000 	str.w	sl, [sp]
 8004654:	464b      	mov	r3, r9
 8004656:	aa03      	add	r2, sp, #12
 8004658:	4621      	mov	r1, r4
 800465a:	4640      	mov	r0, r8
 800465c:	f7ff fee2 	bl	8004424 <_printf_common>
 8004660:	3001      	adds	r0, #1
 8004662:	d14c      	bne.n	80046fe <_printf_i+0x1fe>
 8004664:	f04f 30ff 	mov.w	r0, #4294967295
 8004668:	b004      	add	sp, #16
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	4835      	ldr	r0, [pc, #212]	; (8004744 <_printf_i+0x244>)
 8004670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004674:	6829      	ldr	r1, [r5, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	f851 6b04 	ldr.w	r6, [r1], #4
 800467c:	6029      	str	r1, [r5, #0]
 800467e:	061d      	lsls	r5, r3, #24
 8004680:	d514      	bpl.n	80046ac <_printf_i+0x1ac>
 8004682:	07df      	lsls	r7, r3, #31
 8004684:	bf44      	itt	mi
 8004686:	f043 0320 	orrmi.w	r3, r3, #32
 800468a:	6023      	strmi	r3, [r4, #0]
 800468c:	b91e      	cbnz	r6, 8004696 <_printf_i+0x196>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f023 0320 	bic.w	r3, r3, #32
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	2310      	movs	r3, #16
 8004698:	e7b0      	b.n	80045fc <_printf_i+0xfc>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	2378      	movs	r3, #120	; 0x78
 80046a4:	4828      	ldr	r0, [pc, #160]	; (8004748 <_printf_i+0x248>)
 80046a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046aa:	e7e3      	b.n	8004674 <_printf_i+0x174>
 80046ac:	0659      	lsls	r1, r3, #25
 80046ae:	bf48      	it	mi
 80046b0:	b2b6      	uxthmi	r6, r6
 80046b2:	e7e6      	b.n	8004682 <_printf_i+0x182>
 80046b4:	4615      	mov	r5, r2
 80046b6:	e7bb      	b.n	8004630 <_printf_i+0x130>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	6826      	ldr	r6, [r4, #0]
 80046bc:	6961      	ldr	r1, [r4, #20]
 80046be:	1d18      	adds	r0, r3, #4
 80046c0:	6028      	str	r0, [r5, #0]
 80046c2:	0635      	lsls	r5, r6, #24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0x1cc>
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0x1d2>
 80046cc:	0670      	lsls	r0, r6, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0x1c8>
 80046d0:	8019      	strh	r1, [r3, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	4615      	mov	r5, r2
 80046d8:	e7ba      	b.n	8004650 <_printf_i+0x150>
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7fb fd9a 	bl	8000220 <memchr>
 80046ec:	b108      	cbz	r0, 80046f2 <_printf_i+0x1f2>
 80046ee:	1b40      	subs	r0, r0, r5
 80046f0:	6060      	str	r0, [r4, #4]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	2300      	movs	r3, #0
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	e7a8      	b.n	8004650 <_printf_i+0x150>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	462a      	mov	r2, r5
 8004702:	4649      	mov	r1, r9
 8004704:	4640      	mov	r0, r8
 8004706:	47d0      	blx	sl
 8004708:	3001      	adds	r0, #1
 800470a:	d0ab      	beq.n	8004664 <_printf_i+0x164>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	d413      	bmi.n	800473a <_printf_i+0x23a>
 8004712:	68e0      	ldr	r0, [r4, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	bfb8      	it	lt
 800471a:	4618      	movlt	r0, r3
 800471c:	e7a4      	b.n	8004668 <_printf_i+0x168>
 800471e:	2301      	movs	r3, #1
 8004720:	4632      	mov	r2, r6
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d09b      	beq.n	8004664 <_printf_i+0x164>
 800472c:	3501      	adds	r5, #1
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	9903      	ldr	r1, [sp, #12]
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	42ab      	cmp	r3, r5
 8004736:	dcf2      	bgt.n	800471e <_printf_i+0x21e>
 8004738:	e7eb      	b.n	8004712 <_printf_i+0x212>
 800473a:	2500      	movs	r5, #0
 800473c:	f104 0619 	add.w	r6, r4, #25
 8004740:	e7f5      	b.n	800472e <_printf_i+0x22e>
 8004742:	bf00      	nop
 8004744:	080050ed 	.word	0x080050ed
 8004748:	080050fe 	.word	0x080050fe

0800474c <_scanf_chars>:
 800474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004750:	4615      	mov	r5, r2
 8004752:	688a      	ldr	r2, [r1, #8]
 8004754:	4680      	mov	r8, r0
 8004756:	460c      	mov	r4, r1
 8004758:	b932      	cbnz	r2, 8004768 <_scanf_chars+0x1c>
 800475a:	698a      	ldr	r2, [r1, #24]
 800475c:	2a00      	cmp	r2, #0
 800475e:	bf0c      	ite	eq
 8004760:	2201      	moveq	r2, #1
 8004762:	f04f 32ff 	movne.w	r2, #4294967295
 8004766:	608a      	str	r2, [r1, #8]
 8004768:	6822      	ldr	r2, [r4, #0]
 800476a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80047fc <_scanf_chars+0xb0>
 800476e:	06d1      	lsls	r1, r2, #27
 8004770:	bf5f      	itttt	pl
 8004772:	681a      	ldrpl	r2, [r3, #0]
 8004774:	1d11      	addpl	r1, r2, #4
 8004776:	6019      	strpl	r1, [r3, #0]
 8004778:	6816      	ldrpl	r6, [r2, #0]
 800477a:	2700      	movs	r7, #0
 800477c:	69a0      	ldr	r0, [r4, #24]
 800477e:	b188      	cbz	r0, 80047a4 <_scanf_chars+0x58>
 8004780:	2801      	cmp	r0, #1
 8004782:	d107      	bne.n	8004794 <_scanf_chars+0x48>
 8004784:	682a      	ldr	r2, [r5, #0]
 8004786:	7811      	ldrb	r1, [r2, #0]
 8004788:	6962      	ldr	r2, [r4, #20]
 800478a:	5c52      	ldrb	r2, [r2, r1]
 800478c:	b952      	cbnz	r2, 80047a4 <_scanf_chars+0x58>
 800478e:	2f00      	cmp	r7, #0
 8004790:	d031      	beq.n	80047f6 <_scanf_chars+0xaa>
 8004792:	e022      	b.n	80047da <_scanf_chars+0x8e>
 8004794:	2802      	cmp	r0, #2
 8004796:	d120      	bne.n	80047da <_scanf_chars+0x8e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	d41a      	bmi.n	80047da <_scanf_chars+0x8e>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	06da      	lsls	r2, r3, #27
 80047a8:	bf5e      	ittt	pl
 80047aa:	682b      	ldrpl	r3, [r5, #0]
 80047ac:	781b      	ldrbpl	r3, [r3, #0]
 80047ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80047b2:	682a      	ldr	r2, [r5, #0]
 80047b4:	686b      	ldr	r3, [r5, #4]
 80047b6:	3201      	adds	r2, #1
 80047b8:	602a      	str	r2, [r5, #0]
 80047ba:	68a2      	ldr	r2, [r4, #8]
 80047bc:	3b01      	subs	r3, #1
 80047be:	3a01      	subs	r2, #1
 80047c0:	606b      	str	r3, [r5, #4]
 80047c2:	3701      	adds	r7, #1
 80047c4:	60a2      	str	r2, [r4, #8]
 80047c6:	b142      	cbz	r2, 80047da <_scanf_chars+0x8e>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dcd7      	bgt.n	800477c <_scanf_chars+0x30>
 80047cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047d0:	4629      	mov	r1, r5
 80047d2:	4640      	mov	r0, r8
 80047d4:	4798      	blx	r3
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d0d0      	beq.n	800477c <_scanf_chars+0x30>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f013 0310 	ands.w	r3, r3, #16
 80047e0:	d105      	bne.n	80047ee <_scanf_chars+0xa2>
 80047e2:	68e2      	ldr	r2, [r4, #12]
 80047e4:	3201      	adds	r2, #1
 80047e6:	60e2      	str	r2, [r4, #12]
 80047e8:	69a2      	ldr	r2, [r4, #24]
 80047ea:	b102      	cbz	r2, 80047ee <_scanf_chars+0xa2>
 80047ec:	7033      	strb	r3, [r6, #0]
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	443b      	add	r3, r7
 80047f2:	6123      	str	r3, [r4, #16]
 80047f4:	2000      	movs	r0, #0
 80047f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047fa:	bf00      	nop
 80047fc:	0800512b 	.word	0x0800512b

08004800 <_scanf_i>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	4698      	mov	r8, r3
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <_scanf_i+0x1e0>)
 8004808:	460c      	mov	r4, r1
 800480a:	4682      	mov	sl, r0
 800480c:	4616      	mov	r6, r2
 800480e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004812:	b087      	sub	sp, #28
 8004814:	ab03      	add	r3, sp, #12
 8004816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800481a:	4b72      	ldr	r3, [pc, #456]	; (80049e4 <_scanf_i+0x1e4>)
 800481c:	69a1      	ldr	r1, [r4, #24]
 800481e:	4a72      	ldr	r2, [pc, #456]	; (80049e8 <_scanf_i+0x1e8>)
 8004820:	2903      	cmp	r1, #3
 8004822:	bf18      	it	ne
 8004824:	461a      	movne	r2, r3
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	9201      	str	r2, [sp, #4]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004830:	bf88      	it	hi
 8004832:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004836:	4627      	mov	r7, r4
 8004838:	bf82      	ittt	hi
 800483a:	eb03 0905 	addhi.w	r9, r3, r5
 800483e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004842:	60a3      	strhi	r3, [r4, #8]
 8004844:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004848:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800484c:	bf98      	it	ls
 800484e:	f04f 0900 	movls.w	r9, #0
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	463d      	mov	r5, r7
 8004856:	f04f 0b00 	mov.w	fp, #0
 800485a:	6831      	ldr	r1, [r6, #0]
 800485c:	ab03      	add	r3, sp, #12
 800485e:	7809      	ldrb	r1, [r1, #0]
 8004860:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004864:	2202      	movs	r2, #2
 8004866:	f7fb fcdb 	bl	8000220 <memchr>
 800486a:	b328      	cbz	r0, 80048b8 <_scanf_i+0xb8>
 800486c:	f1bb 0f01 	cmp.w	fp, #1
 8004870:	d159      	bne.n	8004926 <_scanf_i+0x126>
 8004872:	6862      	ldr	r2, [r4, #4]
 8004874:	b92a      	cbnz	r2, 8004882 <_scanf_i+0x82>
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	2308      	movs	r3, #8
 800487a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487e:	6063      	str	r3, [r4, #4]
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004888:	6022      	str	r2, [r4, #0]
 800488a:	68a2      	ldr	r2, [r4, #8]
 800488c:	1e51      	subs	r1, r2, #1
 800488e:	60a1      	str	r1, [r4, #8]
 8004890:	b192      	cbz	r2, 80048b8 <_scanf_i+0xb8>
 8004892:	6832      	ldr	r2, [r6, #0]
 8004894:	1c51      	adds	r1, r2, #1
 8004896:	6031      	str	r1, [r6, #0]
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	f805 2b01 	strb.w	r2, [r5], #1
 800489e:	6872      	ldr	r2, [r6, #4]
 80048a0:	3a01      	subs	r2, #1
 80048a2:	2a00      	cmp	r2, #0
 80048a4:	6072      	str	r2, [r6, #4]
 80048a6:	dc07      	bgt.n	80048b8 <_scanf_i+0xb8>
 80048a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80048ac:	4631      	mov	r1, r6
 80048ae:	4650      	mov	r0, sl
 80048b0:	4790      	blx	r2
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f040 8085 	bne.w	80049c2 <_scanf_i+0x1c2>
 80048b8:	f10b 0b01 	add.w	fp, fp, #1
 80048bc:	f1bb 0f03 	cmp.w	fp, #3
 80048c0:	d1cb      	bne.n	800485a <_scanf_i+0x5a>
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	b90b      	cbnz	r3, 80048ca <_scanf_i+0xca>
 80048c6:	230a      	movs	r3, #10
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	4947      	ldr	r1, [pc, #284]	; (80049ec <_scanf_i+0x1ec>)
 80048ce:	6960      	ldr	r0, [r4, #20]
 80048d0:	1ac9      	subs	r1, r1, r3
 80048d2:	f000 f88d 	bl	80049f0 <__sccl>
 80048d6:	f04f 0b00 	mov.w	fp, #0
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d03d      	beq.n	800495e <_scanf_i+0x15e>
 80048e2:	6831      	ldr	r1, [r6, #0]
 80048e4:	6960      	ldr	r0, [r4, #20]
 80048e6:	f891 c000 	ldrb.w	ip, [r1]
 80048ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d035      	beq.n	800495e <_scanf_i+0x15e>
 80048f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80048f6:	d124      	bne.n	8004942 <_scanf_i+0x142>
 80048f8:	0510      	lsls	r0, r2, #20
 80048fa:	d522      	bpl.n	8004942 <_scanf_i+0x142>
 80048fc:	f10b 0b01 	add.w	fp, fp, #1
 8004900:	f1b9 0f00 	cmp.w	r9, #0
 8004904:	d003      	beq.n	800490e <_scanf_i+0x10e>
 8004906:	3301      	adds	r3, #1
 8004908:	f109 39ff 	add.w	r9, r9, #4294967295
 800490c:	60a3      	str	r3, [r4, #8]
 800490e:	6873      	ldr	r3, [r6, #4]
 8004910:	3b01      	subs	r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	6073      	str	r3, [r6, #4]
 8004916:	dd1b      	ble.n	8004950 <_scanf_i+0x150>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	3b01      	subs	r3, #1
 8004922:	60a3      	str	r3, [r4, #8]
 8004924:	e7d9      	b.n	80048da <_scanf_i+0xda>
 8004926:	f1bb 0f02 	cmp.w	fp, #2
 800492a:	d1ae      	bne.n	800488a <_scanf_i+0x8a>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004932:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004936:	d1bf      	bne.n	80048b8 <_scanf_i+0xb8>
 8004938:	2310      	movs	r3, #16
 800493a:	6063      	str	r3, [r4, #4]
 800493c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004940:	e7a2      	b.n	8004888 <_scanf_i+0x88>
 8004942:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004946:	6022      	str	r2, [r4, #0]
 8004948:	780b      	ldrb	r3, [r1, #0]
 800494a:	f805 3b01 	strb.w	r3, [r5], #1
 800494e:	e7de      	b.n	800490e <_scanf_i+0x10e>
 8004950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004954:	4631      	mov	r1, r6
 8004956:	4650      	mov	r0, sl
 8004958:	4798      	blx	r3
 800495a:	2800      	cmp	r0, #0
 800495c:	d0df      	beq.n	800491e <_scanf_i+0x11e>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	05db      	lsls	r3, r3, #23
 8004962:	d50d      	bpl.n	8004980 <_scanf_i+0x180>
 8004964:	42bd      	cmp	r5, r7
 8004966:	d909      	bls.n	800497c <_scanf_i+0x17c>
 8004968:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800496c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004970:	4632      	mov	r2, r6
 8004972:	4650      	mov	r0, sl
 8004974:	4798      	blx	r3
 8004976:	f105 39ff 	add.w	r9, r5, #4294967295
 800497a:	464d      	mov	r5, r9
 800497c:	42bd      	cmp	r5, r7
 800497e:	d02d      	beq.n	80049dc <_scanf_i+0x1dc>
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	f012 0210 	ands.w	r2, r2, #16
 8004986:	d113      	bne.n	80049b0 <_scanf_i+0x1b0>
 8004988:	702a      	strb	r2, [r5, #0]
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	9e01      	ldr	r6, [sp, #4]
 800498e:	4639      	mov	r1, r7
 8004990:	4650      	mov	r0, sl
 8004992:	47b0      	blx	r6
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	f8d8 3000 	ldr.w	r3, [r8]
 800499a:	f011 0f20 	tst.w	r1, #32
 800499e:	d013      	beq.n	80049c8 <_scanf_i+0x1c8>
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	f8c8 2000 	str.w	r2, [r8]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6018      	str	r0, [r3, #0]
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60e3      	str	r3, [r4, #12]
 80049b0:	1bed      	subs	r5, r5, r7
 80049b2:	44ab      	add	fp, r5
 80049b4:	6925      	ldr	r5, [r4, #16]
 80049b6:	445d      	add	r5, fp
 80049b8:	6125      	str	r5, [r4, #16]
 80049ba:	2000      	movs	r0, #0
 80049bc:	b007      	add	sp, #28
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	f04f 0b00 	mov.w	fp, #0
 80049c6:	e7ca      	b.n	800495e <_scanf_i+0x15e>
 80049c8:	1d1a      	adds	r2, r3, #4
 80049ca:	f8c8 2000 	str.w	r2, [r8]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f011 0f01 	tst.w	r1, #1
 80049d4:	bf14      	ite	ne
 80049d6:	8018      	strhne	r0, [r3, #0]
 80049d8:	6018      	streq	r0, [r3, #0]
 80049da:	e7e6      	b.n	80049aa <_scanf_i+0x1aa>
 80049dc:	2001      	movs	r0, #1
 80049de:	e7ed      	b.n	80049bc <_scanf_i+0x1bc>
 80049e0:	08005094 	.word	0x08005094
 80049e4:	08004c4d 	.word	0x08004c4d
 80049e8:	08004b65 	.word	0x08004b65
 80049ec:	08005128 	.word	0x08005128

080049f0 <__sccl>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	780b      	ldrb	r3, [r1, #0]
 80049f4:	4604      	mov	r4, r0
 80049f6:	2b5e      	cmp	r3, #94	; 0x5e
 80049f8:	bf0b      	itete	eq
 80049fa:	784b      	ldrbeq	r3, [r1, #1]
 80049fc:	1c48      	addne	r0, r1, #1
 80049fe:	1c88      	addeq	r0, r1, #2
 8004a00:	2200      	movne	r2, #0
 8004a02:	bf08      	it	eq
 8004a04:	2201      	moveq	r2, #1
 8004a06:	1e61      	subs	r1, r4, #1
 8004a08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004a0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004a10:	42a9      	cmp	r1, r5
 8004a12:	d1fb      	bne.n	8004a0c <__sccl+0x1c>
 8004a14:	b90b      	cbnz	r3, 8004a1a <__sccl+0x2a>
 8004a16:	3801      	subs	r0, #1
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	f082 0201 	eor.w	r2, r2, #1
 8004a1e:	54e2      	strb	r2, [r4, r3]
 8004a20:	4605      	mov	r5, r0
 8004a22:	4628      	mov	r0, r5
 8004a24:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004a28:	292d      	cmp	r1, #45	; 0x2d
 8004a2a:	d006      	beq.n	8004a3a <__sccl+0x4a>
 8004a2c:	295d      	cmp	r1, #93	; 0x5d
 8004a2e:	d0f3      	beq.n	8004a18 <__sccl+0x28>
 8004a30:	b909      	cbnz	r1, 8004a36 <__sccl+0x46>
 8004a32:	4628      	mov	r0, r5
 8004a34:	e7f0      	b.n	8004a18 <__sccl+0x28>
 8004a36:	460b      	mov	r3, r1
 8004a38:	e7f1      	b.n	8004a1e <__sccl+0x2e>
 8004a3a:	786e      	ldrb	r6, [r5, #1]
 8004a3c:	2e5d      	cmp	r6, #93	; 0x5d
 8004a3e:	d0fa      	beq.n	8004a36 <__sccl+0x46>
 8004a40:	42b3      	cmp	r3, r6
 8004a42:	dcf8      	bgt.n	8004a36 <__sccl+0x46>
 8004a44:	3502      	adds	r5, #2
 8004a46:	4619      	mov	r1, r3
 8004a48:	3101      	adds	r1, #1
 8004a4a:	428e      	cmp	r6, r1
 8004a4c:	5462      	strb	r2, [r4, r1]
 8004a4e:	dcfb      	bgt.n	8004a48 <__sccl+0x58>
 8004a50:	1af1      	subs	r1, r6, r3
 8004a52:	3901      	subs	r1, #1
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	42b3      	cmp	r3, r6
 8004a58:	bfa8      	it	ge
 8004a5a:	2100      	movge	r1, #0
 8004a5c:	1843      	adds	r3, r0, r1
 8004a5e:	e7e0      	b.n	8004a22 <__sccl+0x32>

08004a60 <_strtol_l.constprop.0>:
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a66:	d001      	beq.n	8004a6c <_strtol_l.constprop.0+0xc>
 8004a68:	2b24      	cmp	r3, #36	; 0x24
 8004a6a:	d906      	bls.n	8004a7a <_strtol_l.constprop.0+0x1a>
 8004a6c:	f7ff f8f0 	bl	8003c50 <__errno>
 8004a70:	2316      	movs	r3, #22
 8004a72:	6003      	str	r3, [r0, #0]
 8004a74:	2000      	movs	r0, #0
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004b60 <_strtol_l.constprop.0+0x100>
 8004a7e:	460d      	mov	r5, r1
 8004a80:	462e      	mov	r6, r5
 8004a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004a8a:	f017 0708 	ands.w	r7, r7, #8
 8004a8e:	d1f7      	bne.n	8004a80 <_strtol_l.constprop.0+0x20>
 8004a90:	2c2d      	cmp	r4, #45	; 0x2d
 8004a92:	d132      	bne.n	8004afa <_strtol_l.constprop.0+0x9a>
 8004a94:	782c      	ldrb	r4, [r5, #0]
 8004a96:	2701      	movs	r7, #1
 8004a98:	1cb5      	adds	r5, r6, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d05b      	beq.n	8004b56 <_strtol_l.constprop.0+0xf6>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d109      	bne.n	8004ab6 <_strtol_l.constprop.0+0x56>
 8004aa2:	2c30      	cmp	r4, #48	; 0x30
 8004aa4:	d107      	bne.n	8004ab6 <_strtol_l.constprop.0+0x56>
 8004aa6:	782c      	ldrb	r4, [r5, #0]
 8004aa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004aac:	2c58      	cmp	r4, #88	; 0x58
 8004aae:	d14d      	bne.n	8004b4c <_strtol_l.constprop.0+0xec>
 8004ab0:	786c      	ldrb	r4, [r5, #1]
 8004ab2:	2310      	movs	r3, #16
 8004ab4:	3502      	adds	r5, #2
 8004ab6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004aba:	f108 38ff 	add.w	r8, r8, #4294967295
 8004abe:	f04f 0c00 	mov.w	ip, #0
 8004ac2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004ac6:	4666      	mov	r6, ip
 8004ac8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004acc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004ad0:	f1be 0f09 	cmp.w	lr, #9
 8004ad4:	d816      	bhi.n	8004b04 <_strtol_l.constprop.0+0xa4>
 8004ad6:	4674      	mov	r4, lr
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	dd24      	ble.n	8004b26 <_strtol_l.constprop.0+0xc6>
 8004adc:	f1bc 0f00 	cmp.w	ip, #0
 8004ae0:	db1e      	blt.n	8004b20 <_strtol_l.constprop.0+0xc0>
 8004ae2:	45b1      	cmp	r9, r6
 8004ae4:	d31c      	bcc.n	8004b20 <_strtol_l.constprop.0+0xc0>
 8004ae6:	d101      	bne.n	8004aec <_strtol_l.constprop.0+0x8c>
 8004ae8:	45a2      	cmp	sl, r4
 8004aea:	db19      	blt.n	8004b20 <_strtol_l.constprop.0+0xc0>
 8004aec:	fb06 4603 	mla	r6, r6, r3, r4
 8004af0:	f04f 0c01 	mov.w	ip, #1
 8004af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004af8:	e7e8      	b.n	8004acc <_strtol_l.constprop.0+0x6c>
 8004afa:	2c2b      	cmp	r4, #43	; 0x2b
 8004afc:	bf04      	itt	eq
 8004afe:	782c      	ldrbeq	r4, [r5, #0]
 8004b00:	1cb5      	addeq	r5, r6, #2
 8004b02:	e7ca      	b.n	8004a9a <_strtol_l.constprop.0+0x3a>
 8004b04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004b08:	f1be 0f19 	cmp.w	lr, #25
 8004b0c:	d801      	bhi.n	8004b12 <_strtol_l.constprop.0+0xb2>
 8004b0e:	3c37      	subs	r4, #55	; 0x37
 8004b10:	e7e2      	b.n	8004ad8 <_strtol_l.constprop.0+0x78>
 8004b12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004b16:	f1be 0f19 	cmp.w	lr, #25
 8004b1a:	d804      	bhi.n	8004b26 <_strtol_l.constprop.0+0xc6>
 8004b1c:	3c57      	subs	r4, #87	; 0x57
 8004b1e:	e7db      	b.n	8004ad8 <_strtol_l.constprop.0+0x78>
 8004b20:	f04f 3cff 	mov.w	ip, #4294967295
 8004b24:	e7e6      	b.n	8004af4 <_strtol_l.constprop.0+0x94>
 8004b26:	f1bc 0f00 	cmp.w	ip, #0
 8004b2a:	da05      	bge.n	8004b38 <_strtol_l.constprop.0+0xd8>
 8004b2c:	2322      	movs	r3, #34	; 0x22
 8004b2e:	6003      	str	r3, [r0, #0]
 8004b30:	4646      	mov	r6, r8
 8004b32:	b942      	cbnz	r2, 8004b46 <_strtol_l.constprop.0+0xe6>
 8004b34:	4630      	mov	r0, r6
 8004b36:	e79e      	b.n	8004a76 <_strtol_l.constprop.0+0x16>
 8004b38:	b107      	cbz	r7, 8004b3c <_strtol_l.constprop.0+0xdc>
 8004b3a:	4276      	negs	r6, r6
 8004b3c:	2a00      	cmp	r2, #0
 8004b3e:	d0f9      	beq.n	8004b34 <_strtol_l.constprop.0+0xd4>
 8004b40:	f1bc 0f00 	cmp.w	ip, #0
 8004b44:	d000      	beq.n	8004b48 <_strtol_l.constprop.0+0xe8>
 8004b46:	1e69      	subs	r1, r5, #1
 8004b48:	6011      	str	r1, [r2, #0]
 8004b4a:	e7f3      	b.n	8004b34 <_strtol_l.constprop.0+0xd4>
 8004b4c:	2430      	movs	r4, #48	; 0x30
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1b1      	bne.n	8004ab6 <_strtol_l.constprop.0+0x56>
 8004b52:	2308      	movs	r3, #8
 8004b54:	e7af      	b.n	8004ab6 <_strtol_l.constprop.0+0x56>
 8004b56:	2c30      	cmp	r4, #48	; 0x30
 8004b58:	d0a5      	beq.n	8004aa6 <_strtol_l.constprop.0+0x46>
 8004b5a:	230a      	movs	r3, #10
 8004b5c:	e7ab      	b.n	8004ab6 <_strtol_l.constprop.0+0x56>
 8004b5e:	bf00      	nop
 8004b60:	0800512b 	.word	0x0800512b

08004b64 <_strtol_r>:
 8004b64:	f7ff bf7c 	b.w	8004a60 <_strtol_l.constprop.0>

08004b68 <_strtoul_l.constprop.0>:
 8004b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	4f36      	ldr	r7, [pc, #216]	; (8004c48 <_strtoul_l.constprop.0+0xe0>)
 8004b6e:	4686      	mov	lr, r0
 8004b70:	460d      	mov	r5, r1
 8004b72:	4628      	mov	r0, r5
 8004b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b78:	5de6      	ldrb	r6, [r4, r7]
 8004b7a:	f016 0608 	ands.w	r6, r6, #8
 8004b7e:	d1f8      	bne.n	8004b72 <_strtoul_l.constprop.0+0xa>
 8004b80:	2c2d      	cmp	r4, #45	; 0x2d
 8004b82:	d12f      	bne.n	8004be4 <_strtoul_l.constprop.0+0x7c>
 8004b84:	782c      	ldrb	r4, [r5, #0]
 8004b86:	2601      	movs	r6, #1
 8004b88:	1c85      	adds	r5, r0, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d057      	beq.n	8004c3e <_strtoul_l.constprop.0+0xd6>
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d109      	bne.n	8004ba6 <_strtoul_l.constprop.0+0x3e>
 8004b92:	2c30      	cmp	r4, #48	; 0x30
 8004b94:	d107      	bne.n	8004ba6 <_strtoul_l.constprop.0+0x3e>
 8004b96:	7828      	ldrb	r0, [r5, #0]
 8004b98:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b9c:	2858      	cmp	r0, #88	; 0x58
 8004b9e:	d149      	bne.n	8004c34 <_strtoul_l.constprop.0+0xcc>
 8004ba0:	786c      	ldrb	r4, [r5, #1]
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	3502      	adds	r5, #2
 8004ba6:	f04f 38ff 	mov.w	r8, #4294967295
 8004baa:	2700      	movs	r7, #0
 8004bac:	fbb8 f8f3 	udiv	r8, r8, r3
 8004bb0:	fb03 f908 	mul.w	r9, r3, r8
 8004bb4:	ea6f 0909 	mvn.w	r9, r9
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004bbe:	f1bc 0f09 	cmp.w	ip, #9
 8004bc2:	d814      	bhi.n	8004bee <_strtoul_l.constprop.0+0x86>
 8004bc4:	4664      	mov	r4, ip
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	dd22      	ble.n	8004c10 <_strtoul_l.constprop.0+0xa8>
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	db1d      	blt.n	8004c0a <_strtoul_l.constprop.0+0xa2>
 8004bce:	4580      	cmp	r8, r0
 8004bd0:	d31b      	bcc.n	8004c0a <_strtoul_l.constprop.0+0xa2>
 8004bd2:	d101      	bne.n	8004bd8 <_strtoul_l.constprop.0+0x70>
 8004bd4:	45a1      	cmp	r9, r4
 8004bd6:	db18      	blt.n	8004c0a <_strtoul_l.constprop.0+0xa2>
 8004bd8:	fb00 4003 	mla	r0, r0, r3, r4
 8004bdc:	2701      	movs	r7, #1
 8004bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004be2:	e7ea      	b.n	8004bba <_strtoul_l.constprop.0+0x52>
 8004be4:	2c2b      	cmp	r4, #43	; 0x2b
 8004be6:	bf04      	itt	eq
 8004be8:	782c      	ldrbeq	r4, [r5, #0]
 8004bea:	1c85      	addeq	r5, r0, #2
 8004bec:	e7cd      	b.n	8004b8a <_strtoul_l.constprop.0+0x22>
 8004bee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004bf2:	f1bc 0f19 	cmp.w	ip, #25
 8004bf6:	d801      	bhi.n	8004bfc <_strtoul_l.constprop.0+0x94>
 8004bf8:	3c37      	subs	r4, #55	; 0x37
 8004bfa:	e7e4      	b.n	8004bc6 <_strtoul_l.constprop.0+0x5e>
 8004bfc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c00:	f1bc 0f19 	cmp.w	ip, #25
 8004c04:	d804      	bhi.n	8004c10 <_strtoul_l.constprop.0+0xa8>
 8004c06:	3c57      	subs	r4, #87	; 0x57
 8004c08:	e7dd      	b.n	8004bc6 <_strtoul_l.constprop.0+0x5e>
 8004c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0e:	e7e6      	b.n	8004bde <_strtoul_l.constprop.0+0x76>
 8004c10:	2f00      	cmp	r7, #0
 8004c12:	da07      	bge.n	8004c24 <_strtoul_l.constprop.0+0xbc>
 8004c14:	2322      	movs	r3, #34	; 0x22
 8004c16:	f8ce 3000 	str.w	r3, [lr]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	b932      	cbnz	r2, 8004c2e <_strtoul_l.constprop.0+0xc6>
 8004c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c24:	b106      	cbz	r6, 8004c28 <_strtoul_l.constprop.0+0xc0>
 8004c26:	4240      	negs	r0, r0
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d0f9      	beq.n	8004c20 <_strtoul_l.constprop.0+0xb8>
 8004c2c:	b107      	cbz	r7, 8004c30 <_strtoul_l.constprop.0+0xc8>
 8004c2e:	1e69      	subs	r1, r5, #1
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	e7f5      	b.n	8004c20 <_strtoul_l.constprop.0+0xb8>
 8004c34:	2430      	movs	r4, #48	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1b5      	bne.n	8004ba6 <_strtoul_l.constprop.0+0x3e>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	e7b3      	b.n	8004ba6 <_strtoul_l.constprop.0+0x3e>
 8004c3e:	2c30      	cmp	r4, #48	; 0x30
 8004c40:	d0a9      	beq.n	8004b96 <_strtoul_l.constprop.0+0x2e>
 8004c42:	230a      	movs	r3, #10
 8004c44:	e7af      	b.n	8004ba6 <_strtoul_l.constprop.0+0x3e>
 8004c46:	bf00      	nop
 8004c48:	0800512b 	.word	0x0800512b

08004c4c <_strtoul_r>:
 8004c4c:	f7ff bf8c 	b.w	8004b68 <_strtoul_l.constprop.0>

08004c50 <__submore>:
 8004c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c54:	460c      	mov	r4, r1
 8004c56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d11d      	bne.n	8004c9c <__submore+0x4c>
 8004c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c64:	f000 f8b6 	bl	8004dd4 <_malloc_r>
 8004c68:	b918      	cbnz	r0, 8004c72 <__submore+0x22>
 8004c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c76:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c78:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c7e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004c82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c86:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004c8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c8e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004c92:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e7e8      	b.n	8004c6e <__submore+0x1e>
 8004c9c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004c9e:	0077      	lsls	r7, r6, #1
 8004ca0:	463a      	mov	r2, r7
 8004ca2:	f000 f90b 	bl	8004ebc <_realloc_r>
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0de      	beq.n	8004c6a <__submore+0x1a>
 8004cac:	eb00 0806 	add.w	r8, r0, r6
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4632      	mov	r2, r6
 8004cb4:	4640      	mov	r0, r8
 8004cb6:	f7fe fff5 	bl	8003ca4 <memcpy>
 8004cba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004cbe:	f8c4 8000 	str.w	r8, [r4]
 8004cc2:	e7e9      	b.n	8004c98 <__submore+0x48>

08004cc4 <__retarget_lock_acquire_recursive>:
 8004cc4:	4770      	bx	lr

08004cc6 <__retarget_lock_release_recursive>:
 8004cc6:	4770      	bx	lr

08004cc8 <memmove>:
 8004cc8:	4288      	cmp	r0, r1
 8004cca:	b510      	push	{r4, lr}
 8004ccc:	eb01 0402 	add.w	r4, r1, r2
 8004cd0:	d902      	bls.n	8004cd8 <memmove+0x10>
 8004cd2:	4284      	cmp	r4, r0
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	d807      	bhi.n	8004ce8 <memmove+0x20>
 8004cd8:	1e43      	subs	r3, r0, #1
 8004cda:	42a1      	cmp	r1, r4
 8004cdc:	d008      	beq.n	8004cf0 <memmove+0x28>
 8004cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ce6:	e7f8      	b.n	8004cda <memmove+0x12>
 8004ce8:	4402      	add	r2, r0
 8004cea:	4601      	mov	r1, r0
 8004cec:	428a      	cmp	r2, r1
 8004cee:	d100      	bne.n	8004cf2 <memmove+0x2a>
 8004cf0:	bd10      	pop	{r4, pc}
 8004cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfa:	e7f7      	b.n	8004cec <memmove+0x24>

08004cfc <_free_r>:
 8004cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cfe:	2900      	cmp	r1, #0
 8004d00:	d044      	beq.n	8004d8c <_free_r+0x90>
 8004d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d06:	9001      	str	r0, [sp, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d0e:	bfb8      	it	lt
 8004d10:	18e4      	addlt	r4, r4, r3
 8004d12:	f000 f913 	bl	8004f3c <__malloc_lock>
 8004d16:	4a1e      	ldr	r2, [pc, #120]	; (8004d90 <_free_r+0x94>)
 8004d18:	9801      	ldr	r0, [sp, #4]
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	b933      	cbnz	r3, 8004d2c <_free_r+0x30>
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	6014      	str	r4, [r2, #0]
 8004d22:	b003      	add	sp, #12
 8004d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d28:	f000 b90e 	b.w	8004f48 <__malloc_unlock>
 8004d2c:	42a3      	cmp	r3, r4
 8004d2e:	d908      	bls.n	8004d42 <_free_r+0x46>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1961      	adds	r1, r4, r5
 8004d34:	428b      	cmp	r3, r1
 8004d36:	bf01      	itttt	eq
 8004d38:	6819      	ldreq	r1, [r3, #0]
 8004d3a:	685b      	ldreq	r3, [r3, #4]
 8004d3c:	1949      	addeq	r1, r1, r5
 8004d3e:	6021      	streq	r1, [r4, #0]
 8004d40:	e7ed      	b.n	8004d1e <_free_r+0x22>
 8004d42:	461a      	mov	r2, r3
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b10b      	cbz	r3, 8004d4c <_free_r+0x50>
 8004d48:	42a3      	cmp	r3, r4
 8004d4a:	d9fa      	bls.n	8004d42 <_free_r+0x46>
 8004d4c:	6811      	ldr	r1, [r2, #0]
 8004d4e:	1855      	adds	r5, r2, r1
 8004d50:	42a5      	cmp	r5, r4
 8004d52:	d10b      	bne.n	8004d6c <_free_r+0x70>
 8004d54:	6824      	ldr	r4, [r4, #0]
 8004d56:	4421      	add	r1, r4
 8004d58:	1854      	adds	r4, r2, r1
 8004d5a:	42a3      	cmp	r3, r4
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	d1e0      	bne.n	8004d22 <_free_r+0x26>
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	6053      	str	r3, [r2, #4]
 8004d66:	4421      	add	r1, r4
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	e7da      	b.n	8004d22 <_free_r+0x26>
 8004d6c:	d902      	bls.n	8004d74 <_free_r+0x78>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	e7d6      	b.n	8004d22 <_free_r+0x26>
 8004d74:	6825      	ldr	r5, [r4, #0]
 8004d76:	1961      	adds	r1, r4, r5
 8004d78:	428b      	cmp	r3, r1
 8004d7a:	bf04      	itt	eq
 8004d7c:	6819      	ldreq	r1, [r3, #0]
 8004d7e:	685b      	ldreq	r3, [r3, #4]
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	bf04      	itt	eq
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	6054      	str	r4, [r2, #4]
 8004d8a:	e7ca      	b.n	8004d22 <_free_r+0x26>
 8004d8c:	b003      	add	sp, #12
 8004d8e:	bd30      	pop	{r4, r5, pc}
 8004d90:	20000728 	.word	0x20000728

08004d94 <sbrk_aligned>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4e0e      	ldr	r6, [pc, #56]	; (8004dd0 <sbrk_aligned+0x3c>)
 8004d98:	460c      	mov	r4, r1
 8004d9a:	6831      	ldr	r1, [r6, #0]
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	b911      	cbnz	r1, 8004da6 <sbrk_aligned+0x12>
 8004da0:	f000 f8bc 	bl	8004f1c <_sbrk_r>
 8004da4:	6030      	str	r0, [r6, #0]
 8004da6:	4621      	mov	r1, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f8b7 	bl	8004f1c <_sbrk_r>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d00a      	beq.n	8004dc8 <sbrk_aligned+0x34>
 8004db2:	1cc4      	adds	r4, r0, #3
 8004db4:	f024 0403 	bic.w	r4, r4, #3
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d007      	beq.n	8004dcc <sbrk_aligned+0x38>
 8004dbc:	1a21      	subs	r1, r4, r0
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f8ac 	bl	8004f1c <_sbrk_r>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d101      	bne.n	8004dcc <sbrk_aligned+0x38>
 8004dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bd70      	pop	{r4, r5, r6, pc}
 8004dd0:	2000072c 	.word	0x2000072c

08004dd4 <_malloc_r>:
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd8:	1ccd      	adds	r5, r1, #3
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	4607      	mov	r7, r0
 8004dea:	db01      	blt.n	8004df0 <_malloc_r+0x1c>
 8004dec:	42a9      	cmp	r1, r5
 8004dee:	d905      	bls.n	8004dfc <_malloc_r+0x28>
 8004df0:	230c      	movs	r3, #12
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	2600      	movs	r6, #0
 8004df6:	4630      	mov	r0, r6
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	4e2e      	ldr	r6, [pc, #184]	; (8004eb8 <_malloc_r+0xe4>)
 8004dfe:	f000 f89d 	bl	8004f3c <__malloc_lock>
 8004e02:	6833      	ldr	r3, [r6, #0]
 8004e04:	461c      	mov	r4, r3
 8004e06:	bb34      	cbnz	r4, 8004e56 <_malloc_r+0x82>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff ffc2 	bl	8004d94 <sbrk_aligned>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	4604      	mov	r4, r0
 8004e14:	d14d      	bne.n	8004eb2 <_malloc_r+0xde>
 8004e16:	6834      	ldr	r4, [r6, #0]
 8004e18:	4626      	mov	r6, r4
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d140      	bne.n	8004ea0 <_malloc_r+0xcc>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	4631      	mov	r1, r6
 8004e22:	4638      	mov	r0, r7
 8004e24:	eb04 0803 	add.w	r8, r4, r3
 8004e28:	f000 f878 	bl	8004f1c <_sbrk_r>
 8004e2c:	4580      	cmp	r8, r0
 8004e2e:	d13a      	bne.n	8004ea6 <_malloc_r+0xd2>
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	3503      	adds	r5, #3
 8004e34:	1a6d      	subs	r5, r5, r1
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	4629      	mov	r1, r5
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff ffa5 	bl	8004d94 <sbrk_aligned>
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d02b      	beq.n	8004ea6 <_malloc_r+0xd2>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	442b      	add	r3, r5
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	e00e      	b.n	8004e74 <_malloc_r+0xa0>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	1b52      	subs	r2, r2, r5
 8004e5a:	d41e      	bmi.n	8004e9a <_malloc_r+0xc6>
 8004e5c:	2a0b      	cmp	r2, #11
 8004e5e:	d916      	bls.n	8004e8e <_malloc_r+0xba>
 8004e60:	1961      	adds	r1, r4, r5
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	bf18      	it	ne
 8004e68:	6059      	strne	r1, [r3, #4]
 8004e6a:	6863      	ldr	r3, [r4, #4]
 8004e6c:	bf08      	it	eq
 8004e6e:	6031      	streq	r1, [r6, #0]
 8004e70:	5162      	str	r2, [r4, r5]
 8004e72:	604b      	str	r3, [r1, #4]
 8004e74:	4638      	mov	r0, r7
 8004e76:	f104 060b 	add.w	r6, r4, #11
 8004e7a:	f000 f865 	bl	8004f48 <__malloc_unlock>
 8004e7e:	f026 0607 	bic.w	r6, r6, #7
 8004e82:	1d23      	adds	r3, r4, #4
 8004e84:	1af2      	subs	r2, r6, r3
 8004e86:	d0b6      	beq.n	8004df6 <_malloc_r+0x22>
 8004e88:	1b9b      	subs	r3, r3, r6
 8004e8a:	50a3      	str	r3, [r4, r2]
 8004e8c:	e7b3      	b.n	8004df6 <_malloc_r+0x22>
 8004e8e:	6862      	ldr	r2, [r4, #4]
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	bf0c      	ite	eq
 8004e94:	6032      	streq	r2, [r6, #0]
 8004e96:	605a      	strne	r2, [r3, #4]
 8004e98:	e7ec      	b.n	8004e74 <_malloc_r+0xa0>
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	6864      	ldr	r4, [r4, #4]
 8004e9e:	e7b2      	b.n	8004e06 <_malloc_r+0x32>
 8004ea0:	4634      	mov	r4, r6
 8004ea2:	6876      	ldr	r6, [r6, #4]
 8004ea4:	e7b9      	b.n	8004e1a <_malloc_r+0x46>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 f84c 	bl	8004f48 <__malloc_unlock>
 8004eb0:	e7a1      	b.n	8004df6 <_malloc_r+0x22>
 8004eb2:	6025      	str	r5, [r4, #0]
 8004eb4:	e7de      	b.n	8004e74 <_malloc_r+0xa0>
 8004eb6:	bf00      	nop
 8004eb8:	20000728 	.word	0x20000728

08004ebc <_realloc_r>:
 8004ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	460e      	mov	r6, r1
 8004ec6:	b921      	cbnz	r1, 8004ed2 <_realloc_r+0x16>
 8004ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	4611      	mov	r1, r2
 8004ece:	f7ff bf81 	b.w	8004dd4 <_malloc_r>
 8004ed2:	b92a      	cbnz	r2, 8004ee0 <_realloc_r+0x24>
 8004ed4:	f7ff ff12 	bl	8004cfc <_free_r>
 8004ed8:	4625      	mov	r5, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee0:	f000 f838 	bl	8004f54 <_malloc_usable_size_r>
 8004ee4:	4284      	cmp	r4, r0
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	d802      	bhi.n	8004ef0 <_realloc_r+0x34>
 8004eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eee:	d812      	bhi.n	8004f16 <_realloc_r+0x5a>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7ff ff6e 	bl	8004dd4 <_malloc_r>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0ed      	beq.n	8004eda <_realloc_r+0x1e>
 8004efe:	42bc      	cmp	r4, r7
 8004f00:	4622      	mov	r2, r4
 8004f02:	4631      	mov	r1, r6
 8004f04:	bf28      	it	cs
 8004f06:	463a      	movcs	r2, r7
 8004f08:	f7fe fecc 	bl	8003ca4 <memcpy>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4640      	mov	r0, r8
 8004f10:	f7ff fef4 	bl	8004cfc <_free_r>
 8004f14:	e7e1      	b.n	8004eda <_realloc_r+0x1e>
 8004f16:	4635      	mov	r5, r6
 8004f18:	e7df      	b.n	8004eda <_realloc_r+0x1e>
	...

08004f1c <_sbrk_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	; (8004f38 <_sbrk_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc f920 	bl	800116c <_sbrk>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_sbrk_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_sbrk_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000720 	.word	0x20000720

08004f3c <__malloc_lock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_lock+0x8>)
 8004f3e:	f7ff bec1 	b.w	8004cc4 <__retarget_lock_acquire_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000724 	.word	0x20000724

08004f48 <__malloc_unlock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_unlock+0x8>)
 8004f4a:	f7ff bebc 	b.w	8004cc6 <__retarget_lock_release_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000724 	.word	0x20000724

08004f54 <_malloc_usable_size_r>:
 8004f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f58:	1f18      	subs	r0, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	bfbc      	itt	lt
 8004f5e:	580b      	ldrlt	r3, [r1, r0]
 8004f60:	18c0      	addlt	r0, r0, r3
 8004f62:	4770      	bx	lr

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
